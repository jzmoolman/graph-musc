// Syndrome
MATCH (s:syndrome) DETACH DELETE s;
MATCH (n:LKP_GENE_SYNDROME)
WHERE NOT(n.GeneMasterName = 'Unknown'
    OR n.SyndromeMasterName = 'Unknown')
WITH DISTINCT n.SyndromeMasterName as name
CREATE (s:syndrome {name:name});

MATCH (gslk:LKP_GENE_SYNDROME)
MATCH (g:gene)
MATCH (s:syndrome)
WHERE g.name = gslk.GeneMasterName 
AND s.name = gslk.SyndromeMasterName
CREATE (g)-[r:ASSOCIATED]->(s);


//SyndromeVerbiage
MATCH (s:syndrome)
MATCH (sv:LKP_SYNDROME_VERBIAGE) 
WHERE 
    s.name = sv.SyndromeMasterName 
WITH s, collect(sv.SyndromeMasterName) AS syndromes, COLLECT(sv.HereditaryType) AS types, COLLECT(sv.VerbiageFromMedneonAug2022 ) as verbiages
// RETURN *
SET s.types = types,
    s.verbiages = verbiages;

//SyndromeVerbiage
MATCH (s:syndrome)
MATCH (cs:LKP_CHATGPT_SYNDROME) 
WHERE 
    s.name = cs.SyndromeMasterName 
WITH s, cs
// RETURN *
SET s.google_drive_link = cs.GoogleDriveLink;

//OLD WAY
//SyndromeVerbiage - Olde way - rather store the diffefrent type with in syndrome node, 
// MVATCH (s:syndrome)
// MATCH (sv:LKP_SYNDROME_VERBIAGE) 
// WHERE 
//     s.name = sv.SyndromeMasterName 
// WITH s, collect(sv.SyndromeMasterName) as syndromes, collect(sv.HereditaryType) AS types
// RETURN s, syndromes, types, apoc.coll.indexOf(types, 'Dominant') AS dominantIndex,apoc.coll.indexOf(types, 'Recessive') As recessiveIndexA


// //SyndromeVerbiage
// MATCH (s:syndrome)
// MATCH (sv:LKP_SYNDROME_VERBIAGE) 
// WHERE 
//     s.name = sv.SyndromeMasterName 
// WITH s, collect(sv.SyndromeMasterName) as syndromes, collect(sv.HereditaryType) AS types
// WITH s, syndromes, types, apoc.coll.indexOf(types, 'Dominant') AS dominantIndex,apoc.coll.indexOf(types, 'Recessive') As recessiveIndex
// RETURN
// (CASE WHEN dominantIndex <> -1 THEN 'Dominant' ELSE 'Recessive' END),
// (CASE WHEN dominantIndex <> -1 THEN syndromes[dominantIndex] ELSE syndromes[recessiveIndex] END)


// //   hereditaryType: (CASE WHEN apoc.coll.containsAll(verbiages, ['Dominant', 'Recessive']) THEN 'Dominant' WHEN apoc.coll.containsAll(verbiages, ['Dominant']) THEN 'Dominant' ELSE 'Recessive' END)


// // WITH s, sv, collect(sv.HereditaryType) AS verbiages

// //WITH s, sv, collect(sv.HereditaryType) as verbiages
// // CREATE (sv:SyndromeVerbiage {
// //   name: v.SyndromeMasterName,
// //   hereditaryType: (CASE WHEN apoc.coll.containsAll(verbiages, ['Dominant', 'Recessive']) THEN 'Dominant' WHEN apoc.coll.containsAll(verbiages, ['Dominant']) THEN 'Dominant' ELSE 'Recessive' END)
// // })<-[:ATTR2]-(s);