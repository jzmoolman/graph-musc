{"ast":null,"code":"\"use strict\";\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar pool_config_1 = __importDefault(require(\"./pool-config\"));\n\nvar neo4j_driver_core_1 = require(\"neo4j-driver-core\");\n\nvar Logger = neo4j_driver_core_1.internal.logger.Logger;\n\nvar Pool =\n/** @class */\nfunction () {\n  /**\n   * @param {function(address: ServerAddress, function(address: ServerAddress, resource: object): Promise<object>): Promise<object>} create\n   *                an allocation function that creates a promise with a new resource. It's given an address for which to\n   *                allocate the connection and a function that will return the resource to the pool if invoked, which is\n   *                meant to be called on .dispose or .close or whatever mechanism the resource uses to finalize.\n   * @param {function(resource: object): Promise<void>} destroy\n   *                called with the resource when it is evicted from this pool\n   * @param {function(resource: object): boolean} validate\n   *                called at various times (like when an instance is acquired and when it is returned.\n   *                If this returns false, the resource will be evicted\n   * @param {function(resource: object, observer: { onError }): void} installIdleObserver\n   *                called when the resource is released back to pool\n   * @param {function(resource: object): void} removeIdleObserver\n   *                called when the resource is acquired from the pool\n   * @param {PoolConfig} config configuration for the new driver.\n   * @param {Logger} log the driver logger.\n   */\n  function Pool(_a) {\n    var _b = _a === void 0 ? {} : _a,\n        _c = _b.create,\n        create = _c === void 0 ? function (address, release) {\n      return Promise.resolve();\n    } : _c,\n        _d = _b.destroy,\n        destroy = _d === void 0 ? function (conn) {\n      return Promise.resolve();\n    } : _d,\n        _e = _b.validate,\n        validate = _e === void 0 ? function (conn) {\n      return true;\n    } : _e,\n        _f = _b.installIdleObserver,\n        installIdleObserver = _f === void 0 ? function (conn, observer) {} : _f,\n        _g = _b.removeIdleObserver,\n        removeIdleObserver = _g === void 0 ? function (conn) {} : _g,\n        _h = _b.config,\n        config = _h === void 0 ? pool_config_1.default.defaultConfig() : _h,\n        _j = _b.log,\n        log = _j === void 0 ? Logger.noOp() : _j;\n\n    this._create = create;\n    this._destroy = destroy;\n    this._validate = validate;\n    this._installIdleObserver = installIdleObserver;\n    this._removeIdleObserver = removeIdleObserver;\n    this._maxSize = config.maxSize;\n    this._acquisitionTimeout = config.acquisitionTimeout;\n    this._pools = {};\n    this._pendingCreates = {};\n    this._acquireRequests = {};\n    this._activeResourceCounts = {};\n    this._poolState = {};\n    this._release = this._release.bind(this);\n    this._log = log;\n    this._closed = false;\n  }\n  /**\n   * Acquire and idle resource fom the pool or create a new one.\n   * @param {ServerAddress} address the address for which we're acquiring.\n   * @return {Object} resource that is ready to use.\n   */\n\n\n  Pool.prototype.acquire = function (address) {\n    var _this = this;\n\n    return this._acquire(address).then(function (resource) {\n      var key = address.asKey();\n\n      if (resource) {\n        // New or existing resource acquired\n        return resource;\n      } // We're out of resources and will try to acquire later on when an existing resource is released.\n\n\n      var allRequests = _this._acquireRequests;\n      var requests = allRequests[key];\n\n      if (!requests) {\n        allRequests[key] = [];\n      }\n\n      return new Promise(function (resolve, reject) {\n        var request;\n        var timeoutId = setTimeout(function () {\n          // acquisition timeout fired\n          // remove request from the queue of pending requests, if it's still there\n          // request might've been taken out by the release operation\n          var pendingRequests = allRequests[key];\n\n          if (pendingRequests) {\n            allRequests[key] = pendingRequests.filter(function (item) {\n              return item !== request;\n            });\n          }\n\n          if (request.isCompleted()) {// request already resolved/rejected by the release operation; nothing to do\n          } else {\n            // request is still pending and needs to be failed\n            var activeCount = _this.activeResourceCount(address);\n\n            var idleCount = _this.has(address) ? _this._pools[key].length : 0;\n            request.reject((0, neo4j_driver_core_1.newError)(\"Connection acquisition timed out in \" + _this._acquisitionTimeout + \" ms. Pool status: Active conn count = \" + activeCount + \", Idle conn count = \" + idleCount + \".\"));\n          }\n        }, _this._acquisitionTimeout);\n        request = new PendingRequest(key, resolve, reject, timeoutId, _this._log);\n        allRequests[key].push(request);\n      });\n    });\n  };\n  /**\n   * Destroy all idle resources for the given address.\n   * @param {ServerAddress} address the address of the server to purge its pool.\n   * @returns {Promise<void>} A promise that is resolved when the resources are purged\n   */\n\n\n  Pool.prototype.purge = function (address) {\n    return this._purgeKey(address.asKey());\n  };\n  /**\n   * Destroy all idle resources in this pool.\n   * @returns {Promise<void>} A promise that is resolved when the resources are purged\n   */\n\n\n  Pool.prototype.close = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this._closed = true;\n            return [4\n            /*yield*/\n            , Promise.all(Object.keys(this._pools).map(function (key) {\n              return _this._purgeKey(key);\n            }))];\n\n          case 1:\n            /**\n             * The lack of Promise consuming was making the driver do not close properly in the scenario\n             * captured at result.test.js:it('should handle missing onCompleted'). The test was timing out\n             * because while wainting for the driver close.\n             *\n             * Consuming the Promise.all or by calling then or by awaiting in the result inside this method solved\n             * the issue somehow.\n             *\n             * PS: the return of this method was already awaited at PooledConnectionProvider.close, but the await bellow\n             * seems to be need also.\n             */\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /**\n   * Keep the idle resources for the provided addresses and purge the rest.\n   * @returns {Promise<void>} A promise that is resolved when the other resources are purged\n   */\n\n\n  Pool.prototype.keepAll = function (addresses) {\n    var _this = this;\n\n    var keysToKeep = addresses.map(function (a) {\n      return a.asKey();\n    });\n    var keysPresent = Object.keys(this._pools);\n    var keysToPurge = keysPresent.filter(function (k) {\n      return keysToKeep.indexOf(k) === -1;\n    });\n    return Promise.all(keysToPurge.map(function (key) {\n      return _this._purgeKey(key);\n    }));\n  };\n  /**\n   * Check if this pool contains resources for the given address.\n   * @param {ServerAddress} address the address of the server to check.\n   * @return {boolean} `true` when pool contains entries for the given key, <code>false</code> otherwise.\n   */\n\n\n  Pool.prototype.has = function (address) {\n    return address.asKey() in this._pools;\n  };\n  /**\n   * Get count of active (checked out of the pool) resources for the given key.\n   * @param {ServerAddress} address the address of the server to check.\n   * @return {number} count of resources acquired by clients.\n   */\n\n\n  Pool.prototype.activeResourceCount = function (address) {\n    return this._activeResourceCounts[address.asKey()] || 0;\n  };\n\n  Pool.prototype._acquire = function (address) {\n    return __awaiter(this, void 0, void 0, function () {\n      var key, pool, poolState, resource_1, numConnections, resource;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this._closed) {\n              throw (0, neo4j_driver_core_1.newError)('Pool is closed, it is no more able to serve requests.');\n            }\n\n            key = address.asKey();\n            pool = this._pools[key];\n            poolState = this._poolState[key];\n\n            if (!pool) {\n              pool = [];\n              poolState = new PoolState();\n              this._pools[key] = pool;\n              this._pendingCreates[key] = 0;\n              this._poolState[key] = poolState;\n            }\n\n            _a.label = 1;\n\n          case 1:\n            if (!pool.length) return [3\n            /*break*/\n            , 5];\n            resource_1 = pool.pop();\n            if (!this._validate(resource_1)) return [3\n            /*break*/\n            , 2];\n\n            if (this._removeIdleObserver) {\n              this._removeIdleObserver(resource_1);\n            } // idle resource is valid and can be acquired\n\n\n            resourceAcquired(key, this._activeResourceCounts);\n\n            if (this._log.isDebugEnabled()) {\n              this._log.debug(resource_1 + \" acquired from the pool \" + key);\n            }\n\n            return [2\n            /*return*/\n            , resource_1];\n\n          case 2:\n            return [4\n            /*yield*/\n            , this._destroy(resource_1)];\n\n          case 3:\n            _a.sent();\n\n            _a.label = 4;\n\n          case 4:\n            return [3\n            /*break*/\n            , 1];\n\n          case 5:\n            // Ensure requested max pool size\n            if (this._maxSize > 0) {\n              numConnections = this.activeResourceCount(address) + this._pendingCreates[key];\n\n              if (numConnections >= this._maxSize) {\n                // Will put this request in queue instead since the pool is full\n                return [2\n                /*return*/\n                , null];\n              }\n            } // there exist no idle valid resources, create a new one for acquisition\n            // Keep track of how many pending creates there are to avoid making too many connections.\n\n\n            this._pendingCreates[key] = this._pendingCreates[key] + 1;\n            _a.label = 6;\n\n          case 6:\n            _a.trys.push([6,, 8, 9]);\n\n            return [4\n            /*yield*/\n            , this._create(address, function (address, resource) {\n              return _this._release(poolState, address, resource);\n            })];\n\n          case 7:\n            // Invoke callback that creates actual connection\n            resource = _a.sent();\n            resourceAcquired(key, this._activeResourceCounts);\n\n            if (this._log.isDebugEnabled()) {\n              this._log.debug(resource + \" created for the pool \" + key);\n            }\n\n            return [3\n            /*break*/\n            , 9];\n\n          case 8:\n            this._pendingCreates[key] = this._pendingCreates[key] - 1;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 9:\n            return [2\n            /*return*/\n            , resource];\n        }\n      });\n    });\n  };\n\n  Pool.prototype._release = function (poolState, address, resource) {\n    return __awaiter(this, void 0, void 0, function () {\n      var key, pool;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            key = address.asKey();\n            pool = this._pools[key];\n            if (!(pool && poolState && poolState.isActive())) return [3\n            /*break*/\n            , 4];\n            if (!!this._validate(resource)) return [3\n            /*break*/\n            , 2];\n\n            if (this._log.isDebugEnabled()) {\n              this._log.debug(resource + \" destroyed and can't be released to the pool \" + key + \" because it is not functional\");\n            }\n\n            return [4\n            /*yield*/\n            , this._destroy(resource)];\n\n          case 1:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            if (this._installIdleObserver) {\n              this._installIdleObserver(resource, {\n                onError: function (error) {\n                  _this._log.debug(\"Idle connection \" + resource + \" destroyed because of error: \" + error);\n\n                  var pool = _this._pools[key];\n\n                  if (pool) {\n                    _this._pools[key] = pool.filter(function (r) {\n                      return r !== resource;\n                    });\n                  } // let's not care about background clean-ups due to errors but just trigger the destroy\n                  // process for the resource, we especially catch any errors and ignore them to avoid\n                  // unhandled promise rejection warnings\n\n\n                  _this._destroy(resource).catch(function () {});\n                }\n              });\n            }\n\n            pool.push(resource);\n\n            if (this._log.isDebugEnabled()) {\n              this._log.debug(resource + \" released to the pool \" + key);\n            }\n\n            _a.label = 3;\n\n          case 3:\n            return [3\n            /*break*/\n            , 6];\n\n          case 4:\n            // key has been purged, don't put it back, just destroy the resource\n            if (this._log.isDebugEnabled()) {\n              this._log.debug(resource + \" destroyed and can't be released to the pool \" + key + \" because pool has been purged\");\n            }\n\n            return [4\n            /*yield*/\n            , this._destroy(resource)];\n\n          case 5:\n            _a.sent();\n\n            _a.label = 6;\n\n          case 6:\n            resourceReleased(key, this._activeResourceCounts);\n\n            this._processPendingAcquireRequests(address);\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  Pool.prototype._purgeKey = function (key) {\n    return __awaiter(this, void 0, void 0, function () {\n      var pool, poolState, resource;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            pool = this._pools[key] || [];\n            poolState = this._poolState[key] || new PoolState();\n            _a.label = 1;\n\n          case 1:\n            if (!pool.length) return [3\n            /*break*/\n            , 3];\n            resource = pool.pop();\n\n            if (this._removeIdleObserver) {\n              this._removeIdleObserver(resource);\n            }\n\n            return [4\n            /*yield*/\n            , this._destroy(resource)];\n\n          case 2:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 1];\n\n          case 3:\n            poolState.close();\n            delete this._pools[key];\n            delete this._poolState[key];\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  Pool.prototype._processPendingAcquireRequests = function (address) {\n    var _this = this;\n\n    var key = address.asKey();\n    var requests = this._acquireRequests[key];\n    var poolState = this._poolState[key];\n\n    if (requests) {\n      var pendingRequest_1 = requests.shift(); // pop a pending acquire request\n\n      if (pendingRequest_1) {\n        this._acquire(address).catch(function (error) {\n          // failed to acquire/create a new connection to resolve the pending acquire request\n          // propagate the error by failing the pending request\n          pendingRequest_1.reject(error);\n          return null;\n        }).then(function (resource) {\n          if (resource) {\n            // managed to acquire a valid resource from the pool\n            if (pendingRequest_1.isCompleted()) {\n              // request has been completed, most likely failed by a timeout\n              // return the acquired resource back to the pool\n              _this._release(poolState, address, resource);\n            } else {\n              // request is still pending and can be resolved with the newly acquired resource\n              pendingRequest_1.resolve(resource); // resolve the pending request with the acquired resource\n            }\n          }\n        });\n      } else {\n        delete this._acquireRequests[key];\n      }\n    }\n  };\n\n  return Pool;\n}();\n/**\n * Increment active (checked out of the pool) resource counter.\n * @param {string} key the resource group identifier (server address for connections).\n * @param {Object.<string, number>} activeResourceCounts the object holding active counts per key.\n */\n\n\nfunction resourceAcquired(key, activeResourceCounts) {\n  var currentCount = activeResourceCounts[key] || 0;\n  activeResourceCounts[key] = currentCount + 1;\n}\n/**\n * Decrement active (checked out of the pool) resource counter.\n * @param {string} key the resource group identifier (server address for connections).\n * @param {Object.<string, number>} activeResourceCounts the object holding active counts per key.\n */\n\n\nfunction resourceReleased(key, activeResourceCounts) {\n  var currentCount = activeResourceCounts[key] || 0;\n  var nextCount = currentCount - 1;\n\n  if (nextCount > 0) {\n    activeResourceCounts[key] = nextCount;\n  } else {\n    delete activeResourceCounts[key];\n  }\n}\n\nvar PendingRequest =\n/** @class */\nfunction () {\n  function PendingRequest(key, resolve, reject, timeoutId, log) {\n    this._key = key;\n    this._resolve = resolve;\n    this._reject = reject;\n    this._timeoutId = timeoutId;\n    this._log = log;\n    this._completed = false;\n  }\n\n  PendingRequest.prototype.isCompleted = function () {\n    return this._completed;\n  };\n\n  PendingRequest.prototype.resolve = function (resource) {\n    if (this._completed) {\n      return;\n    }\n\n    this._completed = true;\n    clearTimeout(this._timeoutId);\n\n    if (this._log.isDebugEnabled()) {\n      this._log.debug(resource + \" acquired from the pool \" + this._key);\n    }\n\n    this._resolve(resource);\n  };\n\n  PendingRequest.prototype.reject = function (error) {\n    if (this._completed) {\n      return;\n    }\n\n    this._completed = true;\n    clearTimeout(this._timeoutId);\n\n    this._reject(error);\n  };\n\n  return PendingRequest;\n}();\n\nvar PoolState =\n/** @class */\nfunction () {\n  function PoolState() {\n    this._active = true;\n  }\n\n  PoolState.prototype.isActive = function () {\n    return this._active;\n  };\n\n  PoolState.prototype.close = function () {\n    this._active = false;\n  };\n\n  return PoolState;\n}();\n\nexports.default = Pool;","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","__generator","body","_","label","sent","t","trys","ops","f","y","g","verb","Symbol","iterator","n","v","op","TypeError","call","pop","length","push","__importDefault","mod","__esModule","Object","defineProperty","exports","pool_config_1","require","neo4j_driver_core_1","Logger","internal","logger","Pool","_a","_b","_c","create","address","release","_d","destroy","conn","_e","validate","_f","installIdleObserver","observer","_g","removeIdleObserver","_h","config","default","defaultConfig","_j","log","noOp","_create","_destroy","_validate","_installIdleObserver","_removeIdleObserver","_maxSize","maxSize","_acquisitionTimeout","acquisitionTimeout","_pools","_pendingCreates","_acquireRequests","_activeResourceCounts","_poolState","_release","bind","_log","_closed","prototype","acquire","_this","_acquire","resource","key","asKey","allRequests","requests","request","timeoutId","setTimeout","pendingRequests","filter","item","isCompleted","activeCount","activeResourceCount","idleCount","has","newError","PendingRequest","purge","_purgeKey","close","all","keys","map","keepAll","addresses","keysToKeep","a","keysPresent","keysToPurge","k","indexOf","pool","poolState","resource_1","numConnections","PoolState","resourceAcquired","isDebugEnabled","debug","isActive","onError","error","r","catch","resourceReleased","_processPendingAcquireRequests","pendingRequest_1","shift","activeResourceCounts","currentCount","nextCount","_key","_resolve","_reject","_timeoutId","_completed","clearTimeout","_active"],"sources":["/Users/zack/src/gene-graph-MUSC/node_modules/neo4j-driver-bolt-connection/lib/pool/pool.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar pool_config_1 = __importDefault(require(\"./pool-config\"));\nvar neo4j_driver_core_1 = require(\"neo4j-driver-core\");\nvar Logger = neo4j_driver_core_1.internal.logger.Logger;\nvar Pool = /** @class */ (function () {\n    /**\n     * @param {function(address: ServerAddress, function(address: ServerAddress, resource: object): Promise<object>): Promise<object>} create\n     *                an allocation function that creates a promise with a new resource. It's given an address for which to\n     *                allocate the connection and a function that will return the resource to the pool if invoked, which is\n     *                meant to be called on .dispose or .close or whatever mechanism the resource uses to finalize.\n     * @param {function(resource: object): Promise<void>} destroy\n     *                called with the resource when it is evicted from this pool\n     * @param {function(resource: object): boolean} validate\n     *                called at various times (like when an instance is acquired and when it is returned.\n     *                If this returns false, the resource will be evicted\n     * @param {function(resource: object, observer: { onError }): void} installIdleObserver\n     *                called when the resource is released back to pool\n     * @param {function(resource: object): void} removeIdleObserver\n     *                called when the resource is acquired from the pool\n     * @param {PoolConfig} config configuration for the new driver.\n     * @param {Logger} log the driver logger.\n     */\n    function Pool(_a) {\n        var _b = _a === void 0 ? {} : _a, _c = _b.create, create = _c === void 0 ? function (address, release) { return Promise.resolve(); } : _c, _d = _b.destroy, destroy = _d === void 0 ? function (conn) { return Promise.resolve(); } : _d, _e = _b.validate, validate = _e === void 0 ? function (conn) { return true; } : _e, _f = _b.installIdleObserver, installIdleObserver = _f === void 0 ? function (conn, observer) { } : _f, _g = _b.removeIdleObserver, removeIdleObserver = _g === void 0 ? function (conn) { } : _g, _h = _b.config, config = _h === void 0 ? pool_config_1.default.defaultConfig() : _h, _j = _b.log, log = _j === void 0 ? Logger.noOp() : _j;\n        this._create = create;\n        this._destroy = destroy;\n        this._validate = validate;\n        this._installIdleObserver = installIdleObserver;\n        this._removeIdleObserver = removeIdleObserver;\n        this._maxSize = config.maxSize;\n        this._acquisitionTimeout = config.acquisitionTimeout;\n        this._pools = {};\n        this._pendingCreates = {};\n        this._acquireRequests = {};\n        this._activeResourceCounts = {};\n        this._poolState = {};\n        this._release = this._release.bind(this);\n        this._log = log;\n        this._closed = false;\n    }\n    /**\n     * Acquire and idle resource fom the pool or create a new one.\n     * @param {ServerAddress} address the address for which we're acquiring.\n     * @return {Object} resource that is ready to use.\n     */\n    Pool.prototype.acquire = function (address) {\n        var _this = this;\n        return this._acquire(address).then(function (resource) {\n            var key = address.asKey();\n            if (resource) {\n                // New or existing resource acquired\n                return resource;\n            }\n            // We're out of resources and will try to acquire later on when an existing resource is released.\n            var allRequests = _this._acquireRequests;\n            var requests = allRequests[key];\n            if (!requests) {\n                allRequests[key] = [];\n            }\n            return new Promise(function (resolve, reject) {\n                var request;\n                var timeoutId = setTimeout(function () {\n                    // acquisition timeout fired\n                    // remove request from the queue of pending requests, if it's still there\n                    // request might've been taken out by the release operation\n                    var pendingRequests = allRequests[key];\n                    if (pendingRequests) {\n                        allRequests[key] = pendingRequests.filter(function (item) { return item !== request; });\n                    }\n                    if (request.isCompleted()) {\n                        // request already resolved/rejected by the release operation; nothing to do\n                    }\n                    else {\n                        // request is still pending and needs to be failed\n                        var activeCount = _this.activeResourceCount(address);\n                        var idleCount = _this.has(address) ? _this._pools[key].length : 0;\n                        request.reject((0, neo4j_driver_core_1.newError)(\"Connection acquisition timed out in \" + _this._acquisitionTimeout + \" ms. Pool status: Active conn count = \" + activeCount + \", Idle conn count = \" + idleCount + \".\"));\n                    }\n                }, _this._acquisitionTimeout);\n                request = new PendingRequest(key, resolve, reject, timeoutId, _this._log);\n                allRequests[key].push(request);\n            });\n        });\n    };\n    /**\n     * Destroy all idle resources for the given address.\n     * @param {ServerAddress} address the address of the server to purge its pool.\n     * @returns {Promise<void>} A promise that is resolved when the resources are purged\n     */\n    Pool.prototype.purge = function (address) {\n        return this._purgeKey(address.asKey());\n    };\n    /**\n     * Destroy all idle resources in this pool.\n     * @returns {Promise<void>} A promise that is resolved when the resources are purged\n     */\n    Pool.prototype.close = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        this._closed = true;\n                        return [4 /*yield*/, Promise.all(Object.keys(this._pools).map(function (key) { return _this._purgeKey(key); }))];\n                    case 1: \n                    /**\n                     * The lack of Promise consuming was making the driver do not close properly in the scenario\n                     * captured at result.test.js:it('should handle missing onCompleted'). The test was timing out\n                     * because while wainting for the driver close.\n                     *\n                     * Consuming the Promise.all or by calling then or by awaiting in the result inside this method solved\n                     * the issue somehow.\n                     *\n                     * PS: the return of this method was already awaited at PooledConnectionProvider.close, but the await bellow\n                     * seems to be need also.\n                     */\n                    return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    /**\n     * Keep the idle resources for the provided addresses and purge the rest.\n     * @returns {Promise<void>} A promise that is resolved when the other resources are purged\n     */\n    Pool.prototype.keepAll = function (addresses) {\n        var _this = this;\n        var keysToKeep = addresses.map(function (a) { return a.asKey(); });\n        var keysPresent = Object.keys(this._pools);\n        var keysToPurge = keysPresent.filter(function (k) { return keysToKeep.indexOf(k) === -1; });\n        return Promise.all(keysToPurge.map(function (key) { return _this._purgeKey(key); }));\n    };\n    /**\n     * Check if this pool contains resources for the given address.\n     * @param {ServerAddress} address the address of the server to check.\n     * @return {boolean} `true` when pool contains entries for the given key, <code>false</code> otherwise.\n     */\n    Pool.prototype.has = function (address) {\n        return address.asKey() in this._pools;\n    };\n    /**\n     * Get count of active (checked out of the pool) resources for the given key.\n     * @param {ServerAddress} address the address of the server to check.\n     * @return {number} count of resources acquired by clients.\n     */\n    Pool.prototype.activeResourceCount = function (address) {\n        return this._activeResourceCounts[address.asKey()] || 0;\n    };\n    Pool.prototype._acquire = function (address) {\n        return __awaiter(this, void 0, void 0, function () {\n            var key, pool, poolState, resource_1, numConnections, resource;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (this._closed) {\n                            throw (0, neo4j_driver_core_1.newError)('Pool is closed, it is no more able to serve requests.');\n                        }\n                        key = address.asKey();\n                        pool = this._pools[key];\n                        poolState = this._poolState[key];\n                        if (!pool) {\n                            pool = [];\n                            poolState = new PoolState();\n                            this._pools[key] = pool;\n                            this._pendingCreates[key] = 0;\n                            this._poolState[key] = poolState;\n                        }\n                        _a.label = 1;\n                    case 1:\n                        if (!pool.length) return [3 /*break*/, 5];\n                        resource_1 = pool.pop();\n                        if (!this._validate(resource_1)) return [3 /*break*/, 2];\n                        if (this._removeIdleObserver) {\n                            this._removeIdleObserver(resource_1);\n                        }\n                        // idle resource is valid and can be acquired\n                        resourceAcquired(key, this._activeResourceCounts);\n                        if (this._log.isDebugEnabled()) {\n                            this._log.debug(resource_1 + \" acquired from the pool \" + key);\n                        }\n                        return [2 /*return*/, resource_1];\n                    case 2: return [4 /*yield*/, this._destroy(resource_1)];\n                    case 3:\n                        _a.sent();\n                        _a.label = 4;\n                    case 4: return [3 /*break*/, 1];\n                    case 5:\n                        // Ensure requested max pool size\n                        if (this._maxSize > 0) {\n                            numConnections = this.activeResourceCount(address) + this._pendingCreates[key];\n                            if (numConnections >= this._maxSize) {\n                                // Will put this request in queue instead since the pool is full\n                                return [2 /*return*/, null];\n                            }\n                        }\n                        // there exist no idle valid resources, create a new one for acquisition\n                        // Keep track of how many pending creates there are to avoid making too many connections.\n                        this._pendingCreates[key] = this._pendingCreates[key] + 1;\n                        _a.label = 6;\n                    case 6:\n                        _a.trys.push([6, , 8, 9]);\n                        return [4 /*yield*/, this._create(address, function (address, resource) { return _this._release(poolState, address, resource); })];\n                    case 7:\n                        // Invoke callback that creates actual connection\n                        resource = _a.sent();\n                        resourceAcquired(key, this._activeResourceCounts);\n                        if (this._log.isDebugEnabled()) {\n                            this._log.debug(resource + \" created for the pool \" + key);\n                        }\n                        return [3 /*break*/, 9];\n                    case 8:\n                        this._pendingCreates[key] = this._pendingCreates[key] - 1;\n                        return [7 /*endfinally*/];\n                    case 9: return [2 /*return*/, resource];\n                }\n            });\n        });\n    };\n    Pool.prototype._release = function (poolState, address, resource) {\n        return __awaiter(this, void 0, void 0, function () {\n            var key, pool;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        key = address.asKey();\n                        pool = this._pools[key];\n                        if (!(pool && poolState && poolState.isActive())) return [3 /*break*/, 4];\n                        if (!!this._validate(resource)) return [3 /*break*/, 2];\n                        if (this._log.isDebugEnabled()) {\n                            this._log.debug(resource + \" destroyed and can't be released to the pool \" + key + \" because it is not functional\");\n                        }\n                        return [4 /*yield*/, this._destroy(resource)];\n                    case 1:\n                        _a.sent();\n                        return [3 /*break*/, 3];\n                    case 2:\n                        if (this._installIdleObserver) {\n                            this._installIdleObserver(resource, {\n                                onError: function (error) {\n                                    _this._log.debug(\"Idle connection \" + resource + \" destroyed because of error: \" + error);\n                                    var pool = _this._pools[key];\n                                    if (pool) {\n                                        _this._pools[key] = pool.filter(function (r) { return r !== resource; });\n                                    }\n                                    // let's not care about background clean-ups due to errors but just trigger the destroy\n                                    // process for the resource, we especially catch any errors and ignore them to avoid\n                                    // unhandled promise rejection warnings\n                                    _this._destroy(resource).catch(function () { });\n                                }\n                            });\n                        }\n                        pool.push(resource);\n                        if (this._log.isDebugEnabled()) {\n                            this._log.debug(resource + \" released to the pool \" + key);\n                        }\n                        _a.label = 3;\n                    case 3: return [3 /*break*/, 6];\n                    case 4:\n                        // key has been purged, don't put it back, just destroy the resource\n                        if (this._log.isDebugEnabled()) {\n                            this._log.debug(resource + \" destroyed and can't be released to the pool \" + key + \" because pool has been purged\");\n                        }\n                        return [4 /*yield*/, this._destroy(resource)];\n                    case 5:\n                        _a.sent();\n                        _a.label = 6;\n                    case 6:\n                        resourceReleased(key, this._activeResourceCounts);\n                        this._processPendingAcquireRequests(address);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    Pool.prototype._purgeKey = function (key) {\n        return __awaiter(this, void 0, void 0, function () {\n            var pool, poolState, resource;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        pool = this._pools[key] || [];\n                        poolState = this._poolState[key] || new PoolState();\n                        _a.label = 1;\n                    case 1:\n                        if (!pool.length) return [3 /*break*/, 3];\n                        resource = pool.pop();\n                        if (this._removeIdleObserver) {\n                            this._removeIdleObserver(resource);\n                        }\n                        return [4 /*yield*/, this._destroy(resource)];\n                    case 2:\n                        _a.sent();\n                        return [3 /*break*/, 1];\n                    case 3:\n                        poolState.close();\n                        delete this._pools[key];\n                        delete this._poolState[key];\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    Pool.prototype._processPendingAcquireRequests = function (address) {\n        var _this = this;\n        var key = address.asKey();\n        var requests = this._acquireRequests[key];\n        var poolState = this._poolState[key];\n        if (requests) {\n            var pendingRequest_1 = requests.shift(); // pop a pending acquire request\n            if (pendingRequest_1) {\n                this._acquire(address)\n                    .catch(function (error) {\n                    // failed to acquire/create a new connection to resolve the pending acquire request\n                    // propagate the error by failing the pending request\n                    pendingRequest_1.reject(error);\n                    return null;\n                })\n                    .then(function (resource) {\n                    if (resource) {\n                        // managed to acquire a valid resource from the pool\n                        if (pendingRequest_1.isCompleted()) {\n                            // request has been completed, most likely failed by a timeout\n                            // return the acquired resource back to the pool\n                            _this._release(poolState, address, resource);\n                        }\n                        else {\n                            // request is still pending and can be resolved with the newly acquired resource\n                            pendingRequest_1.resolve(resource); // resolve the pending request with the acquired resource\n                        }\n                    }\n                });\n            }\n            else {\n                delete this._acquireRequests[key];\n            }\n        }\n    };\n    return Pool;\n}());\n/**\n * Increment active (checked out of the pool) resource counter.\n * @param {string} key the resource group identifier (server address for connections).\n * @param {Object.<string, number>} activeResourceCounts the object holding active counts per key.\n */\nfunction resourceAcquired(key, activeResourceCounts) {\n    var currentCount = activeResourceCounts[key] || 0;\n    activeResourceCounts[key] = currentCount + 1;\n}\n/**\n * Decrement active (checked out of the pool) resource counter.\n * @param {string} key the resource group identifier (server address for connections).\n * @param {Object.<string, number>} activeResourceCounts the object holding active counts per key.\n */\nfunction resourceReleased(key, activeResourceCounts) {\n    var currentCount = activeResourceCounts[key] || 0;\n    var nextCount = currentCount - 1;\n    if (nextCount > 0) {\n        activeResourceCounts[key] = nextCount;\n    }\n    else {\n        delete activeResourceCounts[key];\n    }\n}\nvar PendingRequest = /** @class */ (function () {\n    function PendingRequest(key, resolve, reject, timeoutId, log) {\n        this._key = key;\n        this._resolve = resolve;\n        this._reject = reject;\n        this._timeoutId = timeoutId;\n        this._log = log;\n        this._completed = false;\n    }\n    PendingRequest.prototype.isCompleted = function () {\n        return this._completed;\n    };\n    PendingRequest.prototype.resolve = function (resource) {\n        if (this._completed) {\n            return;\n        }\n        this._completed = true;\n        clearTimeout(this._timeoutId);\n        if (this._log.isDebugEnabled()) {\n            this._log.debug(resource + \" acquired from the pool \" + this._key);\n        }\n        this._resolve(resource);\n    };\n    PendingRequest.prototype.reject = function (error) {\n        if (this._completed) {\n            return;\n        }\n        this._completed = true;\n        clearTimeout(this._timeoutId);\n        this._reject(error);\n    };\n    return PendingRequest;\n}());\nvar PoolState = /** @class */ (function () {\n    function PoolState() {\n        this._active = true;\n    }\n    PoolState.prototype.isActive = function () {\n        return this._active;\n    };\n    PoolState.prototype.close = function () {\n        this._active = false;\n    };\n    return PoolState;\n}());\nexports.default = Pool;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}