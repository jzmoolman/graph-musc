{"ast":null,"code":"\"use strict\";\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Connection =\n/** @class */\nfunction () {\n  /**\n   * @param {ConnectionErrorHandler} errorHandler the error handler\n   */\n  function Connection(errorHandler) {\n    this._errorHandler = errorHandler;\n  }\n\n  Object.defineProperty(Connection.prototype, \"id\", {\n    get: function () {\n      throw new Error('not implemented');\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Connection.prototype, \"databaseId\", {\n    get: function () {\n      throw new Error('not implemented');\n    },\n    set: function (value) {\n      throw new Error('not implemented');\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * @returns {boolean} whether this connection is in a working condition\n   */\n\n  Connection.prototype.isOpen = function () {\n    throw new Error('not implemented');\n  };\n  /**\n   * @returns {BoltProtocol} the underlying bolt protocol assigned to this connection\n   */\n\n\n  Connection.prototype.protocol = function () {\n    throw new Error('not implemented');\n  };\n\n  Object.defineProperty(Connection.prototype, \"address\", {\n    /**\n     * @returns {ServerAddress} the server address this connection is opened against\n     */\n    get: function () {\n      throw new Error('not implemented');\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Connection.prototype, \"version\", {\n    /**\n     * @returns {ServerVersion} the version of the server this connection is connected to\n     */\n    get: function () {\n      throw new Error('not implemented');\n    },\n    set: function (value) {\n      throw new Error('not implemented');\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Connection.prototype, \"server\", {\n    get: function () {\n      throw new Error('not implemented');\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Connect to the target address, negotiate Bolt protocol and send initialization message.\n   * @param {string} userAgent the user agent for this driver.\n   * @param {Object} authToken the object containing auth information.\n   * @return {Promise<Connection>} promise resolved with the current connection if connection is successful. Rejected promise otherwise.\n   */\n\n  Connection.prototype.connect = function (userAgent, authToken) {\n    throw new Error('not implemented');\n  };\n  /**\n   * Write a message to the network channel.\n   * @param {RequestMessage} message the message to write.\n   * @param {ResultStreamObserver} observer the response observer.\n   * @param {boolean} flush `true` if flush should happen after the message is written to the buffer.\n   */\n\n\n  Connection.prototype.write = function (message, observer, flush) {\n    throw new Error('not implemented');\n  };\n  /**\n   * Send a RESET-message to the database. Message is immediately flushed to the network.\n   * @return {Promise<void>} promise resolved when SUCCESS-message response arrives, or failed when other response messages arrives.\n   */\n\n\n  Connection.prototype.resetAndFlush = function () {\n    throw new Error('not implemented');\n  };\n  /**\n   * Call close on the channel.\n   * @returns {Promise<void>} - A promise that will be resolved when the connection is closed.\n   *\n   */\n\n\n  Connection.prototype.close = function () {\n    throw new Error('not implemented');\n  };\n  /**\n   *\n   * @param error\n   * @param address\n   * @returns {Neo4jError|*}\n   */\n\n\n  Connection.prototype.handleAndTransformError = function (error, address) {\n    if (this._errorHandler) {\n      return this._errorHandler.handleAndTransformError(error, address);\n    }\n\n    return error;\n  };\n\n  return Connection;\n}();\n\nexports.default = Connection;","map":{"version":3,"names":["Object","defineProperty","exports","value","Connection","errorHandler","_errorHandler","prototype","get","Error","enumerable","configurable","set","isOpen","protocol","connect","userAgent","authToken","write","message","observer","flush","resetAndFlush","close","handleAndTransformError","error","address","default"],"sources":["/Users/zack/src/_-MUSC/gene-graph-MUSC/node_modules/neo4j-driver-bolt-connection/lib/connection/connection.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Connection = /** @class */ (function () {\n    /**\n     * @param {ConnectionErrorHandler} errorHandler the error handler\n     */\n    function Connection(errorHandler) {\n        this._errorHandler = errorHandler;\n    }\n    Object.defineProperty(Connection.prototype, \"id\", {\n        get: function () {\n            throw new Error('not implemented');\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Connection.prototype, \"databaseId\", {\n        get: function () {\n            throw new Error('not implemented');\n        },\n        set: function (value) {\n            throw new Error('not implemented');\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * @returns {boolean} whether this connection is in a working condition\n     */\n    Connection.prototype.isOpen = function () {\n        throw new Error('not implemented');\n    };\n    /**\n     * @returns {BoltProtocol} the underlying bolt protocol assigned to this connection\n     */\n    Connection.prototype.protocol = function () {\n        throw new Error('not implemented');\n    };\n    Object.defineProperty(Connection.prototype, \"address\", {\n        /**\n         * @returns {ServerAddress} the server address this connection is opened against\n         */\n        get: function () {\n            throw new Error('not implemented');\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Connection.prototype, \"version\", {\n        /**\n         * @returns {ServerVersion} the version of the server this connection is connected to\n         */\n        get: function () {\n            throw new Error('not implemented');\n        },\n        set: function (value) {\n            throw new Error('not implemented');\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Connection.prototype, \"server\", {\n        get: function () {\n            throw new Error('not implemented');\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Connect to the target address, negotiate Bolt protocol and send initialization message.\n     * @param {string} userAgent the user agent for this driver.\n     * @param {Object} authToken the object containing auth information.\n     * @return {Promise<Connection>} promise resolved with the current connection if connection is successful. Rejected promise otherwise.\n     */\n    Connection.prototype.connect = function (userAgent, authToken) {\n        throw new Error('not implemented');\n    };\n    /**\n     * Write a message to the network channel.\n     * @param {RequestMessage} message the message to write.\n     * @param {ResultStreamObserver} observer the response observer.\n     * @param {boolean} flush `true` if flush should happen after the message is written to the buffer.\n     */\n    Connection.prototype.write = function (message, observer, flush) {\n        throw new Error('not implemented');\n    };\n    /**\n     * Send a RESET-message to the database. Message is immediately flushed to the network.\n     * @return {Promise<void>} promise resolved when SUCCESS-message response arrives, or failed when other response messages arrives.\n     */\n    Connection.prototype.resetAndFlush = function () {\n        throw new Error('not implemented');\n    };\n    /**\n     * Call close on the channel.\n     * @returns {Promise<void>} - A promise that will be resolved when the connection is closed.\n     *\n     */\n    Connection.prototype.close = function () {\n        throw new Error('not implemented');\n    };\n    /**\n     *\n     * @param error\n     * @param address\n     * @returns {Neo4jError|*}\n     */\n    Connection.prototype.handleAndTransformError = function (error, address) {\n        if (this._errorHandler) {\n            return this._errorHandler.handleAndTransformError(error, address);\n        }\n        return error;\n    };\n    return Connection;\n}());\nexports.default = Connection;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}