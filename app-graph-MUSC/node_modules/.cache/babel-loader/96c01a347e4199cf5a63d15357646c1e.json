{"ast":null,"code":"var _jsxFileName = \"/Users/zack/src/gene3/src/components/GeneDropdown.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useReadCypher } from \"use-neo4j\";\nimport { Dropdown } from './Dropdown';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GeneDropdown = () => {\n  return /*#__PURE__*/_jsxDEV(Dropdown, {\n    label: \"Genes\",\n    data: []\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 9\n  }, this);\n};\n_c = GeneDropdown;\nexport const GeneSelector = _ref => {\n  _s();\n\n  let {\n    onChange\n  } = _ref;\n\n  const onChangeDropDown = data => {\n    console.log('enter - onChange.Dropdown ');\n    const selectedGenes = data.value.map(value => {\n      return {\n        text: value,\n        value: value\n      };\n    });\n    onChange(selectedGenes);\n    console.log('exit - onChnage.Dropdown');\n  };\n\n  console.log('enter -  GeneSelector');\n  const {\n    loading,\n    error,\n    records\n  } = useReadCypher(`MATCH (g:MGene) RETURN DISTINCT g.name as name ORDER BY name`);\n\n  if (loading) {\n    console.log('loading genes - GeneSelector');\n    return /*#__PURE__*/_jsxDEV(Dropdown, {\n      placeholder: \"Loading genes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 18\n    }, this);\n  }\n\n  if (error) {\n    console.log(error.message);\n    return /*#__PURE__*/_jsxDEV(Dropdown, {\n      placeholder: \"Error loading genes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 18\n    }, this);\n  }\n\n  const genes = records === null || records === void 0 ? void 0 : records.map(row => {\n    return {\n      value: row.get('name'),\n      text: row.get('name')\n    };\n  });\n  console.log('exit - GeneSelector');\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Dropdown, {\n      placeholder: \"Select genes\",\n      options: genes,\n      multiple: true,\n      onChange: (e, data) => {\n        onChangeDropDown(data);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n};\n\n_s(GeneSelector, \"UevUCZ3iuEqipiWfECNFtczV+XM=\", false, function () {\n  return [useReadCypher];\n});\n\n_c2 = GeneSelector;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"GeneDropdown\");\n$RefreshReg$(_c2, \"GeneSelector\");","map":{"version":3,"names":["React","useReadCypher","Dropdown","GeneDropdown","GeneSelector","onChange","onChangeDropDown","data","console","log","selectedGenes","value","map","text","loading","error","records","message","genes","row","get","e"],"sources":["/Users/zack/src/gene3/src/components/GeneDropdown.tsx"],"sourcesContent":["import React from 'react'\nimport { useReadCypher  } from \"use-neo4j\";\nimport { Dropdown } from './Dropdown'\n\ntype GeneDropdown = {\n    onChange: (options: string[]) => void \n}\n\nexport const GeneDropdown = () => {\n    return (\n        <Dropdown label='Genes' data={[]}/>\n    )\n}\n\n\n\n    \n\n\nexport const GeneSelector = ({onChange}: GeneSelectorProps )  => {\n    \n\n    const onChangeDropDown = (data: DropdownProps) =>  {\n        console.log('enter - onChange.Dropdown ')\n        const selectedGenes = (data.value as string[]).map(value => { return {text: value ,value: value} })\n        onChange(selectedGenes)\n        console.log('exit - onChnage.Dropdown')        \n    }\n\n    console.log('enter -  GeneSelector')\n    const { loading, error, records} = useReadCypher(\n            `MATCH (g:MGene) RETURN DISTINCT g.name as name ORDER BY name`)\n\n    if ( loading ) { \n        console.log('loading genes - GeneSelector')\n        return ( <Dropdown placeholder='Loading genes'  /> )\n    }\n\n    if ( error ) {\n        console.log(error.message)\n        return ( <Dropdown placeholder='Error loading genes'  /> )\n    }\n\n    const genes = records?.map( row => {\n        return  {value: row.get('name'), text: row.get('name')}\n    })\n    console.log('exit - GeneSelector')\n\n    return (\n        <div>\n            <Dropdown placeholder='Select genes' options={genes} \n                multiple={true} \n                onChange={ (e,data)=>{ onChangeDropDown(data) } }\n            />\n       </div>\n    )\n}"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,QAA+B,WAA/B;AACA,SAASC,QAAT,QAAyB,YAAzB;;AAMA,OAAO,MAAMC,YAAY,GAAG,MAAM;EAC9B,oBACI,QAAC,QAAD;IAAU,KAAK,EAAC,OAAhB;IAAwB,IAAI,EAAE;EAA9B;IAAA;IAAA;IAAA;EAAA,QADJ;AAGH,CAJM;KAAMA,Y;AAWb,OAAO,MAAMC,YAAY,GAAG,QAAqC;EAAA;;EAAA,IAApC;IAACC;EAAD,CAAoC;;EAG7D,MAAMC,gBAAgB,GAAIC,IAAD,IAA0B;IAC/CC,OAAO,CAACC,GAAR,CAAY,4BAAZ;IACA,MAAMC,aAAa,GAAIH,IAAI,CAACI,KAAN,CAAyBC,GAAzB,CAA6BD,KAAK,IAAI;MAAE,OAAO;QAACE,IAAI,EAAEF,KAAP;QAAcA,KAAK,EAAEA;MAArB,CAAP;IAAoC,CAA5E,CAAtB;IACAN,QAAQ,CAACK,aAAD,CAAR;IACAF,OAAO,CAACC,GAAR,CAAY,0BAAZ;EACH,CALD;;EAOAD,OAAO,CAACC,GAAR,CAAY,uBAAZ;EACA,MAAM;IAAEK,OAAF;IAAWC,KAAX;IAAkBC;EAAlB,IAA6Bf,aAAa,CACvC,8DADuC,CAAhD;;EAGA,IAAKa,OAAL,EAAe;IACXN,OAAO,CAACC,GAAR,CAAY,8BAAZ;IACA,oBAAS,QAAC,QAAD;MAAU,WAAW,EAAC;IAAtB;MAAA;MAAA;MAAA;IAAA,QAAT;EACH;;EAED,IAAKM,KAAL,EAAa;IACTP,OAAO,CAACC,GAAR,CAAYM,KAAK,CAACE,OAAlB;IACA,oBAAS,QAAC,QAAD;MAAU,WAAW,EAAC;IAAtB;MAAA;MAAA;MAAA;IAAA,QAAT;EACH;;EAED,MAAMC,KAAK,GAAGF,OAAH,aAAGA,OAAH,uBAAGA,OAAO,CAAEJ,GAAT,CAAcO,GAAG,IAAI;IAC/B,OAAQ;MAACR,KAAK,EAAEQ,GAAG,CAACC,GAAJ,CAAQ,MAAR,CAAR;MAAyBP,IAAI,EAAEM,GAAG,CAACC,GAAJ,CAAQ,MAAR;IAA/B,CAAR;EACH,CAFa,CAAd;EAGAZ,OAAO,CAACC,GAAR,CAAY,qBAAZ;EAEA,oBACI;IAAA,uBACI,QAAC,QAAD;MAAU,WAAW,EAAC,cAAtB;MAAqC,OAAO,EAAES,KAA9C;MACI,QAAQ,EAAE,IADd;MAEI,QAAQ,EAAG,CAACG,CAAD,EAAGd,IAAH,KAAU;QAAED,gBAAgB,CAACC,IAAD,CAAhB;MAAwB;IAFnD;MAAA;MAAA;MAAA;IAAA;EADJ;IAAA;IAAA;IAAA;EAAA,QADJ;AAQH,CArCM;;GAAMH,Y;UAW0BH,a;;;MAX1BG,Y"},"metadata":{},"sourceType":"module"}