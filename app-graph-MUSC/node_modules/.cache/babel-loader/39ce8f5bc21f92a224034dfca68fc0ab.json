{"ast":null,"code":"\"use strict\";\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Inteface define a common way to acquire a connection\n *\n * @private\n */\n\nvar ConnectionProvider =\n/** @class */\nfunction () {\n  function ConnectionProvider() {}\n  /**\n   * This method acquires a connection against the specified database.\n   *\n   * Access mode and Bookmarks only applies to routing driver. Access mode only\n   * differentiates the target server for the connection, where WRITE selects a\n   * WRITER server, whereas READ selects a READ server. Bookmarks, when specified,\n   * is only passed to the routing discovery procedure, for the system database to\n   * synchronize on creation of databases and is never used in direct drivers.\n   *\n   * @param {object} param - object parameter\n   * @property {string} param.accessMode - the access mode for the to-be-acquired connection\n   * @property {string} param.database - the target database for the to-be-acquired connection\n   * @property {Bookmark} param.bookmarks - the bookmarks to send to routing discovery\n   * @property {string} param.impersonatedUser - the impersonated user\n   * @property {function (databaseName:string?)} param.onDatabaseNameResolved - Callback called when the database name get resolved\n   */\n\n\n  ConnectionProvider.prototype.acquireConnection = function (param) {\n    throw Error('Not implemented');\n  };\n  /**\n   * This method checks whether the backend database supports multi database functionality\n   * by checking protocol handshake result.\n   *\n   * @returns {Promise<boolean>}\n   */\n\n\n  ConnectionProvider.prototype.supportsMultiDb = function () {\n    throw Error('Not implemented');\n  };\n  /**\n   * This method checks whether the backend database supports transaction config functionality\n   * by checking protocol handshake result.\n   *\n   * @returns {Promise<boolean>}\n   */\n\n\n  ConnectionProvider.prototype.supportsTransactionConfig = function () {\n    throw Error('Not implemented');\n  };\n  /**\n   * This method checks whether the backend database supports transaction config functionality\n   * by checking protocol handshake result.\n   *\n   * @returns {Promise<boolean>}\n   */\n\n\n  ConnectionProvider.prototype.supportsUserImpersonation = function () {\n    throw Error('Not implemented');\n  };\n  /**\n   * Closes this connection provider along with its internals (connections, pools, etc.)\n   *\n   * @returns {Promise<void>}\n   */\n\n\n  ConnectionProvider.prototype.close = function () {\n    throw Error('Not implemented');\n  };\n\n  return ConnectionProvider;\n}();\n\nexports.default = ConnectionProvider;","map":{"version":3,"names":["Object","defineProperty","exports","value","ConnectionProvider","prototype","acquireConnection","param","Error","supportsMultiDb","supportsTransactionConfig","supportsUserImpersonation","close","default"],"sources":["/Users/zack/src/gene3/node_modules/neo4j-driver-core/lib/connection-provider.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Inteface define a common way to acquire a connection\n *\n * @private\n */\nvar ConnectionProvider = /** @class */ (function () {\n    function ConnectionProvider() {\n    }\n    /**\n     * This method acquires a connection against the specified database.\n     *\n     * Access mode and Bookmarks only applies to routing driver. Access mode only\n     * differentiates the target server for the connection, where WRITE selects a\n     * WRITER server, whereas READ selects a READ server. Bookmarks, when specified,\n     * is only passed to the routing discovery procedure, for the system database to\n     * synchronize on creation of databases and is never used in direct drivers.\n     *\n     * @param {object} param - object parameter\n     * @property {string} param.accessMode - the access mode for the to-be-acquired connection\n     * @property {string} param.database - the target database for the to-be-acquired connection\n     * @property {Bookmark} param.bookmarks - the bookmarks to send to routing discovery\n     * @property {string} param.impersonatedUser - the impersonated user\n     * @property {function (databaseName:string?)} param.onDatabaseNameResolved - Callback called when the database name get resolved\n     */\n    ConnectionProvider.prototype.acquireConnection = function (param) {\n        throw Error('Not implemented');\n    };\n    /**\n     * This method checks whether the backend database supports multi database functionality\n     * by checking protocol handshake result.\n     *\n     * @returns {Promise<boolean>}\n     */\n    ConnectionProvider.prototype.supportsMultiDb = function () {\n        throw Error('Not implemented');\n    };\n    /**\n     * This method checks whether the backend database supports transaction config functionality\n     * by checking protocol handshake result.\n     *\n     * @returns {Promise<boolean>}\n     */\n    ConnectionProvider.prototype.supportsTransactionConfig = function () {\n        throw Error('Not implemented');\n    };\n    /**\n     * This method checks whether the backend database supports transaction config functionality\n     * by checking protocol handshake result.\n     *\n     * @returns {Promise<boolean>}\n     */\n    ConnectionProvider.prototype.supportsUserImpersonation = function () {\n        throw Error('Not implemented');\n    };\n    /**\n     * Closes this connection provider along with its internals (connections, pools, etc.)\n     *\n     * @returns {Promise<void>}\n     */\n    ConnectionProvider.prototype.close = function () {\n        throw Error('Not implemented');\n    };\n    return ConnectionProvider;\n}());\nexports.default = ConnectionProvider;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,kBAAkB;AAAG;AAAe,YAAY;EAChD,SAASA,kBAAT,GAA8B,CAC7B;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIA,kBAAkB,CAACC,SAAnB,CAA6BC,iBAA7B,GAAiD,UAAUC,KAAV,EAAiB;IAC9D,MAAMC,KAAK,CAAC,iBAAD,CAAX;EACH,CAFD;EAGA;AACJ;AACA;AACA;AACA;AACA;;;EACIJ,kBAAkB,CAACC,SAAnB,CAA6BI,eAA7B,GAA+C,YAAY;IACvD,MAAMD,KAAK,CAAC,iBAAD,CAAX;EACH,CAFD;EAGA;AACJ;AACA;AACA;AACA;AACA;;;EACIJ,kBAAkB,CAACC,SAAnB,CAA6BK,yBAA7B,GAAyD,YAAY;IACjE,MAAMF,KAAK,CAAC,iBAAD,CAAX;EACH,CAFD;EAGA;AACJ;AACA;AACA;AACA;AACA;;;EACIJ,kBAAkB,CAACC,SAAnB,CAA6BM,yBAA7B,GAAyD,YAAY;IACjE,MAAMH,KAAK,CAAC,iBAAD,CAAX;EACH,CAFD;EAGA;AACJ;AACA;AACA;AACA;;;EACIJ,kBAAkB,CAACC,SAAnB,CAA6BO,KAA7B,GAAqC,YAAY;IAC7C,MAAMJ,KAAK,CAAC,iBAAD,CAAX;EACH,CAFD;;EAGA,OAAOJ,kBAAP;AACH,CA1DuC,EAAxC;;AA2DAF,OAAO,CAACW,OAAR,GAAkBT,kBAAlB"},"metadata":{},"sourceType":"script"}