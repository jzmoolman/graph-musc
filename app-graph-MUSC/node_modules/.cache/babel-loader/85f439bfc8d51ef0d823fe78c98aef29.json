{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar util_1 = require(\"./internal/util\");\n\nvar connection_holder_1 = require(\"./internal/connection-holder\");\n\nvar bookmark_1 = require(\"./internal/bookmark\");\n\nvar tx_config_1 = require(\"./internal/tx-config\");\n\nvar observers_1 = require(\"./internal/observers\");\n\nvar error_1 = require(\"./error\");\n\nvar result_1 = __importDefault(require(\"./result\"));\n/**\n * Represents a transaction in the Neo4j database.\n *\n * @access public\n */\n\n\nvar Transaction =\n/** @class */\nfunction () {\n  /**\n   * @constructor\n   * @param {ConnectionHolder} connectionHolder - the connection holder to get connection from.\n   * @param {function()} onClose - Function to be called when transaction is committed or rolled back.\n   * @param {function(bookmark: Bookmark)} onBookmark callback invoked when new bookmark is produced.\n   * * @param {function()} onConnection - Function to be called when a connection is obtained to ensure the conneciton\n   * is not yet released.\n   * @param {boolean} reactive whether this transaction generates reactive streams\n   * @param {number} fetchSize - the record fetch size in each pulling batch.\n   * @param {string} impersonatedUser - The name of the user which should be impersonated for the duration of the session.\n   */\n  function Transaction(_a) {\n    var connectionHolder = _a.connectionHolder,\n        onClose = _a.onClose,\n        onBookmark = _a.onBookmark,\n        onConnection = _a.onConnection,\n        reactive = _a.reactive,\n        fetchSize = _a.fetchSize,\n        impersonatedUser = _a.impersonatedUser;\n    this._connectionHolder = connectionHolder;\n    this._reactive = reactive;\n    this._state = _states.ACTIVE;\n    this._onClose = onClose;\n    this._onBookmark = onBookmark;\n    this._onConnection = onConnection;\n    this._onError = this._onErrorCallback.bind(this);\n    this._onComplete = this._onCompleteCallback.bind(this);\n    this._fetchSize = fetchSize;\n    this._results = [];\n    this._impersonatedUser = impersonatedUser;\n  }\n  /**\n   * @private\n   * @param {Bookmark | string |  string []} bookmark\n   * @param {TxConfig} txConfig\n   * @returns {void}\n   */\n\n\n  Transaction.prototype._begin = function (bookmark, txConfig) {\n    var _this = this;\n\n    this._connectionHolder.getConnection().then(function (connection) {\n      _this._onConnection();\n\n      if (connection) {\n        return connection.protocol().beginTransaction({\n          bookmark: bookmark,\n          txConfig: txConfig,\n          mode: _this._connectionHolder.mode(),\n          database: _this._connectionHolder.database(),\n          impersonatedUser: _this._impersonatedUser,\n          beforeError: _this._onError,\n          afterComplete: _this._onComplete\n        });\n      } else {\n        throw (0, error_1.newError)('No connection available');\n      }\n    }).catch(function (error) {\n      return _this._onError(error);\n    });\n  };\n  /**\n   * Run Cypher query\n   * Could be called with a query object i.e.: `{text: \"MATCH ...\", parameters: {param: 1}}`\n   * or with the query and parameters as separate arguments.\n   * @param {mixed} query - Cypher query to execute\n   * @param {Object} parameters - Map with parameters to use in query\n   * @return {Result} New Result\n   */\n\n\n  Transaction.prototype.run = function (query, parameters) {\n    var _a = (0, util_1.validateQueryAndParameters)(query, parameters),\n        validatedQuery = _a.validatedQuery,\n        params = _a.params;\n\n    var result = this._state.run(validatedQuery, params, {\n      connectionHolder: this._connectionHolder,\n      onError: this._onError,\n      onComplete: this._onComplete,\n      onConnection: this._onConnection,\n      reactive: this._reactive,\n      fetchSize: this._fetchSize\n    });\n\n    this._results.push(result);\n\n    return result;\n  };\n  /**\n   * Commits the transaction and returns the result.\n   *\n   * After committing the transaction can no longer be used.\n   *\n   * @returns {Promise<void>} An empty promise if committed successfully or error if any error happened during commit.\n   */\n\n\n  Transaction.prototype.commit = function () {\n    var committed = this._state.commit({\n      connectionHolder: this._connectionHolder,\n      onError: this._onError,\n      onComplete: this._onComplete,\n      onConnection: this._onConnection,\n      pendingResults: this._results\n    });\n\n    this._state = committed.state; // clean up\n\n    this._onClose();\n\n    return new Promise(function (resolve, reject) {\n      committed.result.subscribe({\n        onCompleted: function () {\n          return resolve();\n        },\n        onError: function (error) {\n          return reject(error);\n        }\n      });\n    });\n  };\n  /**\n   * Rollbacks the transaction.\n   *\n   * After rolling back, the transaction can no longer be used.\n   *\n   * @returns {Promise<void>} An empty promise if rolled back successfully or error if any error happened during\n   * rollback.\n   */\n\n\n  Transaction.prototype.rollback = function () {\n    var rolledback = this._state.rollback({\n      connectionHolder: this._connectionHolder,\n      onError: this._onError,\n      onComplete: this._onComplete,\n      onConnection: this._onConnection,\n      pendingResults: this._results\n    });\n\n    this._state = rolledback.state; // clean up\n\n    this._onClose();\n\n    return new Promise(function (resolve, reject) {\n      rolledback.result.subscribe({\n        onCompleted: function () {\n          return resolve();\n        },\n        onError: function (error) {\n          return reject(error);\n        }\n      });\n    });\n  };\n  /**\n   * Check if this transaction is active, which means commit and rollback did not happen.\n   * @return {boolean} `true` when not committed and not rolled back, `false` otherwise.\n   */\n\n\n  Transaction.prototype.isOpen = function () {\n    return this._state === _states.ACTIVE;\n  };\n  /**\n   * Closes the transaction\n   *\n   * This method will roll back the transaction if it is not already committed or rolled back.\n   *\n   * @returns {Promise<void>} An empty promise if closed successfully or error if any error happened during\n   */\n\n\n  Transaction.prototype.close = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.isOpen()) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.rollback()];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  Transaction.prototype._onErrorCallback = function (err) {\n    // error will be \"acknowledged\" by sending a RESET message\n    // database will then forget about this transaction and cleanup all corresponding resources\n    // it is thus safe to move this transaction to a FAILED state and disallow any further interactions with it\n    this._state = _states.FAILED;\n\n    this._onClose(); // release connection back to the pool\n\n\n    return this._connectionHolder.releaseConnection();\n  };\n  /**\n   * @private\n   * @param {object} meta The meta with bookmark\n   * @returns {void}\n   */\n\n\n  Transaction.prototype._onCompleteCallback = function (meta) {\n    this._onBookmark(new bookmark_1.Bookmark(meta.bookmark));\n  };\n\n  return Transaction;\n}();\n\nvar _states = {\n  // The transaction is running with no explicit success or failure marked\n  ACTIVE: {\n    commit: function (_a) {\n      var connectionHolder = _a.connectionHolder,\n          onError = _a.onError,\n          onComplete = _a.onComplete,\n          onConnection = _a.onConnection,\n          pendingResults = _a.pendingResults;\n      return {\n        result: finishTransaction(true, connectionHolder, onError, onComplete, onConnection, pendingResults),\n        state: _states.SUCCEEDED\n      };\n    },\n    rollback: function (_a) {\n      var connectionHolder = _a.connectionHolder,\n          onError = _a.onError,\n          onComplete = _a.onComplete,\n          onConnection = _a.onConnection,\n          pendingResults = _a.pendingResults;\n      return {\n        result: finishTransaction(false, connectionHolder, onError, onComplete, onConnection, pendingResults),\n        state: _states.ROLLED_BACK\n      };\n    },\n    run: function (query, parameters, _a) {\n      var connectionHolder = _a.connectionHolder,\n          onError = _a.onError,\n          onComplete = _a.onComplete,\n          onConnection = _a.onConnection,\n          reactive = _a.reactive,\n          fetchSize = _a.fetchSize; // RUN in explicit transaction can't contain bookmarks and transaction configuration\n      // No need to include mode and database name as it shall be inclued in begin\n\n      var observerPromise = connectionHolder.getConnection().then(function (conn) {\n        onConnection();\n\n        if (conn) {\n          return conn.protocol().run(query, parameters, {\n            bookmark: bookmark_1.Bookmark.empty(),\n            txConfig: tx_config_1.TxConfig.empty(),\n            beforeError: onError,\n            afterComplete: onComplete,\n            reactive: reactive,\n            fetchSize: fetchSize\n          });\n        } else {\n          throw (0, error_1.newError)('No connection available');\n        }\n      }).catch(function (error) {\n        return new observers_1.FailedObserver({\n          error: error,\n          onError: onError\n        });\n      });\n      return newCompletedResult(observerPromise, query, parameters, connectionHolder);\n    }\n  },\n  // An error has occurred, transaction can no longer be used and no more messages will\n  // be sent for this transaction.\n  FAILED: {\n    commit: function (_a) {\n      var connectionHolder = _a.connectionHolder,\n          onError = _a.onError,\n          onComplete = _a.onComplete;\n      return {\n        result: newCompletedResult(new observers_1.FailedObserver({\n          error: (0, error_1.newError)('Cannot commit this transaction, because it has been rolled back either because of an error or explicit termination.'),\n          onError: onError\n        }), 'COMMIT', {}, connectionHolder),\n        state: _states.FAILED\n      };\n    },\n    rollback: function (_a) {\n      var connectionHolder = _a.connectionHolder,\n          onError = _a.onError,\n          onComplete = _a.onComplete;\n      return {\n        result: newCompletedResult(new observers_1.CompletedObserver(), 'ROLLBACK', {}, connectionHolder),\n        state: _states.FAILED\n      };\n    },\n    run: function (query, parameters, _a) {\n      var connectionHolder = _a.connectionHolder,\n          onError = _a.onError,\n          onComplete = _a.onComplete;\n      return newCompletedResult(new observers_1.FailedObserver({\n        error: (0, error_1.newError)('Cannot run query in this transaction, because it has been rolled back either because of an error or explicit termination.'),\n        onError: onError\n      }), query, parameters, connectionHolder);\n    }\n  },\n  // This transaction has successfully committed\n  SUCCEEDED: {\n    commit: function (_a) {\n      var connectionHolder = _a.connectionHolder,\n          onError = _a.onError,\n          onComplete = _a.onComplete;\n      return {\n        result: newCompletedResult(new observers_1.FailedObserver({\n          error: (0, error_1.newError)('Cannot commit this transaction, because it has already been committed.'),\n          onError: onError\n        }), 'COMMIT', {}),\n        state: _states.SUCCEEDED,\n        connectionHolder: connectionHolder\n      };\n    },\n    rollback: function (_a) {\n      var connectionHolder = _a.connectionHolder,\n          onError = _a.onError,\n          onComplete = _a.onComplete;\n      return {\n        result: newCompletedResult(new observers_1.FailedObserver({\n          error: (0, error_1.newError)('Cannot rollback this transaction, because it has already been committed.'),\n          onError: onError\n        }), 'ROLLBACK', {}),\n        state: _states.SUCCEEDED,\n        connectionHolder: connectionHolder\n      };\n    },\n    run: function (query, parameters, _a) {\n      var connectionHolder = _a.connectionHolder,\n          onError = _a.onError,\n          onComplete = _a.onComplete;\n      return newCompletedResult(new observers_1.FailedObserver({\n        error: (0, error_1.newError)('Cannot run query in this transaction, because it has already been committed.'),\n        onError: onError\n      }), query, parameters, connectionHolder);\n    }\n  },\n  // This transaction has been rolled back\n  ROLLED_BACK: {\n    commit: function (_a) {\n      var connectionHolder = _a.connectionHolder,\n          onError = _a.onError,\n          onComplete = _a.onComplete;\n      return {\n        result: newCompletedResult(new observers_1.FailedObserver({\n          error: (0, error_1.newError)('Cannot commit this transaction, because it has already been rolled back.'),\n          onError: onError\n        }), 'COMMIT', {}, connectionHolder),\n        state: _states.ROLLED_BACK\n      };\n    },\n    rollback: function (_a) {\n      var connectionHolder = _a.connectionHolder,\n          onError = _a.onError,\n          onComplete = _a.onComplete;\n      return {\n        result: newCompletedResult(new observers_1.FailedObserver({\n          error: (0, error_1.newError)('Cannot rollback this transaction, because it has already been rolled back.')\n        }), 'ROLLBACK', {}, connectionHolder),\n        state: _states.ROLLED_BACK\n      };\n    },\n    run: function (query, parameters, _a) {\n      var connectionHolder = _a.connectionHolder,\n          onError = _a.onError,\n          onComplete = _a.onComplete;\n      return newCompletedResult(new observers_1.FailedObserver({\n        error: (0, error_1.newError)('Cannot run query in this transaction, because it has already been rolled back.'),\n        onError: onError\n      }), query, parameters, connectionHolder);\n    }\n  }\n};\n/**\n *\n * @param {boolean} commit\n * @param {ConnectionHolder} connectionHolder\n * @param {function(err:Error): any} onError\n * @param {function(metadata:object): any} onComplete\n * @param {function() : any} onConnection\n * @param {list<Result>>}pendingResults all run results in this transaction\n */\n\nfunction finishTransaction(commit, connectionHolder, onError, onComplete, onConnection, pendingResults) {\n  var observerPromise = connectionHolder.getConnection().then(function (connection) {\n    onConnection();\n    pendingResults.forEach(function (r) {\n      return r._cancel();\n    });\n    return Promise.all(pendingResults).then(function (results) {\n      if (connection) {\n        if (commit) {\n          return connection.protocol().commitTransaction({\n            beforeError: onError,\n            afterComplete: onComplete\n          });\n        } else {\n          return connection.protocol().rollbackTransaction({\n            beforeError: onError,\n            afterComplete: onComplete\n          });\n        }\n      } else {\n        throw (0, error_1.newError)('No connection available');\n      }\n    });\n  }).catch(function (error) {\n    return new observers_1.FailedObserver({\n      error: error,\n      onError: onError\n    });\n  }); // for commit & rollback we need result that uses real connection holder and notifies it when\n  // connection is not needed and can be safely released to the pool\n\n  return new result_1.default(observerPromise, commit ? 'COMMIT' : 'ROLLBACK', {}, connectionHolder);\n}\n/**\n * Creates a {@link Result} with empty connection holder.\n * For cases when result represents an intermediate or failed action, does not require any metadata and does not\n * need to influence real connection holder to release connections.\n * @param {ResultStreamObserver} observer - an observer for the created result.\n * @param {string} query - the cypher query that produced the result.\n * @param {Object} parameters - the parameters for cypher query that produced the result.\n * @param {ConnectionHolder} connectionHolder - the connection holder used to get the result\n * @return {Result} new result.\n * @private\n */\n\n\nfunction newCompletedResult(observerPromise, query, parameters, connectionHolder) {\n  if (connectionHolder === void 0) {\n    connectionHolder = connection_holder_1.EMPTY_CONNECTION_HOLDER;\n  }\n\n  return new result_1.default(Promise.resolve(observerPromise), query, parameters, new connection_holder_1.ReadOnlyConnectionHolder(connectionHolder || connection_holder_1.EMPTY_CONNECTION_HOLDER));\n}\n\nexports.default = Transaction;","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","__generator","body","_","label","sent","t","trys","ops","f","y","g","verb","Symbol","iterator","n","v","op","TypeError","call","pop","length","push","__importDefault","mod","__esModule","Object","defineProperty","exports","util_1","require","connection_holder_1","bookmark_1","tx_config_1","observers_1","error_1","result_1","Transaction","_a","connectionHolder","onClose","onBookmark","onConnection","reactive","fetchSize","impersonatedUser","_connectionHolder","_reactive","_state","_states","ACTIVE","_onClose","_onBookmark","_onConnection","_onError","_onErrorCallback","bind","_onComplete","_onCompleteCallback","_fetchSize","_results","_impersonatedUser","prototype","_begin","bookmark","txConfig","_this","getConnection","connection","protocol","beginTransaction","mode","database","beforeError","afterComplete","newError","catch","error","run","query","parameters","validateQueryAndParameters","validatedQuery","params","onError","onComplete","commit","committed","pendingResults","state","subscribe","onCompleted","rollback","rolledback","isOpen","close","err","FAILED","releaseConnection","meta","Bookmark","finishTransaction","SUCCEEDED","ROLLED_BACK","observerPromise","conn","empty","TxConfig","FailedObserver","newCompletedResult","CompletedObserver","forEach","r","_cancel","all","results","commitTransaction","rollbackTransaction","default","EMPTY_CONNECTION_HOLDER","ReadOnlyConnectionHolder"],"sources":["/Users/zack/src/gene3/node_modules/neo4j-driver-core/lib/transaction.js"],"sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar util_1 = require(\"./internal/util\");\nvar connection_holder_1 = require(\"./internal/connection-holder\");\nvar bookmark_1 = require(\"./internal/bookmark\");\nvar tx_config_1 = require(\"./internal/tx-config\");\nvar observers_1 = require(\"./internal/observers\");\nvar error_1 = require(\"./error\");\nvar result_1 = __importDefault(require(\"./result\"));\n/**\n * Represents a transaction in the Neo4j database.\n *\n * @access public\n */\nvar Transaction = /** @class */ (function () {\n    /**\n     * @constructor\n     * @param {ConnectionHolder} connectionHolder - the connection holder to get connection from.\n     * @param {function()} onClose - Function to be called when transaction is committed or rolled back.\n     * @param {function(bookmark: Bookmark)} onBookmark callback invoked when new bookmark is produced.\n     * * @param {function()} onConnection - Function to be called when a connection is obtained to ensure the conneciton\n     * is not yet released.\n     * @param {boolean} reactive whether this transaction generates reactive streams\n     * @param {number} fetchSize - the record fetch size in each pulling batch.\n     * @param {string} impersonatedUser - The name of the user which should be impersonated for the duration of the session.\n     */\n    function Transaction(_a) {\n        var connectionHolder = _a.connectionHolder, onClose = _a.onClose, onBookmark = _a.onBookmark, onConnection = _a.onConnection, reactive = _a.reactive, fetchSize = _a.fetchSize, impersonatedUser = _a.impersonatedUser;\n        this._connectionHolder = connectionHolder;\n        this._reactive = reactive;\n        this._state = _states.ACTIVE;\n        this._onClose = onClose;\n        this._onBookmark = onBookmark;\n        this._onConnection = onConnection;\n        this._onError = this._onErrorCallback.bind(this);\n        this._onComplete = this._onCompleteCallback.bind(this);\n        this._fetchSize = fetchSize;\n        this._results = [];\n        this._impersonatedUser = impersonatedUser;\n    }\n    /**\n     * @private\n     * @param {Bookmark | string |  string []} bookmark\n     * @param {TxConfig} txConfig\n     * @returns {void}\n     */\n    Transaction.prototype._begin = function (bookmark, txConfig) {\n        var _this = this;\n        this._connectionHolder\n            .getConnection()\n            .then(function (connection) {\n            _this._onConnection();\n            if (connection) {\n                return connection.protocol().beginTransaction({\n                    bookmark: bookmark,\n                    txConfig: txConfig,\n                    mode: _this._connectionHolder.mode(),\n                    database: _this._connectionHolder.database(),\n                    impersonatedUser: _this._impersonatedUser,\n                    beforeError: _this._onError,\n                    afterComplete: _this._onComplete\n                });\n            }\n            else {\n                throw (0, error_1.newError)('No connection available');\n            }\n        })\n            .catch(function (error) { return _this._onError(error); });\n    };\n    /**\n     * Run Cypher query\n     * Could be called with a query object i.e.: `{text: \"MATCH ...\", parameters: {param: 1}}`\n     * or with the query and parameters as separate arguments.\n     * @param {mixed} query - Cypher query to execute\n     * @param {Object} parameters - Map with parameters to use in query\n     * @return {Result} New Result\n     */\n    Transaction.prototype.run = function (query, parameters) {\n        var _a = (0, util_1.validateQueryAndParameters)(query, parameters), validatedQuery = _a.validatedQuery, params = _a.params;\n        var result = this._state.run(validatedQuery, params, {\n            connectionHolder: this._connectionHolder,\n            onError: this._onError,\n            onComplete: this._onComplete,\n            onConnection: this._onConnection,\n            reactive: this._reactive,\n            fetchSize: this._fetchSize\n        });\n        this._results.push(result);\n        return result;\n    };\n    /**\n     * Commits the transaction and returns the result.\n     *\n     * After committing the transaction can no longer be used.\n     *\n     * @returns {Promise<void>} An empty promise if committed successfully or error if any error happened during commit.\n     */\n    Transaction.prototype.commit = function () {\n        var committed = this._state.commit({\n            connectionHolder: this._connectionHolder,\n            onError: this._onError,\n            onComplete: this._onComplete,\n            onConnection: this._onConnection,\n            pendingResults: this._results\n        });\n        this._state = committed.state;\n        // clean up\n        this._onClose();\n        return new Promise(function (resolve, reject) {\n            committed.result.subscribe({\n                onCompleted: function () { return resolve(); },\n                onError: function (error) { return reject(error); }\n            });\n        });\n    };\n    /**\n     * Rollbacks the transaction.\n     *\n     * After rolling back, the transaction can no longer be used.\n     *\n     * @returns {Promise<void>} An empty promise if rolled back successfully or error if any error happened during\n     * rollback.\n     */\n    Transaction.prototype.rollback = function () {\n        var rolledback = this._state.rollback({\n            connectionHolder: this._connectionHolder,\n            onError: this._onError,\n            onComplete: this._onComplete,\n            onConnection: this._onConnection,\n            pendingResults: this._results\n        });\n        this._state = rolledback.state;\n        // clean up\n        this._onClose();\n        return new Promise(function (resolve, reject) {\n            rolledback.result.subscribe({\n                onCompleted: function () { return resolve(); },\n                onError: function (error) { return reject(error); }\n            });\n        });\n    };\n    /**\n     * Check if this transaction is active, which means commit and rollback did not happen.\n     * @return {boolean} `true` when not committed and not rolled back, `false` otherwise.\n     */\n    Transaction.prototype.isOpen = function () {\n        return this._state === _states.ACTIVE;\n    };\n    /**\n     * Closes the transaction\n     *\n     * This method will roll back the transaction if it is not already committed or rolled back.\n     *\n     * @returns {Promise<void>} An empty promise if closed successfully or error if any error happened during\n     */\n    Transaction.prototype.close = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.isOpen()) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.rollback()];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    Transaction.prototype._onErrorCallback = function (err) {\n        // error will be \"acknowledged\" by sending a RESET message\n        // database will then forget about this transaction and cleanup all corresponding resources\n        // it is thus safe to move this transaction to a FAILED state and disallow any further interactions with it\n        this._state = _states.FAILED;\n        this._onClose();\n        // release connection back to the pool\n        return this._connectionHolder.releaseConnection();\n    };\n    /**\n     * @private\n     * @param {object} meta The meta with bookmark\n     * @returns {void}\n     */\n    Transaction.prototype._onCompleteCallback = function (meta) {\n        this._onBookmark(new bookmark_1.Bookmark(meta.bookmark));\n    };\n    return Transaction;\n}());\nvar _states = {\n    // The transaction is running with no explicit success or failure marked\n    ACTIVE: {\n        commit: function (_a) {\n            var connectionHolder = _a.connectionHolder, onError = _a.onError, onComplete = _a.onComplete, onConnection = _a.onConnection, pendingResults = _a.pendingResults;\n            return {\n                result: finishTransaction(true, connectionHolder, onError, onComplete, onConnection, pendingResults),\n                state: _states.SUCCEEDED\n            };\n        },\n        rollback: function (_a) {\n            var connectionHolder = _a.connectionHolder, onError = _a.onError, onComplete = _a.onComplete, onConnection = _a.onConnection, pendingResults = _a.pendingResults;\n            return {\n                result: finishTransaction(false, connectionHolder, onError, onComplete, onConnection, pendingResults),\n                state: _states.ROLLED_BACK\n            };\n        },\n        run: function (query, parameters, _a) {\n            var connectionHolder = _a.connectionHolder, onError = _a.onError, onComplete = _a.onComplete, onConnection = _a.onConnection, reactive = _a.reactive, fetchSize = _a.fetchSize;\n            // RUN in explicit transaction can't contain bookmarks and transaction configuration\n            // No need to include mode and database name as it shall be inclued in begin\n            var observerPromise = connectionHolder\n                .getConnection()\n                .then(function (conn) {\n                onConnection();\n                if (conn) {\n                    return conn.protocol().run(query, parameters, {\n                        bookmark: bookmark_1.Bookmark.empty(),\n                        txConfig: tx_config_1.TxConfig.empty(),\n                        beforeError: onError,\n                        afterComplete: onComplete,\n                        reactive: reactive,\n                        fetchSize: fetchSize,\n                    });\n                }\n                else {\n                    throw (0, error_1.newError)('No connection available');\n                }\n            })\n                .catch(function (error) { return new observers_1.FailedObserver({ error: error, onError: onError }); });\n            return newCompletedResult(observerPromise, query, parameters, connectionHolder);\n        }\n    },\n    // An error has occurred, transaction can no longer be used and no more messages will\n    // be sent for this transaction.\n    FAILED: {\n        commit: function (_a) {\n            var connectionHolder = _a.connectionHolder, onError = _a.onError, onComplete = _a.onComplete;\n            return {\n                result: newCompletedResult(new observers_1.FailedObserver({\n                    error: (0, error_1.newError)('Cannot commit this transaction, because it has been rolled back either because of an error or explicit termination.'),\n                    onError: onError\n                }), 'COMMIT', {}, connectionHolder),\n                state: _states.FAILED\n            };\n        },\n        rollback: function (_a) {\n            var connectionHolder = _a.connectionHolder, onError = _a.onError, onComplete = _a.onComplete;\n            return {\n                result: newCompletedResult(new observers_1.CompletedObserver(), 'ROLLBACK', {}, connectionHolder),\n                state: _states.FAILED\n            };\n        },\n        run: function (query, parameters, _a) {\n            var connectionHolder = _a.connectionHolder, onError = _a.onError, onComplete = _a.onComplete;\n            return newCompletedResult(new observers_1.FailedObserver({\n                error: (0, error_1.newError)('Cannot run query in this transaction, because it has been rolled back either because of an error or explicit termination.'),\n                onError: onError\n            }), query, parameters, connectionHolder);\n        }\n    },\n    // This transaction has successfully committed\n    SUCCEEDED: {\n        commit: function (_a) {\n            var connectionHolder = _a.connectionHolder, onError = _a.onError, onComplete = _a.onComplete;\n            return {\n                result: newCompletedResult(new observers_1.FailedObserver({\n                    error: (0, error_1.newError)('Cannot commit this transaction, because it has already been committed.'),\n                    onError: onError\n                }), 'COMMIT', {}),\n                state: _states.SUCCEEDED,\n                connectionHolder: connectionHolder\n            };\n        },\n        rollback: function (_a) {\n            var connectionHolder = _a.connectionHolder, onError = _a.onError, onComplete = _a.onComplete;\n            return {\n                result: newCompletedResult(new observers_1.FailedObserver({\n                    error: (0, error_1.newError)('Cannot rollback this transaction, because it has already been committed.'),\n                    onError: onError\n                }), 'ROLLBACK', {}),\n                state: _states.SUCCEEDED,\n                connectionHolder: connectionHolder\n            };\n        },\n        run: function (query, parameters, _a) {\n            var connectionHolder = _a.connectionHolder, onError = _a.onError, onComplete = _a.onComplete;\n            return newCompletedResult(new observers_1.FailedObserver({\n                error: (0, error_1.newError)('Cannot run query in this transaction, because it has already been committed.'),\n                onError: onError\n            }), query, parameters, connectionHolder);\n        }\n    },\n    // This transaction has been rolled back\n    ROLLED_BACK: {\n        commit: function (_a) {\n            var connectionHolder = _a.connectionHolder, onError = _a.onError, onComplete = _a.onComplete;\n            return {\n                result: newCompletedResult(new observers_1.FailedObserver({\n                    error: (0, error_1.newError)('Cannot commit this transaction, because it has already been rolled back.'),\n                    onError: onError\n                }), 'COMMIT', {}, connectionHolder),\n                state: _states.ROLLED_BACK\n            };\n        },\n        rollback: function (_a) {\n            var connectionHolder = _a.connectionHolder, onError = _a.onError, onComplete = _a.onComplete;\n            return {\n                result: newCompletedResult(new observers_1.FailedObserver({\n                    error: (0, error_1.newError)('Cannot rollback this transaction, because it has already been rolled back.')\n                }), 'ROLLBACK', {}, connectionHolder),\n                state: _states.ROLLED_BACK\n            };\n        },\n        run: function (query, parameters, _a) {\n            var connectionHolder = _a.connectionHolder, onError = _a.onError, onComplete = _a.onComplete;\n            return newCompletedResult(new observers_1.FailedObserver({\n                error: (0, error_1.newError)('Cannot run query in this transaction, because it has already been rolled back.'),\n                onError: onError\n            }), query, parameters, connectionHolder);\n        }\n    }\n};\n/**\n *\n * @param {boolean} commit\n * @param {ConnectionHolder} connectionHolder\n * @param {function(err:Error): any} onError\n * @param {function(metadata:object): any} onComplete\n * @param {function() : any} onConnection\n * @param {list<Result>>}pendingResults all run results in this transaction\n */\nfunction finishTransaction(commit, connectionHolder, onError, onComplete, onConnection, pendingResults) {\n    var observerPromise = connectionHolder\n        .getConnection()\n        .then(function (connection) {\n        onConnection();\n        pendingResults.forEach(function (r) { return r._cancel(); });\n        return Promise.all(pendingResults).then(function (results) {\n            if (connection) {\n                if (commit) {\n                    return connection.protocol().commitTransaction({\n                        beforeError: onError,\n                        afterComplete: onComplete\n                    });\n                }\n                else {\n                    return connection.protocol().rollbackTransaction({\n                        beforeError: onError,\n                        afterComplete: onComplete\n                    });\n                }\n            }\n            else {\n                throw (0, error_1.newError)('No connection available');\n            }\n        });\n    })\n        .catch(function (error) { return new observers_1.FailedObserver({ error: error, onError: onError }); });\n    // for commit & rollback we need result that uses real connection holder and notifies it when\n    // connection is not needed and can be safely released to the pool\n    return new result_1.default(observerPromise, commit ? 'COMMIT' : 'ROLLBACK', {}, connectionHolder);\n}\n/**\n * Creates a {@link Result} with empty connection holder.\n * For cases when result represents an intermediate or failed action, does not require any metadata and does not\n * need to influence real connection holder to release connections.\n * @param {ResultStreamObserver} observer - an observer for the created result.\n * @param {string} query - the cypher query that produced the result.\n * @param {Object} parameters - the parameters for cypher query that produced the result.\n * @param {ConnectionHolder} connectionHolder - the connection holder used to get the result\n * @return {Result} new result.\n * @private\n */\nfunction newCompletedResult(observerPromise, query, parameters, connectionHolder) {\n    if (connectionHolder === void 0) { connectionHolder = connection_holder_1.EMPTY_CONNECTION_HOLDER; }\n    return new result_1.default(Promise.resolve(observerPromise), query, parameters, new connection_holder_1.ReadOnlyConnectionHolder(connectionHolder || connection_holder_1.EMPTY_CONNECTION_HOLDER));\n}\nexports.default = Transaction;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}