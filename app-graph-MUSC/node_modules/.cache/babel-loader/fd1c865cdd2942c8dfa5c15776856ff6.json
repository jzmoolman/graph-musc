{"ast":null,"code":"var _jsxFileName = \"/Users/zack/src/_-MUSC/gene-graph-MUSC/src/components/BaseGraph.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useContext, useEffect, useRef } from 'react';\nimport { Neo4jContext } from 'use-neo4j';\nimport ForceGraph2D from 'react-force-graph-2d';\nimport { useNavigate } from 'react-router-dom';\nimport { paintNode } from '../tools/graphtools';\nimport { defaultGraphScheme } from '../tools/graphtools';\nimport IconButton from '@mui/material/IconButton';\nimport CloseIcon from '@mui/icons-material/Close';\nimport { loadGeneData, loadOrganData, loadDiseaseData, loadSyndromeData } from '../tools/graphdata';\nimport { Box, Card, CardContent, CardHeader } from '@mui/material';\nimport ReactDOM from 'react-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst drawerWidth = 350;\nexport const BaseGraph = _ref => {\n  _s();\n\n  let {\n    drawerOpen,\n    width = 200,\n    height = 300,\n    name,\n    genes,\n    organs,\n    syndromes,\n    diseases,\n    finalVerdict,\n    graphScheme,\n    hover,\n    enableZoom,\n    onClick,\n    onMouseOver,\n    onMouseOut\n  } = _ref;\n  console.log(`enter - ${name}Graph`);\n  const [nodeHover, setNodeHover] = useState(null); // const [nodePosition, setNodePosition] = useState<{x:number, y:number}>({x:0 , y:0})\n\n  const handleCardClose = () => {\n    setNodeHover(null);\n  };\n\n  const handleMouseMove = e => {\n    let position = {\n      x: 0,\n      y: 0\n    };\n    position.x = e === null || e === void 0 ? void 0 : e.pageX;\n    position.y = e === null || e === void 0 ? void 0 : e.pageY; // setNodePosition(position)\n  };\n\n  const handleNodeHover = (node, previousNode) => {\n    console.log('handleNodeHover - node', node);\n    console.log('handleNodeHover - hover', hover);\n\n    if (!nodeHover && hover && node) {\n      console.log('handleNodeHover - Enter', node);\n      setNodeHover(node);\n    }\n  };\n\n  const handleClick = event => {\n    console.log('onClick');\n    if (onClick) onClick();\n  };\n\n  const handleNodeClick = (node, event) => {\n    console.log('node', node);\n    console.log('evet', event);\n  };\n\n  const navigate = useNavigate();\n\n  const handleNodeTypeClick = nodeType => {\n    navigate(`/graph/${nodeType}`);\n  };\n\n  const getWidth = box => {\n    var _document$getElementB;\n\n    let number = Number((_document$getElementB = document.getElementById(`graph-box${box}`)) === null || _document$getElementB === void 0 ? void 0 : _document$getElementB.offsetWidth);\n    console.log('getWidht', number);\n\n    if (typeof number === 'number' && number === number) {\n      console.log('getWidth is a number', number);\n      return number - 12;\n    } else {\n      console.log('getWidth NaN', number);\n      return 200;\n    }\n  };\n\n  const renderHover = () => {\n    //Check if nodeHover is set, if then render card\n    if (nodeHover) {\n      console.log('renderHover', nodeHover); // console.log('renderHover', nodePosition)\n\n      if (nodeHover.nodeType === 'gene') {\n        return /*#__PURE__*/ReactDOM.createPortal( /*#__PURE__*/_jsxDEV(Box, {\n          className: \"nodeCard\",\n          sx: {\n            position: \"absolute\",\n            margin: \"2px 0px 2px 0px\",\n            left: 20,\n            top: 80,\n            width: 300,\n            height: 300\n          },\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            sx: {\n              border: 0.1,\n              minWidth: 275,\n              borderColor: 'primary.main'\n            },\n            children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n              title: nodeHover.name,\n              subheader: nodeHover.nodeType,\n              action: /*#__PURE__*/_jsxDEV(IconButton, {\n                onClick: handleCardClose,\n                \"aria-label\": \"close\",\n                children: [\" \", /*#__PURE__*/_jsxDEV(CloseIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 145,\n                  columnNumber: 92\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 145,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n              children: /*#__PURE__*/_jsxDEV(Box, {\n                children: [/*#__PURE__*/_jsxDEV(BaseGraph, {\n                  drawerOpen: false,\n                  width: getWidth(1),\n                  height: 300,\n                  name: nodeHover.nodeType,\n                  genes: [nodeHover.name],\n                  organs: [],\n                  syndromes: [],\n                  diseases: [],\n                  finalVerdict: \"Confirmed\",\n                  graphScheme: defaultGraphScheme,\n                  enableZoom: false,\n                  onClick: () => handleNodeTypeClick(nodeHover.nodeType)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 152,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                    children: \" Name: \"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 168,\n                    columnNumber: 33\n                  }, this), \"  \", nodeHover.fullName]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 167,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                    children: \"  Mechanism: \"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 171,\n                    columnNumber: 33\n                  }, this), \" \", nodeHover.mechanism]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 170,\n                  columnNumber: 33\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 151,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 17\n        }, this), document.body);\n      } else if (nodeHover.nodeType === 'organ') {\n        return /*#__PURE__*/ReactDOM.createPortal( /*#__PURE__*/_jsxDEV(Box, {\n          className: \"nodeCard\",\n          sx: {\n            position: \"absolute\",\n            margin: \"2px 0px 2px 0px\",\n            left: 20,\n            top: 80,\n            width: 250,\n            height: 300\n          },\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            sx: {\n              border: 1,\n              minWidth: 275,\n              borderColor: 'primary.main'\n            },\n            children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n              title: nodeHover.name,\n              subheader: nodeHover.nodeType,\n              action: /*#__PURE__*/_jsxDEV(IconButton, {\n                onClick: handleCardClose,\n                \"aria-label\": \"close\",\n                children: [\" \", /*#__PURE__*/_jsxDEV(CloseIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 204,\n                  columnNumber: 96\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 204,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n              children: /*#__PURE__*/_jsxDEV(Box, {\n                children: /*#__PURE__*/_jsxDEV(BaseGraph, {\n                  drawerOpen: false,\n                  width: getWidth(1),\n                  height: 300,\n                  name: nodeHover.nodeType,\n                  genes: [],\n                  organs: [nodeHover.name],\n                  syndromes: [],\n                  diseases: [],\n                  finalVerdict: \"Confirmed\",\n                  graphScheme: defaultGraphScheme,\n                  enableZoom: false,\n                  onClick: () => handleNodeTypeClick(nodeHover.nodeType)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 211,\n                  columnNumber: 33\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 210,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 21\n        }, this), document.body);\n      } else if (nodeHover.nodeType === 'disease') {\n        return /*#__PURE__*/ReactDOM.createPortal( /*#__PURE__*/_jsxDEV(Box, {\n          className: \"nodeCard\",\n          sx: {\n            position: \"absolute\",\n            margin: \"2px 0px 2px 0px\",\n            left: 20,\n            top: 80,\n            width: 250,\n            height: 300\n          },\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            sx: {\n              border: 1,\n              minWidth: 275,\n              borderColor: 'primary.main'\n            },\n            children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n              title: nodeHover.name,\n              subheader: nodeHover.nodeType,\n              action: /*#__PURE__*/_jsxDEV(IconButton, {\n                onClick: handleCardClose,\n                \"aria-label\": \"close\",\n                children: [\" \", /*#__PURE__*/_jsxDEV(CloseIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 255,\n                  columnNumber: 96\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 255,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 251,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n              children: /*#__PURE__*/_jsxDEV(Box, {\n                children: /*#__PURE__*/_jsxDEV(BaseGraph, {\n                  drawerOpen: false,\n                  width: getWidth(1),\n                  height: 300,\n                  name: nodeHover.nodeType,\n                  genes: [],\n                  organs: [],\n                  syndromes: [],\n                  diseases: [nodeHover.name],\n                  finalVerdict: \"Confirmed\",\n                  graphScheme: defaultGraphScheme,\n                  enableZoom: false,\n                  onClick: () => handleNodeTypeClick(nodeHover.nodeType)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 262,\n                  columnNumber: 33\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 261,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 21\n        }, this), document.body);\n      } else if (nodeHover.nodeType === 'syndrome') {\n        console.log('hereditaryType', nodeHover.hereditaryType);\n        return /*#__PURE__*/ReactDOM.createPortal( /*#__PURE__*/_jsxDEV(Box, {\n          className: \"nodeCard\",\n          sx: {\n            position: \"absolute\",\n            margin: \"2px 0px 2px 0px\",\n            left: 20,\n            top: 80,\n            width: 250,\n            height: 300\n          },\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            sx: {\n              border: 1,\n              minWidth: 275,\n              borderColor: 'primary.main'\n            },\n            children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n              title: nodeHover.name,\n              subheader: nodeHover.nodeType,\n              action: /*#__PURE__*/_jsxDEV(IconButton, {\n                onClick: handleCardClose,\n                \"aria-label\": \"close\",\n                children: [\" \", /*#__PURE__*/_jsxDEV(CloseIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 307,\n                  columnNumber: 96\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 307,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 303,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n              children: /*#__PURE__*/_jsxDEV(Box, {\n                children: [/*#__PURE__*/_jsxDEV(BaseGraph, {\n                  drawerOpen: false,\n                  width: getWidth(1),\n                  height: 300,\n                  name: nodeHover.nodeType,\n                  genes: [],\n                  organs: [],\n                  syndromes: [nodeHover.name],\n                  diseases: [],\n                  finalVerdict: \"Confirmed\",\n                  graphScheme: defaultGraphScheme,\n                  enableZoom: false,\n                  onClick: () => handleNodeTypeClick(nodeHover.nodeType)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 314,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                    children: \" Inheritance Type: \"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 330,\n                    columnNumber: 33\n                  }, this), \"  \", nodeHover.hereditaryType]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 329,\n                  columnNumber: 29\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 313,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 312,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 21\n        }, this), document.body);\n      }\n    }\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  };\n\n  if (drawerOpen) {\n    width = width - drawerWidth;\n  }\n\n  const context = useContext(Neo4jContext),\n        driver = context.driver;\n  const [data, setData] = useState({\n    nodes: [],\n    links: []\n  });\n  useEffect(() => {\n    console.log('loading data ...');\n\n    const onData = data => {\n      console.log(data);\n      setData(data);\n    };\n\n    console.log('Graph name', name);\n\n    if (name === 'gene') {\n      loadGeneData(driver, genes, organs, finalVerdict, graphScheme, onData);\n    } else if (name === 'organ') {\n      loadOrganData(driver, genes, organs, finalVerdict, graphScheme, onData);\n    } else if (name === 'disease') {\n      loadDiseaseData(driver, diseases, genes, finalVerdict, graphScheme, onData);\n    } else if (name === 'syndrome') {\n      console.log('before');\n      loadSyndromeData(driver, syndromes, organs, finalVerdict, graphScheme, onData);\n      console.log('after');\n    }\n  }, [name, genes, organs, diseases, syndromes, finalVerdict, graphScheme]);\n  const forceRef = useRef();\n\n  let handleEngineStop = () => {\n    if (forceRef.current) {\n      forceRef.current.zoomToFit(400);\n    }\n  };\n\n  if (!graphScheme.fitViewPort) {\n    if (forceRef.current) {}\n  }\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    id: \"graph-box\",\n    sx: {\n      padding: '2px'\n    },\n    onClick: handleClick,\n    onMouseMove: handleMouseMove,\n    onMouseOver: e => {\n      if (onMouseOver) onMouseOver();\n    },\n    onMouseOut: e => {\n      if (onMouseOut) onMouseOut();\n    },\n    children: [renderHover(), /*#__PURE__*/_jsxDEV(ForceGraph2D, {\n      ref: forceRef,\n      width: width,\n      height: height,\n      graphData: data,\n      nodeId: \"name\",\n      nodeColor: \"nodeColor\",\n      nodeLabel: \"name\",\n      linkDirectionalArrowRelPos: 1,\n      linkDirectionalArrowLength: 2,\n      cooldownTicks: 100,\n      onEngineStop: handleEngineStop,\n      nodeVal: graphScheme.nodeVal,\n      nodeRelSize: graphScheme.nodeRelSize,\n      nodeCanvasObjectMode: () => 'after',\n      nodeCanvasObject: paintNode,\n      onNodeHover: handleNodeHover,\n      onNodeClick: handleNodeClick,\n      enableZoomInteraction: enableZoom\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 389,\n    columnNumber: 9\n  }, this);\n};\n\n_s(BaseGraph, \"GTKi+W8kyXhkKre/0riLOJtto/A=\", false, function () {\n  return [useNavigate];\n});\n\n_c = BaseGraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"BaseGraph\");","map":{"version":3,"names":["useState","useContext","useEffect","useRef","Neo4jContext","ForceGraph2D","useNavigate","paintNode","defaultGraphScheme","IconButton","CloseIcon","loadGeneData","loadOrganData","loadDiseaseData","loadSyndromeData","Box","Card","CardContent","CardHeader","ReactDOM","drawerWidth","BaseGraph","drawerOpen","width","height","name","genes","organs","syndromes","diseases","finalVerdict","graphScheme","hover","enableZoom","onClick","onMouseOver","onMouseOut","console","log","nodeHover","setNodeHover","handleCardClose","handleMouseMove","e","position","x","y","pageX","pageY","handleNodeHover","node","previousNode","handleClick","event","handleNodeClick","navigate","handleNodeTypeClick","nodeType","getWidth","box","number","Number","document","getElementById","offsetWidth","renderHover","createPortal","margin","left","top","border","minWidth","borderColor","fullName","mechanism","body","hereditaryType","context","driver","data","setData","nodes","links","onData","forceRef","handleEngineStop","current","zoomToFit","fitViewPort","padding","nodeVal","nodeRelSize"],"sources":["/Users/zack/src/_-MUSC/gene-graph-MUSC/src/components/BaseGraph.tsx"],"sourcesContent":["\nimport { useState, useContext, useEffect, useRef, MutableRefObject } from 'react'\nimport { Neo4jContext } from 'use-neo4j'\nimport ForceGraph2D, { ForceGraphMethods, NodeObject }  from 'react-force-graph-2d'\nimport { useNavigate } from 'react-router-dom'\nimport { CustomNodeObject, CustomSyndromeCardObject, CustomGeneCardObject, Force2DData, GraphName, GraphScheme, paintNode } from '../tools/graphtools'\nimport { defaultGraphScheme } from '../tools/graphtools';\nimport IconButton from '@mui/material/IconButton';\nimport CloseIcon from '@mui/icons-material/Close';\n\nimport { \n    loadGeneData,\n    loadOrganData,\n    loadDiseaseData,\n    loadSyndromeData\n } from '../tools/graphdata'\nimport { Box, Card, CardContent, CardHeader } from '@mui/material'\nimport ReactDOM from 'react-dom'\n\n\nconst drawerWidth = 350;\n\ntype BaseGraphProps = {\n    drawerOpen: boolean\n    width: number\n    height: number\n    name: GraphName\n    genes: string[]\n    organs: string[]\n    syndromes: string[]\n    diseases: string[]\n    finalVerdict: string\n    graphScheme: GraphScheme\n    hover?: boolean\n    enableZoom?: boolean\n    onClick?: () => void\n    onMouseOver?: () => void  \n    onMouseOut?: () => void\n}\nexport const BaseGraph = ( { \n    drawerOpen, \n    width=200, \n    height=300, \n    name,  \n    genes, \n    organs, \n    syndromes,\n    diseases,\n    finalVerdict,\n    graphScheme,\n    hover,\n    enableZoom,\n    onClick,\n    onMouseOver,\n    onMouseOut\n} : BaseGraphProps ) => {\n\n    console.log(`enter - ${name}Graph`)\n    \n    const [nodeHover, setNodeHover] = useState<NodeObject|null>(null)\n    // const [nodePosition, setNodePosition] = useState<{x:number, y:number}>({x:0 , y:0})\n\n    const handleCardClose = () => {\n        setNodeHover(null);\n      };\n\n    const handleMouseMove: React.MouseEventHandler<HTMLDivElement> = (e)  => {\n        let position: {x: number, y: number} = {x:0, y:0}\n        position.x = e?.pageX\n        position.y = e?.pageY\n        // setNodePosition(position)\n    }\n\n    const handleNodeHover = (node: NodeObject | null, previousNode: NodeObject | null) => {\n        console.log('handleNodeHover - node', node)\n        console.log('handleNodeHover - hover', hover)\n        if ( !nodeHover && hover && node   ) {\n            console.log('handleNodeHover - Enter', node)\n            setNodeHover(node)\n        }  \n    }\n\n    const handleClick:React.MouseEventHandler<HTMLDivElement> = (event) => {\n        console.log('onClick')\n        if (onClick)\n            onClick()\n\n    }\n\n    const handleNodeClick = (node: NodeObject, event: MouseEvent  ) => {\n        console.log('node', node)\n        console.log('evet', event)\n    }\n\n    const navigate = useNavigate()\n\n    const handleNodeTypeClick = (nodeType : string) => {\n        navigate(`/graph/${nodeType}`)\n    }\n\n    const getWidth = (box: number) => {\n        let number = Number(document.getElementById(`graph-box${box}`)?.offsetWidth )\n        console.log('getWidht', number)\n        if ( typeof number === 'number' && number === number) {\n            console.log('getWidth is a number', number)\n            return number-12\n        } else {\n            console.log('getWidth NaN', number)\n            return 200\n        }\n    }\n\n    const renderHover = () => {\n        //Check if nodeHover is set, if then render card\n        if ( nodeHover ) {\n            console.log('renderHover', nodeHover)\n            // console.log('renderHover', nodePosition)\n\n            if ((nodeHover as CustomNodeObject).nodeType === 'gene') {\n            return (ReactDOM.createPortal(\n                <Box\n                    className=\"nodeCard\"\n                    sx={{\n                        position: \"absolute\",\n                        margin: \"2px 0px 2px 0px\",\n                        left: 20,\n                        top: 80,\n                        width: 300,\n                        height: 300\n                        \n                    }}\n                >\n                    <Card \n                        sx={{ \n                            border:0.1,\n                            minWidth:275, \n                            borderColor: 'primary.main'\n                        }}\n                    >\n\n                        <CardHeader \n                            title={(nodeHover as CustomNodeObject).name}\n                            subheader={(nodeHover as CustomNodeObject).nodeType}\n                            action={\n                                <IconButton onClick={handleCardClose}  aria-label=\"close\"> <CloseIcon />\n                                </IconButton>\n                        }\n                        />\n                        \n                        <CardContent>\n                            <Box>\n                                <BaseGraph\n                                drawerOpen={false}\n                                width={getWidth(1)}\n                                height={300}\n                                name={((nodeHover as CustomNodeObject).nodeType as GraphName)}\n                                genes={[(nodeHover as CustomNodeObject).name]}\n                                organs={[]}\n                                syndromes={[]}\n                                diseases={[]}\n                                finalVerdict='Confirmed'\n                                graphScheme={defaultGraphScheme}\n                                enableZoom={false}\n                                onClick={() => handleNodeTypeClick((nodeHover as CustomNodeObject).nodeType)}\n                            />\n                                {/* // Armando */}\n                                <p>\n                                <b> Name: </b>  {(nodeHover as CustomGeneCardObject).fullName}\n                                </p>\n                                <div>\n                                <b>  Mechanism: </b> {(nodeHover as CustomGeneCardObject).mechanism}\n                                </div>\n                                {/* // Armando - end */}\n                            </Box>\n                            </CardContent>\n                        </Card>\n                    </Box>,\n                    document.body\n                ))\n            } else if ((nodeHover as CustomNodeObject).nodeType === 'organ'){\n                return (ReactDOM.createPortal(\n                    <Box\n                        className=\"nodeCard\"\n                        sx={{\n                            position: \"absolute\",\n                            margin: \"2px 0px 2px 0px\",\n                            left: 20,\n                            top: 80,\n                            width: 250,\n                            height: 300\n                        }}\n                    >\n                        <Card \n                            sx={{ \n                                border:1,\n                                minWidth:275, \n                                borderColor: 'primary.main'\n                            }}\n                        >\n                            <CardHeader \n                                title={(nodeHover as CustomNodeObject).name}\n                                subheader={(nodeHover as CustomNodeObject).nodeType}\n                                action={\n                                    <IconButton onClick={handleCardClose}  aria-label=\"close\"> <CloseIcon />\n                                    </IconButton>\n                            }\n    \n                            />\n                            <CardContent>\n                            <Box>\n                                <BaseGraph\n                                drawerOpen={false}\n                                width={getWidth(1)}\n                                height={300}\n                                name={((nodeHover as CustomNodeObject).nodeType as GraphName)}\n                                genes={[]}\n                                organs={[(nodeHover as CustomNodeObject).name]}\n                                syndromes={[]}\n                                diseases={[]}\n                                finalVerdict='Confirmed'\n                                graphScheme={defaultGraphScheme}\n                                enableZoom={false}\n                                onClick={() => handleNodeTypeClick((nodeHover as CustomNodeObject).nodeType)}\n                            />\n                            </Box>\n                            </CardContent>\n                        </Card>\n                    </Box>,\n                    document.body\n                ))\n            } else if ((nodeHover as CustomNodeObject).nodeType === 'disease'){\n                return (ReactDOM.createPortal(\n                    <Box\n                        className=\"nodeCard\"\n                        sx={{\n                            position: \"absolute\",\n                            margin: \"2px 0px 2px 0px\",\n                            left: 20,\n                            top: 80,\n                            width: 250,\n                            height: 300\n                        }}\n                    >\n                        <Card \n                            sx={{ \n                                border:1,\n                                minWidth:275, \n                                borderColor: 'primary.main'\n                            }}\n                        >\n                            <CardHeader \n                                title={(nodeHover as CustomNodeObject).name}\n                                subheader={(nodeHover as CustomNodeObject).nodeType}\n                                action={\n                                    <IconButton onClick={handleCardClose}  aria-label=\"close\"> <CloseIcon />\n                                    </IconButton>\n                            }\n    \n                            />\n                            <CardContent>\n                            <Box>\n                                <BaseGraph\n                                drawerOpen={false}\n                                width={getWidth(1)}\n                                height={300}\n                                name={((nodeHover as CustomNodeObject).nodeType as GraphName)}\n                                genes={[]}\n                                organs={[]}\n                                syndromes={[]}\n                                diseases={[(nodeHover as CustomNodeObject).name]}\n                                finalVerdict='Confirmed'\n                                graphScheme={defaultGraphScheme}\n                                enableZoom={false}\n                                onClick={() => handleNodeTypeClick((nodeHover as CustomNodeObject).nodeType)}\n                            />\n                            </Box>\n                            </CardContent>\n                        </Card>\n                    </Box>,\n                    document.body\n                ))\n            } else if ((nodeHover as CustomNodeObject).nodeType === 'syndrome'){\n                console.log('hereditaryType',(nodeHover as CustomSyndromeCardObject).hereditaryType)\n\n                return (ReactDOM.createPortal(\n                    <Box\n                        className=\"nodeCard\"\n                        sx={{\n                            position: \"absolute\",\n                            margin: \"2px 0px 2px 0px\",\n                            left: 20,\n                            top: 80,\n                            width: 250,\n                            height: 300\n                        }}\n                    >\n                        <Card sx={{\n                                border:1,\n                             minWidth:275,                             \n                            borderColor: 'primary.main'\n                        }}>\n\n                            <CardHeader \n                                title={(nodeHover as CustomNodeObject).name}\n                                subheader={(nodeHover as CustomNodeObject).nodeType}\n                                action={\n                                    <IconButton onClick={handleCardClose}  aria-label=\"close\"> <CloseIcon />\n                                    </IconButton>\n                            }\n    \n                            />\n                            <CardContent>\n                            <Box>\n                                <BaseGraph\n                                drawerOpen={false}\n                                width={getWidth(1)}\n                                height={300}\n                                name={((nodeHover as CustomNodeObject).nodeType as GraphName)}\n                                genes={[]}\n                                organs={[]}\n                                syndromes={[(nodeHover as CustomNodeObject).name]}\n                                diseases={[]}\n                                finalVerdict='Confirmed'\n                                graphScheme={defaultGraphScheme}\n                                enableZoom={false}\n                                onClick={() => handleNodeTypeClick((nodeHover as CustomNodeObject).nodeType)}\n                            />\n                            {/* // Armando */}\n                            <p>\n                                <b> Inheritance Type: </b>  {(nodeHover as CustomSyndromeCardObject).hereditaryType}\n                            </p>\n                            {/* // Aramando - end */}\n                            </Box>\n                        </CardContent>\n                    </Card>\n                </Box>,\n                document.body\n            ))\n        } \n        \n    }\n        return (<></>)\n\n    }\n\n    if (drawerOpen) {\n        width = width - drawerWidth\n    }\n    \n    const context = useContext(Neo4jContext), driver = context.driver\n    const [data, setData] =  useState<Force2DData>( {nodes: [], links: []} )\n\n    useEffect( () => {\n        console.log('loading data ...')\n        const onData = (data: Force2DData) =>{\n            console.log(data)\n            setData(data)\n        }\n        console.log('Graph name',name)\n\n        if (name === 'gene') {\n          loadGeneData(driver, genes, organs,finalVerdict, graphScheme, onData)\n        } else if (name === 'organ') {\n          loadOrganData(driver, genes, organs, finalVerdict, graphScheme, onData)\n        } else if ( name === 'disease') {\n          loadDiseaseData(driver, diseases, genes, finalVerdict, graphScheme, onData)\n        } else if ( name === 'syndrome') {\n            console.log('before')\n          loadSyndromeData(driver, syndromes, organs, finalVerdict, graphScheme, onData)\n            console.log('after')\n        }\n\n    },[ name, genes, organs, diseases, syndromes, finalVerdict, graphScheme] )\n    \n    const forceRef : MutableRefObject<ForceGraphMethods | undefined> = useRef()      \n\n\n    let handleEngineStop: ()=>void | undefined = () => {\n        if (forceRef.current) {\n            (forceRef.current as ForceGraphMethods).zoomToFit(400);\n        }\n    }\n    \n    if (!graphScheme.fitViewPort) {\n        if (forceRef.current) {}\n    }\n\n    return (\n        <Box id='graph-box' sx={{padding:'2px'}} \n            onClick={handleClick}\n            onMouseMove={handleMouseMove}\n            onMouseOver={(e)=>{\n                if (onMouseOver) \n                    onMouseOver()\n            }}\n            onMouseOut={(e)=>{\n                if (onMouseOut) \n                    onMouseOut()\n            }}\n            \n            \n        >\n            {renderHover()}\n            <ForceGraph2D \n                \n                ref={forceRef}\n                width={width}\n                height={height}\n                graphData={data}\n                nodeId='name'  \n                nodeColor='nodeColor' \n                nodeLabel='name' \n                linkDirectionalArrowRelPos={1} \n                linkDirectionalArrowLength={2} \n                cooldownTicks={100}\n                onEngineStop={handleEngineStop} \n                nodeVal={graphScheme.nodeVal}\n                nodeRelSize={graphScheme.nodeRelSize}\n                nodeCanvasObjectMode={() => 'after'} \n                nodeCanvasObject={paintNode}\n                onNodeHover={handleNodeHover}\n                onNodeClick={handleNodeClick}\n                enableZoomInteraction={enableZoom}\n            />\n            \n        </Box>\n    )\n}\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}