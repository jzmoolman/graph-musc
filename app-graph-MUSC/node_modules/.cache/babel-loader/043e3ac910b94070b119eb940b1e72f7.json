{"ast":null,"code":"\"use strict\";\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar neo4j_driver_core_1 = require(\"neo4j-driver-core\");\n\nvar _a = neo4j_driver_core_1.internal.util,\n    ENCRYPTION_OFF = _a.ENCRYPTION_OFF,\n    ENCRYPTION_ON = _a.ENCRYPTION_ON;\nvar SERVICE_UNAVAILABLE = neo4j_driver_core_1.error.SERVICE_UNAVAILABLE;\nvar DEFAULT_CONNECTION_TIMEOUT_MILLIS = 30000; // 30 seconds by default\n\nvar ALLOWED_VALUES_ENCRYPTED = [null, undefined, true, false, ENCRYPTION_ON, ENCRYPTION_OFF];\nvar ALLOWED_VALUES_TRUST = [null, undefined, 'TRUST_ALL_CERTIFICATES', 'TRUST_CUSTOM_CA_SIGNED_CERTIFICATES', 'TRUST_SYSTEM_CA_SIGNED_CERTIFICATES'];\n\nvar ChannelConfig =\n/** @class */\nfunction () {\n  /**\n   * @constructor\n   * @param {ServerAddress} address the address for the channel to connect to.\n   * @param {Object} driverConfig the driver config provided by the user when driver is created.\n   * @param {string} connectionErrorCode the default error code to use on connection errors.\n   */\n  function ChannelConfig(address, driverConfig, connectionErrorCode) {\n    this.address = address;\n    this.encrypted = extractEncrypted(driverConfig);\n    this.trust = extractTrust(driverConfig);\n    this.trustedCertificates = extractTrustedCertificates(driverConfig);\n    this.knownHostsPath = extractKnownHostsPath(driverConfig);\n    this.connectionErrorCode = connectionErrorCode || SERVICE_UNAVAILABLE;\n    this.connectionTimeout = extractConnectionTimeout(driverConfig);\n  }\n\n  return ChannelConfig;\n}();\n\nexports.default = ChannelConfig;\n\nfunction extractEncrypted(driverConfig) {\n  var value = driverConfig.encrypted;\n\n  if (ALLOWED_VALUES_ENCRYPTED.indexOf(value) === -1) {\n    throw (0, neo4j_driver_core_1.newError)(\"Illegal value of the encrypted setting \" + value + \". Expected one of \" + ALLOWED_VALUES_ENCRYPTED);\n  }\n\n  return value;\n}\n\nfunction extractTrust(driverConfig) {\n  var value = driverConfig.trust;\n\n  if (ALLOWED_VALUES_TRUST.indexOf(value) === -1) {\n    throw (0, neo4j_driver_core_1.newError)(\"Illegal value of the trust setting \" + value + \". Expected one of \" + ALLOWED_VALUES_TRUST);\n  }\n\n  return value;\n}\n\nfunction extractTrustedCertificates(driverConfig) {\n  return driverConfig.trustedCertificates || [];\n}\n\nfunction extractKnownHostsPath(driverConfig) {\n  return driverConfig.knownHosts || null;\n}\n\nfunction extractConnectionTimeout(driverConfig) {\n  var configuredTimeout = parseInt(driverConfig.connectionTimeout, 10);\n\n  if (configuredTimeout === 0) {\n    // timeout explicitly configured to 0\n    return null;\n  } else if (configuredTimeout && configuredTimeout < 0) {\n    // timeout explicitly configured to a negative value\n    return null;\n  } else if (!configuredTimeout) {\n    // timeout not configured, use default value\n    return DEFAULT_CONNECTION_TIMEOUT_MILLIS;\n  } else {\n    // timeout configured, use the provided value\n    return configuredTimeout;\n  }\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","neo4j_driver_core_1","require","_a","internal","util","ENCRYPTION_OFF","ENCRYPTION_ON","SERVICE_UNAVAILABLE","error","DEFAULT_CONNECTION_TIMEOUT_MILLIS","ALLOWED_VALUES_ENCRYPTED","undefined","ALLOWED_VALUES_TRUST","ChannelConfig","address","driverConfig","connectionErrorCode","encrypted","extractEncrypted","trust","extractTrust","trustedCertificates","extractTrustedCertificates","knownHostsPath","extractKnownHostsPath","connectionTimeout","extractConnectionTimeout","default","indexOf","newError","knownHosts","configuredTimeout","parseInt"],"sources":["/Users/zack/src/gene3/node_modules/neo4j-driver-bolt-connection/lib/channel/channel-config.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar neo4j_driver_core_1 = require(\"neo4j-driver-core\");\nvar _a = neo4j_driver_core_1.internal.util, ENCRYPTION_OFF = _a.ENCRYPTION_OFF, ENCRYPTION_ON = _a.ENCRYPTION_ON;\nvar SERVICE_UNAVAILABLE = neo4j_driver_core_1.error.SERVICE_UNAVAILABLE;\nvar DEFAULT_CONNECTION_TIMEOUT_MILLIS = 30000; // 30 seconds by default\nvar ALLOWED_VALUES_ENCRYPTED = [\n    null,\n    undefined,\n    true,\n    false,\n    ENCRYPTION_ON,\n    ENCRYPTION_OFF\n];\nvar ALLOWED_VALUES_TRUST = [\n    null,\n    undefined,\n    'TRUST_ALL_CERTIFICATES',\n    'TRUST_CUSTOM_CA_SIGNED_CERTIFICATES',\n    'TRUST_SYSTEM_CA_SIGNED_CERTIFICATES'\n];\nvar ChannelConfig = /** @class */ (function () {\n    /**\n     * @constructor\n     * @param {ServerAddress} address the address for the channel to connect to.\n     * @param {Object} driverConfig the driver config provided by the user when driver is created.\n     * @param {string} connectionErrorCode the default error code to use on connection errors.\n     */\n    function ChannelConfig(address, driverConfig, connectionErrorCode) {\n        this.address = address;\n        this.encrypted = extractEncrypted(driverConfig);\n        this.trust = extractTrust(driverConfig);\n        this.trustedCertificates = extractTrustedCertificates(driverConfig);\n        this.knownHostsPath = extractKnownHostsPath(driverConfig);\n        this.connectionErrorCode = connectionErrorCode || SERVICE_UNAVAILABLE;\n        this.connectionTimeout = extractConnectionTimeout(driverConfig);\n    }\n    return ChannelConfig;\n}());\nexports.default = ChannelConfig;\nfunction extractEncrypted(driverConfig) {\n    var value = driverConfig.encrypted;\n    if (ALLOWED_VALUES_ENCRYPTED.indexOf(value) === -1) {\n        throw (0, neo4j_driver_core_1.newError)(\"Illegal value of the encrypted setting \" + value + \". Expected one of \" + ALLOWED_VALUES_ENCRYPTED);\n    }\n    return value;\n}\nfunction extractTrust(driverConfig) {\n    var value = driverConfig.trust;\n    if (ALLOWED_VALUES_TRUST.indexOf(value) === -1) {\n        throw (0, neo4j_driver_core_1.newError)(\"Illegal value of the trust setting \" + value + \". Expected one of \" + ALLOWED_VALUES_TRUST);\n    }\n    return value;\n}\nfunction extractTrustedCertificates(driverConfig) {\n    return driverConfig.trustedCertificates || [];\n}\nfunction extractKnownHostsPath(driverConfig) {\n    return driverConfig.knownHosts || null;\n}\nfunction extractConnectionTimeout(driverConfig) {\n    var configuredTimeout = parseInt(driverConfig.connectionTimeout, 10);\n    if (configuredTimeout === 0) {\n        // timeout explicitly configured to 0\n        return null;\n    }\n    else if (configuredTimeout && configuredTimeout < 0) {\n        // timeout explicitly configured to a negative value\n        return null;\n    }\n    else if (!configuredTimeout) {\n        // timeout not configured, use default value\n        return DEFAULT_CONNECTION_TIMEOUT_MILLIS;\n    }\n    else {\n        // timeout configured, use the provided value\n        return configuredTimeout;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}