{"ast":null,"code":"import { ArrayToStr } from '../tools/graphtools';\nexport const loadGeneData = async (driver, genes, organs, FinalVerdict, graphScheme, onData) => {\n  console.log('enter - loadData');\n\n  if (driver == null) {\n    console.log('Driver not loaded');\n    return;\n  }\n\n  const str_genes = ArrayToStr(genes);\n  const str_organs = ArrayToStr(organs);\n  let whereCLAUSE = '';\n\n  if (finalVerdict === 'Confirmed') {\n    whereCLAUSE = 'WHERE g.FinalVerdict = 1';\n  } else if (FinalVerdict === 'Maybe') {\n    whereCLAUSE = 'WHERE g.FinalVerdict = 9';\n  } else {\n    whereCLAUSE = 'WHERE g.FinalVerdict in [0,1,9]';\n  }\n\n  console.log(genes, organs);\n\n  if (str_genes !== '') {\n    whereCLAUSE = whereCLAUSE + ' AND g.name IN ' + str_genes;\n  }\n\n  if (str_organs !== '') {\n    whereCLAUSE = whereCLAUSE + ' AND o.name IN ' + str_organs;\n  }\n\n  const query = `MATCH (g:MGene)-[r]->(o:Organ) ${whereCLAUSE} RETURN g,r,o`;\n  console.log('Gene->Orgran', query);\n  let session = driver.session();\n\n  try {\n    let res = await session.run(query);\n    let ids = new Set();\n    let nodes = [];\n    let links = [];\n    res.records.forEach(row => {\n      let link = {\n        source: '',\n        target: ''\n      };\n      const source = row.get('g');\n\n      if (!ids.has(source.properties.name)) {\n        let node = {\n          id: source.identity,\n          name: source.properties.name,\n          nodeType: 'Gene',\n          nodeColor: graphScheme.geneNode,\n          fontColor: graphScheme.geneFont,\n          nodeVal: graphScheme.nodeVal,\n          nodeRelSize: graphScheme.nodeRelSize,\n          scaleFont: graphScheme.scaleFont\n        };\n        nodes.push(node);\n        link.source = node.name;\n        ids.add(node.name);\n      } else {\n        link.source = source.properties.name;\n      }\n\n      const target = row.get('o');\n\n      if (!ids.has(target.properties.name)) {\n        let node = {\n          id: target.identity,\n          name: target.properties.name,\n          nodeType: 'Organ',\n          nodeColor: graphScheme.organNode,\n          fontColor: graphScheme.organFont,\n          nodeVal: graphScheme.nodeVal,\n          nodeRelSize: graphScheme.nodeRelSize,\n          scaleFont: graphScheme.scaleFont\n        };\n        nodes.push(node);\n        link.target = node.name;\n        ids.add(node.name);\n      } else {\n        link.target = target.properties.name;\n      }\n\n      links.push(link);\n    });\n    console.log(nodes);\n    console.log(links);\n    console.log('Data loaded');\n    session.close();\n    console.log('nodes', nodes);\n    onData({\n      nodes,\n      links\n    });\n  } catch (e) {\n    throw e;\n  } finally {\n    await session.close();\n  }\n};\nexport const loadOrganData = async (driver, verified, genes, organs, graphScheme, onData) => {\n  console.log('enter - loadData');\n\n  if (driver == null) {\n    console.log('Driver not loaded');\n    return;\n  }\n\n  const str_genes = ArrayToStr(genes);\n  const str_organs = ArrayToStr(organs);\n  let whereCLAUSE = '';\n\n  if (verified) {\n    whereCLAUSE = 'WHERE g.FinalVerdict = 1';\n  } else {\n    whereCLAUSE = 'WHERE g.FinalVerdict = 0';\n  }\n\n  console.log(genes, organs);\n\n  if (str_genes !== '') {\n    whereCLAUSE = whereCLAUSE + ' AND g.name IN ' + str_genes;\n  }\n\n  if (str_organs !== '') {\n    whereCLAUSE = whereCLAUSE + ' AND o.name IN ' + str_organs;\n  }\n\n  const query = `MATCH (g:MGene)-[r]->(o:Organ) ${whereCLAUSE} RETURN g,r,o`;\n  console.log('Gene->Orgran', query);\n  let session = driver.session();\n\n  try {\n    let res = await session.run(query);\n    let ids = new Set();\n    let nodes = [];\n    let links = [];\n    res.records.forEach(row => {\n      let link = {\n        source: '',\n        target: ''\n      };\n      const source = row.get('o');\n\n      if (!ids.has(source.properties.name)) {\n        let node = {\n          id: source.identity,\n          name: source.properties.name,\n          nodeType: 'Organ',\n          nodeColor: graphScheme.organNode,\n          fontColor: graphScheme.organFont,\n          nodeVal: graphScheme.nodeVal,\n          nodeRelSize: graphScheme.nodeRelSize,\n          scaleFont: graphScheme.scaleFont\n        };\n        nodes.push(node);\n        link.source = node.name;\n        ids.add(node.name);\n      } else {\n        link.source = source.properties.name;\n      }\n\n      const target = row.get('g');\n\n      if (!ids.has(target.properties.name)) {\n        let node = {\n          id: target.identity,\n          name: target.properties.name,\n          nodeType: 'Gene',\n          nodeColor: graphScheme.geneNode,\n          fontColor: graphScheme.geneFont,\n          nodeVal: graphScheme.nodeVal,\n          nodeRelSize: graphScheme.nodeRelSize,\n          scaleFont: graphScheme.scaleFont\n        };\n        nodes.push(node);\n        link.target = node.name;\n        ids.add(node.name);\n      } else {\n        link.target = target.properties.name;\n      }\n\n      links.push(link);\n    });\n    console.log('Data loaded');\n    console.log(nodes);\n    console.log(links);\n    session.close();\n    onData({\n      nodes,\n      links\n    });\n  } catch (e) {\n    throw e;\n  } finally {\n    await session.close();\n  }\n};\nexport const loadSyndromeGeneData = async (driver, verified, syndromes, genes, graphScheme, onData) => {\n  console.log('enter - loadData');\n\n  if (driver == null) {\n    console.log('Driver not loaded');\n    return;\n  }\n\n  const str_genes = ArrayToStr(genes);\n  const str_syndrome = ArrayToStr(syndromes);\n  let whereCLAUSE = '';\n\n  if (verified) {\n    whereCLAUSE = 'WHERE g.FinalVerdict = 1';\n  } else {\n    whereCLAUSE = 'WHERE g.FinalVerdict = 0';\n  }\n\n  console.log(genes, genes);\n\n  if (str_genes !== '') {\n    whereCLAUSE = whereCLAUSE + ' AND g.name IN ' + str_genes;\n  }\n\n  if (str_syndrome !== '') {\n    whereCLAUSE = whereCLAUSE + ' AND s.name IN ' + str_syndrome;\n  }\n\n  const query = `MATCH (g:MGene)-[r]->(s:Syndrome) ${whereCLAUSE} RETURN g,r,s`;\n  console.log('Syndrome->Gene', query);\n  let session = driver.session();\n\n  try {\n    let res = await session.run(query);\n    let ids = new Set();\n    let nodes = [];\n    let links = [];\n    res.records.forEach(row => {\n      let link = {\n        source: '',\n        target: ''\n      };\n      const source = row.get('s');\n\n      if (!ids.has(source.properties.name)) {\n        let node = {\n          id: source.identity,\n          name: source.properties.name,\n          nodeType: 'Syndrome',\n          nodeColor: graphScheme.syndromeNode,\n          fontColor: graphScheme.syndromeFont,\n          nodeVal: graphScheme.nodeVal,\n          nodeRelSize: graphScheme.nodeRelSize,\n          scaleFont: graphScheme.scaleFont\n        };\n        nodes.push(node);\n        link.source = node.name;\n        ids.add(node.name);\n      } else {\n        link.source = source.properties.name;\n      }\n\n      let target = row.get('g');\n\n      if (!ids.has(target.properties.name)) {\n        let node = {\n          id: target.identity,\n          name: target.properties.name,\n          nameType: 'Gene',\n          nodeColor: graphScheme.geneNode,\n          fontColor: graphScheme.geneFont,\n          nodeVal: graphScheme.nodeVal,\n          nodeRelSize: graphScheme.nodeRelSize,\n          scaleFont: graphScheme.scaleFont\n        };\n        nodes.push(node);\n        link.target = node.name;\n        ids.add(node.name);\n      } else {\n        link.target = target.properties.name;\n      }\n\n      links.push(link);\n    });\n    console.log(nodes);\n    console.log(links);\n    console.log('Data loaded');\n    session.close();\n    console.log('nodes', nodes);\n    onData({\n      nodes,\n      links\n    });\n  } catch (e) {\n    throw e;\n  } finally {\n    await session.close();\n  }\n};\nexport const loadSyndromeOrganData = async (driver, verified, syndromes, organs, graphScheme, onData) => {\n  console.log('enter - loadData');\n\n  if (driver == null) {\n    console.log('Driver not loaded');\n    return;\n  }\n\n  const str_organs = ArrayToStr(organs);\n  const str_syndrome = ArrayToStr(syndromes);\n  let whereCLAUSE = '';\n\n  if (verified) {\n    whereCLAUSE = 'WHERE g.FinalVerdict = 1';\n  } else {\n    whereCLAUSE = 'WHERE g.FinalVerdict = 0';\n  }\n\n  console.log(organs, organs);\n\n  if (str_organs !== '') {\n    whereCLAUSE = whereCLAUSE + ' AND o.name IN ' + str_organs;\n  }\n\n  if (str_syndrome !== '') {\n    whereCLAUSE = whereCLAUSE + ' AND s.name IN ' + str_syndrome;\n  }\n\n  const query = `MATCH (g:MGene)-[r]->(s:Syndrome), (g:MGene)-[r2]->(o:Organ) ${whereCLAUSE} RETURN o,r2,s`;\n  console.log('Syndrome->Gene', query);\n  let session = driver.session();\n\n  try {\n    let res = await session.run(query);\n    let ids = new Set();\n    let nodes = [];\n    let links = [];\n    res.records.forEach(row => {\n      let link = {\n        source: '',\n        target: ''\n      };\n      const target = row.get('o');\n\n      if (!ids.has(target.properties.name)) {\n        let node = {\n          id: target.identity,\n          name: target.properties.name,\n          nodeType: 'Organ',\n          nodeColor: graphScheme.organNode,\n          fontColor: graphScheme.organFont,\n          nodeVal: graphScheme.nodeVal,\n          nodeRelSize: graphScheme.nodeRelSize,\n          scaleFont: graphScheme.scaleFont\n        };\n        nodes.push(node);\n        link.target = node.name;\n        ids.add(node.name);\n      } else {\n        link.target = target.properties.name;\n      }\n\n      const source = row.get('s');\n\n      if (!ids.has(source.properties.name)) {\n        let node = {\n          id: source.identity,\n          name: source.properties.name,\n          nameType: 'Syndrome',\n          nodeColor: graphScheme.syndromeNode,\n          fontColor: graphScheme.syndromeFont,\n          nodeVal: graphScheme.nodeVal,\n          nodeRelSize: graphScheme.nodeRelSize,\n          scaleFont: graphScheme.scaleFont\n        };\n        nodes.push(node);\n        link.source = node.name;\n        ids.add(node.name);\n      } else {\n        link.source = source.properties.name;\n      }\n\n      links.push(link);\n    });\n    console.log(nodes);\n    console.log(links);\n    console.log('Data loaded');\n    session.close();\n    console.log('nodes', nodes);\n    onData({\n      nodes,\n      links\n    });\n  } catch (e) {\n    throw e;\n  } finally {\n    await session.close();\n  }\n};\nexport const loadSyndromeGeneOrganData = async (driver, verified, syndromes, genes, organs, graphScheme, onData) => {\n  console.log('enter - loadData');\n\n  if (driver == null) {\n    console.log('Driver not loaded');\n    return;\n  }\n\n  const str_syndromes = ArrayToStr(syndromes);\n  const str_genes = ArrayToStr(genes);\n  const str_organs = ArrayToStr(organs);\n  let whereCLAUSE = '';\n\n  if (verified) {\n    whereCLAUSE = 'WHERE g.FinalVerdict = 1';\n  } else {\n    whereCLAUSE = 'WHERE g.FinalVerdict = 0';\n  }\n\n  console.log(organs, organs);\n\n  if (str_organs !== '') {\n    whereCLAUSE = whereCLAUSE + ' AND o.name IN ' + str_organs;\n  }\n\n  if (str_syndromes !== '') {\n    whereCLAUSE = whereCLAUSE + ' AND s.name IN ' + str_syndromes;\n  }\n\n  if (str_genes !== '') {\n    whereCLAUSE = whereCLAUSE + ' AND g.name IN ' + str_genes;\n  }\n\n  const query = `MATCH (g:MGene)-[r]->(s:Syndrome), (g:MGene)-[r2]->(o:Organ) ${whereCLAUSE} RETURN g,o,s`;\n  console.log('Syndrome->Gene-Organ', query);\n  let session = driver.session();\n\n  try {\n    let res = await session.run(query);\n    let ids = new Set();\n    let nodes = [];\n    let links = [];\n    res.records.forEach(row => {\n      let link1 = {\n        source: '',\n        target: ''\n      };\n      let source = row.get('s');\n\n      if (!ids.has(source.properties.name)) {\n        let node = {\n          id: source.identity,\n          name: source.properties.name,\n          nodeType: 'Symdrome',\n          nodeColor: graphScheme.syndromeNode,\n          fontColor: graphScheme.syndromeFont,\n          nodeVal: graphScheme.nodeVal,\n          nodeRelSize: graphScheme.nodeRelSize,\n          scaleFont: graphScheme.scaleFont\n        };\n        nodes.push(node);\n        link1.source = node.name;\n        ids.add(node.name);\n      } else {\n        link1.source = source.properties.name;\n      }\n\n      let target = row.get('g');\n\n      if (!ids.has(target.properties.name)) {\n        let node = {\n          id: target.identity,\n          name: target.properties.name,\n          nodeType: 'Gene',\n          nodeColor: graphScheme.geneNode,\n          fontColor: graphScheme.geneFont,\n          nodeVal: graphScheme.nodeVal,\n          nodeRelSize: graphScheme.nodeRelSize,\n          scaleFont: graphScheme.scaleFont\n        };\n        nodes.push(node);\n        link1.target = node.name;\n        ids.add(node.name);\n      } else {\n        link1.target = target.properties.name;\n      }\n\n      links.push(link1); // Do not push duplicate links\n\n      console.log(\"link\", link1);\n      let link2 = {\n        source: '',\n        target: ''\n      };\n      link2.source = link1.target;\n      target = row.get('o');\n\n      if (!ids.has(target.properties.name)) {\n        let node = {\n          id: target.identity,\n          name: target.properties.name,\n          nodeType: 'Oragn',\n          nodeColor: graphScheme.organNode,\n          fontColor: graphScheme.organFont,\n          nodeVal: graphScheme.nodeVal,\n          nodeRelSize: graphScheme.nodeRelSize,\n          scaleFont: graphScheme.scaleFont\n        };\n        nodes.push(node);\n        link2.target = node.name;\n        ids.add(node.name);\n      } else {\n        link2.target = target.properties.name;\n      }\n\n      links.push(link2);\n    });\n    console.log(nodes);\n    console.log(links);\n    console.log('Data loaded');\n    session.close();\n    console.log('nodes', nodes);\n    onData({\n      nodes,\n      links\n    });\n  } catch (e) {\n    throw e;\n  } finally {\n    await session.close();\n  }\n};","map":{"version":3,"names":["ArrayToStr","loadGeneData","driver","genes","organs","FinalVerdict","graphScheme","onData","console","log","str_genes","str_organs","whereCLAUSE","finalVerdict","query","session","res","run","ids","Set","nodes","links","records","forEach","row","link","source","target","get","has","properties","name","node","id","identity","nodeType","nodeColor","geneNode","fontColor","geneFont","nodeVal","nodeRelSize","scaleFont","push","add","organNode","organFont","close","e","loadOrganData","verified","loadSyndromeGeneData","syndromes","str_syndrome","syndromeNode","syndromeFont","nameType","loadSyndromeOrganData","loadSyndromeGeneOrganData","str_syndromes","link1","link2"],"sources":["/Users/zack/src/_-MUSC/gene-graph-MUSC/src/tools/grapgdata.ts"],"sourcesContent":["\nimport { GraphScheme, Force2DData, ArrayToStr } from '../tools/graphtools'\nimport { Driver }  from  'neo4j-driver'\n\nexport const  loadGeneData = async (driver: Driver | undefined,\n    genes: string[],\n    organs: string[],\n    FinalVerdict: string,\n    graphScheme : GraphScheme,\n    onData:(data: Force2DData)=> void) => {\n    console.log('enter - loadData')\n    if (driver == null) {\n        console.log('Driver not loaded')\n        return \n    }\n\n    const str_genes = ArrayToStr(genes)\n    const str_organs = ArrayToStr(organs)\n\n    let whereCLAUSE = ''\n    \n    if ( finalVerdict === 'Confirmed' ) {\n        whereCLAUSE = 'WHERE g.FinalVerdict = 1'\n    } else if ( FinalVerdict === 'Maybe') {\n        whereCLAUSE = 'WHERE g.FinalVerdict = 9'\n    } else {\n        whereCLAUSE = 'WHERE g.FinalVerdict in [0,1,9]'\n    }\n    console.log(genes, organs)\n    if ( str_genes !== '') {\n        whereCLAUSE = whereCLAUSE + ' AND g.name IN ' + str_genes\n    }\n    if ( str_organs !== '') {\n        whereCLAUSE = whereCLAUSE + ' AND o.name IN ' + str_organs\n    }\n    const query = `MATCH (g:MGene)-[r]->(o:Organ) ${whereCLAUSE} RETURN g,r,o`\n\n    console.log('Gene->Orgran', query)\n\n    let session = driver.session()\n\n    try {\n        let res = await session.run(query)\n        let ids = new  Set<string>()\n        let nodes : any[] = []\n        let links : any[] = []\n        res.records.forEach(row => {\n            let link  = { source: '', target: ''}\n            const source = row.get('g') \n            if (!ids.has(source.properties.name)) {\n                let node = { \n                    id: source.identity,\n                    name: source.properties.name,\n                    nodeType: 'Gene',\n                    nodeColor: graphScheme.geneNode, \n                    fontColor: graphScheme.geneFont,\n                    nodeVal: graphScheme.nodeVal,\n                    nodeRelSize: graphScheme.nodeRelSize,\n                    scaleFont: graphScheme.scaleFont\n                }\n                nodes.push(node) \n                link.source = node.name\n                ids.add(node.name)\n            } else {\n                link.source = source.properties.name\n            }\n        \n            const target = row.get('o') \n            if (!ids.has(target.properties.name)) {\n                let node = { \n                    id: target.identity,\n                    name: target.properties.name,\n                    nodeType: 'Organ',\n                    nodeColor: graphScheme.organNode,\n                    fontColor: graphScheme.organFont,\n                    nodeVal: graphScheme.nodeVal,\n                    nodeRelSize: graphScheme.nodeRelSize,\n                    scaleFont: graphScheme.scaleFont\n                }\n                nodes.push(node) \n                link.target = node.name\n                ids.add(node.name)\n            } else {\n                link.target = target.properties.name\n            }\n\n            links.push(link)\n\n        })\n        console.log(nodes) \n        console.log(links) \n        console.log('Data loaded')\n        session.close();\n        console.log('nodes', nodes)\n        onData( {nodes, links} )\n    } catch (e) {\n        throw e\n    }\n    finally {\n        await session.close()\n\n    }\n}\n\n\nexport const  loadOrganData = async (driver: Driver | undefined,\n    verified: boolean,\n    genes: string[],\n    organs: string[],\n    graphScheme : GraphScheme,\n    onData:(data: Force2DData)=> void) => {\n    console.log('enter - loadData')\n    if (driver == null) {\n        console.log('Driver not loaded')\n        return \n    }\n\n    const str_genes = ArrayToStr(genes)\n    const str_organs = ArrayToStr(organs)\n\n    let whereCLAUSE = ''\n    \n    if ( verified ) {\n        whereCLAUSE = 'WHERE g.FinalVerdict = 1'\n    } else {\n        whereCLAUSE = 'WHERE g.FinalVerdict = 0'\n    }\n    console.log(genes, organs)\n    if ( str_genes !== '') {\n        whereCLAUSE = whereCLAUSE + ' AND g.name IN ' + str_genes\n    }\n    if ( str_organs !== '') {\n        whereCLAUSE = whereCLAUSE + ' AND o.name IN ' + str_organs\n    }\n    const query = `MATCH (g:MGene)-[r]->(o:Organ) ${whereCLAUSE} RETURN g,r,o`\n\n    console.log('Gene->Orgran', query)\n\n    let session = driver.session()\n\n    try {\n        let res = await session.run(query)\n        let ids = new  Set<string>()\n        let nodes : any[] = []\n        let links : any[] = []\n        res.records.forEach(row => {\n            let link  = { source: '', target: ''}\n        \n            const source = row.get('o') \n            if (!ids.has(source.properties.name)) {\n                let node = { \n                    id: source.identity,\n                    name: source.properties.name,\n                    nodeType: 'Organ',\n                    nodeColor: graphScheme.organNode,\n                    fontColor: graphScheme.organFont,\n                    nodeVal: graphScheme.nodeVal,\n                    nodeRelSize: graphScheme.nodeRelSize,\n                    scaleFont: graphScheme.scaleFont\n                }\n                nodes.push(node) \n                link.source = node.name\n                ids.add(node.name)\n            } else {\n                link.source = source.properties.name\n            }\n\n            const target = row.get('g') \n            if (!ids.has(target.properties.name)) {\n                let node = { \n                    id: target.identity,\n                    name: target.properties.name,\n                    nodeType: 'Gene',\n                    nodeColor: graphScheme.geneNode, \n                    fontColor: graphScheme.geneFont,\n                    nodeVal: graphScheme.nodeVal,\n                    nodeRelSize: graphScheme.nodeRelSize,\n                    scaleFont: graphScheme.scaleFont\n                }\n                nodes.push(node) \n                link.target = node.name\n                ids.add(node.name)\n            } else {\n                link.target = target.properties.name\n            }\n            links.push(link)\n\n        })\n        console.log('Data loaded')\n        console.log(nodes) \n        console.log(links) \n        session.close();\n        onData( {nodes, links} )\n    } catch (e) {\n        throw e\n    }\n    finally {\n        await session.close()\n\n    }\n}\n\nexport const  loadSyndromeGeneData = async (driver: Driver | undefined,\n    verified: boolean,\n    syndromes: string[],\n    genes: string[],\n    graphScheme : GraphScheme,\n    onData:(data: Force2DData)=> void) => {\n    console.log('enter - loadData')\n    if (driver == null) {\n        console.log('Driver not loaded')\n        return \n    }\n\n    const str_genes = ArrayToStr(genes)\n    const str_syndrome = ArrayToStr(syndromes)\n\n    let whereCLAUSE = ''\n    \n    if ( verified ) {\n        whereCLAUSE = 'WHERE g.FinalVerdict = 1'\n    } else {\n        whereCLAUSE = 'WHERE g.FinalVerdict = 0'\n    }\n    console.log(genes, genes)\n    if ( str_genes !== '') {\n        whereCLAUSE = whereCLAUSE + ' AND g.name IN ' + str_genes\n    }\n    if ( str_syndrome !== '') {\n        whereCLAUSE = whereCLAUSE + ' AND s.name IN ' + str_syndrome\n    }\n\n    const query = `MATCH (g:MGene)-[r]->(s:Syndrome) ${whereCLAUSE} RETURN g,r,s`\n\n    console.log('Syndrome->Gene', query)\n\n    let session = driver.session()\n\n    try {\n        let res = await session.run(query)\n        let ids = new  Set<string>()\n        let nodes : any[] = []\n        let links : any[] = []\n        res.records.forEach(row => {\n            let link  = { source: '', target: ''}\n        \n            const source = row.get('s') \n            if (!ids.has(source.properties.name)) {\n                let node = { \n                    id: source.identity,\n                    name: source.properties.name,\n                    nodeType: 'Syndrome',\n                    nodeColor: graphScheme.syndromeNode,\n                    fontColor: graphScheme.syndromeFont,\n                    nodeVal: graphScheme.nodeVal,\n                    nodeRelSize: graphScheme.nodeRelSize,\n                    scaleFont: graphScheme.scaleFont\n                }\n                nodes.push(node) \n                link.source = node.name\n                ids.add(node.name)\n            } else {\n                link.source = source.properties.name\n            }\n\n           let target = row.get('g') \n            if (!ids.has(target.properties.name)) {\n                let node = { \n                    id: target.identity,\n                    name: target.properties.name,\n                    nameType: 'Gene',\n                    nodeColor: graphScheme.geneNode, \n                    fontColor: graphScheme.geneFont,\n                    nodeVal: graphScheme.nodeVal,\n                    nodeRelSize: graphScheme.nodeRelSize,\n                    scaleFont: graphScheme.scaleFont\n                }\n                nodes.push(node) \n                link.target = node.name\n                ids.add(node.name)\n            } else {\n                link.target = target.properties.name\n            }\n            links.push(link)\n\n        })\n        console.log(nodes) \n        console.log(links) \n        console.log('Data loaded')\n        session.close();\n        console.log('nodes', nodes)\n        onData( {nodes, links} )\n    } catch (e) {\n        throw e\n    }\n    finally {\n        await session.close()\n\n    }\n}\n\nexport const  loadSyndromeOrganData = async (\n    driver: Driver | undefined,\n    verified: boolean,\n    syndromes: string[],\n    organs: string[],\n    graphScheme : GraphScheme,\n    onData:(data: Force2DData)=> void) => {\n    console.log('enter - loadData')\n    if (driver == null) {\n        console.log('Driver not loaded')\n        return \n    }\n\n    const str_organs = ArrayToStr(organs)\n    const str_syndrome = ArrayToStr(syndromes)\n\n    let whereCLAUSE = ''\n    \n    if ( verified ) {\n        whereCLAUSE = 'WHERE g.FinalVerdict = 1'\n    } else {\n        whereCLAUSE = 'WHERE g.FinalVerdict = 0'\n    }\n    console.log(organs, organs)\n    if ( str_organs !== '') {\n        whereCLAUSE = whereCLAUSE + ' AND o.name IN ' + str_organs\n    }\n    if ( str_syndrome !== '') {\n        whereCLAUSE = whereCLAUSE + ' AND s.name IN ' + str_syndrome\n    }\n\n    const query = `MATCH (g:MGene)-[r]->(s:Syndrome), (g:MGene)-[r2]->(o:Organ) ${whereCLAUSE} RETURN o,r2,s`\n\n    console.log('Syndrome->Gene', query)\n\n    let session = driver.session()\n\n    try {\n        let res = await session.run(query)\n        let ids = new  Set<string>()\n        let nodes : any[] = []\n        let links : any[] = []\n        res.records.forEach(row => {\n            let link  = { source: '', target: ''}\n            const target = row.get('o') \n            if (!ids.has(target.properties.name)) {\n                let node = { \n                    id: target.identity,\n                    name: target.properties.name,\n                    nodeType: 'Organ',\n                    nodeColor: graphScheme.organNode, \n                    fontColor: graphScheme.organFont,\n                    nodeVal: graphScheme.nodeVal,\n                    nodeRelSize: graphScheme.nodeRelSize,\n                    scaleFont: graphScheme.scaleFont\n                }\n                nodes.push(node) \n                link.target = node.name\n                ids.add(node.name)\n            } else {\n                link.target = target.properties.name\n            }\n        \n            const source = row.get('s') \n            if (!ids.has(source.properties.name)) {\n                let node = { \n                    id: source.identity,\n                    name: source.properties.name,\n                    nameType: 'Syndrome',\n                    nodeColor: graphScheme.syndromeNode,\n                    fontColor: graphScheme.syndromeFont,\n                    nodeVal: graphScheme.nodeVal,\n                    nodeRelSize: graphScheme.nodeRelSize,\n                    scaleFont: graphScheme.scaleFont\n                }\n                nodes.push(node) \n                link.source = node.name\n                ids.add(node.name)\n            } else {\n                link.source = source.properties.name\n            }\n\n            links.push(link)\n\n        })\n        console.log(nodes) \n        console.log(links) \n        console.log('Data loaded')\n        session.close();\n        console.log('nodes', nodes)\n        onData( {nodes, links} )\n    } catch (e) {\n        throw e\n    }\n    finally {\n        await session.close()\n\n    }\n}\n\nexport const  loadSyndromeGeneOrganData = async (\n    driver: Driver | undefined,\n    verified: boolean,\n    syndromes: string[],\n    genes: string[],\n    organs: string[],\n    graphScheme : GraphScheme,\n    onData:(data: Force2DData)=> void) => {\n    console.log('enter - loadData')\n    if (driver == null) {\n        console.log('Driver not loaded')\n        return \n    }\n\n    const str_syndromes = ArrayToStr(syndromes)\n    const str_genes = ArrayToStr(genes)\n    const str_organs = ArrayToStr(organs)\n\n    let whereCLAUSE = ''\n    \n    if ( verified ) {\n        whereCLAUSE = 'WHERE g.FinalVerdict = 1'\n    } else {\n        whereCLAUSE = 'WHERE g.FinalVerdict = 0'\n    }\n    console.log(organs, organs)\n    if ( str_organs !== '') {\n        whereCLAUSE = whereCLAUSE + ' AND o.name IN ' + str_organs\n    }\n    if ( str_syndromes !== '') {\n        whereCLAUSE = whereCLAUSE + ' AND s.name IN ' + str_syndromes\n    }\n    if ( str_genes !== '') {\n        whereCLAUSE = whereCLAUSE + ' AND g.name IN ' + str_genes\n    }\n\n    const query = \n        `MATCH (g:MGene)-[r]->(s:Syndrome), (g:MGene)-[r2]->(o:Organ) ${whereCLAUSE} RETURN g,o,s`\n\n    console.log('Syndrome->Gene-Organ', query)\n\n    let session = driver.session()\n\n    try {\n        let res = await session.run(query)\n        let ids = new  Set<string>()\n        let nodes : any[] = []\n        let links : any[] = []\n        res.records.forEach(row => {\n            let link1  = { source: '', target: ''}\n            let source = row.get('s') \n            if (!ids.has(source.properties.name)) {\n                let node = { \n                    id: source.identity,\n                    name: source.properties.name,\n                    nodeType: 'Symdrome',\n                    nodeColor: graphScheme.syndromeNode,\n                    fontColor: graphScheme.syndromeFont,\n                    nodeVal: graphScheme.nodeVal,\n                    nodeRelSize: graphScheme.nodeRelSize,\n                    scaleFont: graphScheme.scaleFont\n                }\n                nodes.push(node) \n                link1.source = node.name\n                ids.add(node.name)\n            } else {\n                link1.source = source.properties.name\n            }\n\n            let target = row.get('g') \n            if (!ids.has(target.properties.name)) {\n                let node = { \n                    id: target.identity,\n                    name: target.properties.name,\n                    nodeType: 'Gene',\n                    nodeColor: graphScheme.geneNode, \n                    fontColor: graphScheme.geneFont,\n                    nodeVal: graphScheme.nodeVal,\n                    nodeRelSize: graphScheme.nodeRelSize,\n                    scaleFont: graphScheme.scaleFont\n                }\n                nodes.push(node) \n                link1.target = node.name\n                ids.add(node.name)\n            } else {\n                link1.target = target.properties.name\n            }\n            links.push(link1)\n            // Do not push duplicate links\n            console.log(\"link\",link1)\n            let link2 = { source: '', target: ''}\n\n            link2.source = link1.target\n            target = row.get('o') \n            if (!ids.has(target.properties.name)) {\n                let node = { \n                    id: target.identity,\n                    name: target.properties.name,\n                    nodeType: 'Oragn',\n                    nodeColor: graphScheme.organNode,\n                    fontColor: graphScheme.organFont,\n                    nodeVal: graphScheme.nodeVal,\n                    nodeRelSize: graphScheme.nodeRelSize,\n                    scaleFont: graphScheme.scaleFont\n                }\n                nodes.push(node) \n                link2.target = node.name\n                ids.add(node.name)\n            } else {\n                link2.target = target.properties.name\n            }\n\n            links.push(link2)\n\n        })\n        console.log(nodes) \n        console.log(links) \n        console.log('Data loaded')\n        session.close();\n        console.log('nodes', nodes)\n        onData( {nodes, links} )\n    } catch (e) {\n        throw e\n    }\n    finally {\n        await session.close()\n\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}