{"ast":null,"code":"var _jsxFileName = \"/Users/zack/src/_-MUSC/gene-graph-MUSC/src/components/BaseGraph.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useContext, useEffect, useRef } from 'react';\nimport { Neo4jContext } from 'use-neo4j';\nimport ForceGraph2D from 'react-force-graph-2d';\nimport { useNavigate } from 'react-router-dom';\nimport { paintNode } from '../tools/graphtools';\nimport { defaultGraphScheme } from '../tools/graphtools';\nimport IconButton from '@mui/material/IconButton';\nimport CloseIcon from '@mui/icons-material/Close';\nimport { loadGeneData, loadOrganData, loadDiseaseData, loadSyndromeDiseaseData, loadSyndromeGeneDiseaseData } from '../tools/graphdata';\nimport { Box, Card, CardContent, CardHeader } from '@mui/material';\nimport ReactDOM from 'react-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst drawerWidth = 350;\nexport const BaseGraph = _ref => {\n  _s();\n\n  let {\n    drawerOpen,\n    width = 200,\n    height = 300,\n    name,\n    genes,\n    organs,\n    syndromes,\n    diseases,\n    finalVerdict,\n    graphScheme,\n    enableHover,\n    enableZoom,\n    onClick,\n    onMouseOver,\n    onMouseOut\n  } = _ref;\n  console.log('enter - BaseGraph', name);\n  const [nodeHover, setNodeHover] = useState(null); // const [nodePosition, setNodePosition] = useState<{x:number, y:number}>({x:0 , y:0})\n\n  const handleCardClose = () => {\n    setNodeHover(null);\n  };\n\n  const handleMouseMove = e => {\n    let position = {\n      x: 0,\n      y: 0\n    };\n    position.x = e === null || e === void 0 ? void 0 : e.pageX;\n    position.y = e === null || e === void 0 ? void 0 : e.pageY; // setNodePosition(position)\n  };\n\n  const handleNodeHover = (node, previousNode) => {\n    console.log('handleNodeHover - enableHover', enableHover);\n    console.log('handleNodeHover - nodeHover', nodeHover);\n    console.log('handleNodeHover - node', node);\n\n    if (enableHover && nodeHover === null && node) {\n      console.log('handleNodeHover - Enter', node);\n      setNodeHover(node);\n    }\n  };\n\n  const handleClick = event => {\n    console.log('onClick');\n    if (onClick) onClick();\n  };\n\n  const handleNodeClick = (node, event) => {\n    console.log('node', node);\n    console.log('evet', event);\n  };\n\n  const navigate = useNavigate();\n\n  const handleNodeTypeClick = nodeType => {\n    navigate(`/graph/${nodeType}`);\n  };\n\n  const getWidth = box => {\n    var _document$getElementB;\n\n    let number = Number((_document$getElementB = document.getElementById(`graph-box${box}`)) === null || _document$getElementB === void 0 ? void 0 : _document$getElementB.offsetWidth);\n    console.log('getWidht', number);\n\n    if (typeof number === 'number' && number === number) {\n      console.log('getWidth is a number', number);\n      return number - 12;\n    } else {\n      console.log('getWidth NaN', number);\n      return 200;\n    }\n  };\n\n  const renderHover = () => {\n    //Check if nodeHover is set, if then render card\n    if (nodeHover) {\n      if (nodeHover.nodeType === 'gene') {\n        const _node = nodeHover;\n        return /*#__PURE__*/ReactDOM.createPortal( /*#__PURE__*/_jsxDEV(Box, {\n          className: \"nodeCard\",\n          sx: {\n            position: \"absolute\",\n            margin: \"2px 0px 2px 0px\",\n            left: 20,\n            top: 80,\n            width: 300,\n            height: 300\n          },\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            sx: {\n              border: 0.1,\n              minWidth: 275,\n              borderColor: 'primary.main'\n            },\n            children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n              title: _node.name // subheader={(nodeHover as CustomNodeObject).nodeType}\n              ,\n              action: /*#__PURE__*/_jsxDEV(IconButton, {\n                onClick: handleCardClose,\n                \"aria-label\": \"close\",\n                children: [\" \", /*#__PURE__*/_jsxDEV(CloseIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 144,\n                  columnNumber: 96\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 144,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n              children: /*#__PURE__*/_jsxDEV(Box, {\n                children: [/*#__PURE__*/_jsxDEV(BaseGraph, {\n                  drawerOpen: false,\n                  width: getWidth(1),\n                  height: 300 //name={((nodeHover as CustomNodeObject).nodeType as GraphName)}\n                  //Do we only want to show the disease grapgh each time?\n                  ,\n                  name: \"disease\",\n                  genes: [_node.name],\n                  organs: [],\n                  syndromes: [],\n                  diseases: [],\n                  finalVerdict: \"Confirmed\",\n                  graphScheme: defaultGraphScheme,\n                  enableZoom: false,\n                  onClick: () => handleNodeTypeClick(_node.nodeType)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 151,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                    children: \" Name: \"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 168,\n                    columnNumber: 41\n                  }, this), \"  \", _node.fullName]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 167,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                    children: \" Alternate Names : \"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 171,\n                    columnNumber: 41\n                  }, this), _node.altName]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 170,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                    children: \"  Description: \"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 175,\n                    columnNumber: 41\n                  }, this), _node.description]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 174,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 150,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 21\n        }, this), document.body);\n      } else if (nodeHover.nodeType === 'organ') {\n        const _node = nodeHover;\n        return /*#__PURE__*/ReactDOM.createPortal( /*#__PURE__*/_jsxDEV(Box, {\n          className: \"nodeCard\",\n          sx: {\n            position: \"absolute\",\n            margin: \"2px 0px 2px 0px\",\n            left: 20,\n            top: 80,\n            width: 250,\n            height: 300\n          },\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            sx: {\n              border: 1,\n              minWidth: 275,\n              borderColor: 'primary.main'\n            },\n            children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n              title: _node.name // subheader={(nodeHover as CustomNodeObject).nodeType}\n              ,\n              action: /*#__PURE__*/_jsxDEV(IconButton, {\n                onClick: handleCardClose,\n                \"aria-label\": \"close\",\n                children: /*#__PURE__*/_jsxDEV(CloseIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 213,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 209,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n              children: /*#__PURE__*/_jsxDEV(Box, {\n                children: /*#__PURE__*/_jsxDEV(BaseGraph, {\n                  drawerOpen: false,\n                  width: getWidth(1),\n                  height: 300,\n                  name: nodeHover.nodeType,\n                  genes: [],\n                  organs: [nodeHover.name],\n                  syndromes: [],\n                  diseases: [],\n                  finalVerdict: \"Confirmed\",\n                  graphScheme: defaultGraphScheme,\n                  enableZoom: false,\n                  onClick: () => handleNodeTypeClick(nodeHover.nodeType)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 219,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 218,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 21\n        }, this), document.body);\n      } else if (nodeHover.nodeType === 'disease') {\n        const _node = nodeHover;\n        return /*#__PURE__*/ReactDOM.createPortal( /*#__PURE__*/_jsxDEV(Box, {\n          className: \"nodeCard\",\n          sx: {\n            position: \"absolute\",\n            margin: \"2px 0px 2px 0px\",\n            left: 20,\n            top: 80,\n            width: 250,\n            height: 300\n          },\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            sx: {\n              border: 1,\n              minWidth: 275,\n              borderColor: 'primary.main'\n            },\n            children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n              title: nodeHover.name // subheader={(nodeHover as CustomNodeObject).nodeType}\n              ,\n              action: /*#__PURE__*/_jsxDEV(IconButton, {\n                onClick: handleCardClose,\n                \"aria-label\": \"close\",\n                children: [\" \", /*#__PURE__*/_jsxDEV(CloseIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 264,\n                  columnNumber: 96\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 264,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n              children: /*#__PURE__*/_jsxDEV(Box, {\n                children: /*#__PURE__*/_jsxDEV(BaseGraph, {\n                  drawerOpen: false,\n                  width: getWidth(1),\n                  height: 300,\n                  name: _node.nodeType,\n                  genes: [],\n                  organs: [],\n                  syndromes: [],\n                  diseases: [nodeHover.name],\n                  finalVerdict: \"Confirmed\",\n                  graphScheme: defaultGraphScheme,\n                  enableZoom: false,\n                  onClick: () => handleNodeTypeClick(nodeHover.nodeType)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 271,\n                  columnNumber: 33\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 270,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 21\n        }, this), document.body);\n      } else if (nodeHover.nodeType === 'syndrome') {\n        const _node = nodeHover;\n        console.log('hereditaryType', _node.hereditaryType);\n        return /*#__PURE__*/ReactDOM.createPortal( /*#__PURE__*/_jsxDEV(Box, {\n          className: \"nodeCard\",\n          sx: {\n            position: \"absolute\",\n            margin: \"2px 0px 2px 0px\",\n            left: 20,\n            top: 80,\n            width: 250,\n            height: 300\n          },\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            sx: {\n              border: 1,\n              minWidth: 275,\n              borderColor: 'primary.main'\n            },\n            children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n              title: nodeHover.name // subheader={(nodeHover as CustomNodeObject).nodeType}\n              ,\n              action: /*#__PURE__*/_jsxDEV(IconButton, {\n                onClick: handleCardClose,\n                \"aria-label\": \"close\",\n                children: [\" \", /*#__PURE__*/_jsxDEV(CloseIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 317,\n                  columnNumber: 96\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 317,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 313,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n              children: /*#__PURE__*/_jsxDEV(Box, {\n                children: [/*#__PURE__*/_jsxDEV(BaseGraph, {\n                  drawerOpen: false,\n                  width: getWidth(1),\n                  height: 300,\n                  name: _node.nodeType,\n                  genes: [],\n                  organs: [],\n                  syndromes: [_node.name],\n                  diseases: [],\n                  finalVerdict: \"Confirmed\",\n                  graphScheme: defaultGraphScheme,\n                  enableZoom: false,\n                  onClick: () => handleNodeTypeClick(_node.nodeType)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 324,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                    children: \" Inheritance Type: \"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 340,\n                    columnNumber: 33\n                  }, this), \"  \", _node.hereditaryType]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 339,\n                  columnNumber: 29\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 323,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 322,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 21\n        }, this), document.body);\n      }\n    }\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  };\n\n  if (drawerOpen) {\n    width = width - drawerWidth;\n  }\n\n  const context = useContext(Neo4jContext),\n        driver = context.driver;\n  const [data, setData] = useState({\n    nodes: [],\n    links: []\n  });\n  useEffect(() => {\n    console.log('loading data ...');\n\n    const onData = data => {\n      console.log(data);\n      setData(data);\n    };\n\n    console.log('Graph name', name);\n\n    switch (name) {\n      case 'gene':\n        {\n          loadGeneData(driver, genes, organs, finalVerdict, graphScheme, onData);\n          break;\n        }\n\n      case 'organ':\n        {\n          loadOrganData(driver, genes, organs, finalVerdict, graphScheme, onData);\n          break;\n        }\n\n      case 'disease':\n        {\n          loadDiseaseData(driver, diseases, genes, finalVerdict, graphScheme, onData);\n          break;\n        }\n\n      case 'syndrome-disease':\n        {\n          loadSyndromeDiseaseData(driver, syndromes, organs, finalVerdict, graphScheme, onData);\n          break;\n        }\n\n      case 'syndrome-gene-disease':\n        {\n          loadSyndromeGeneDiseaseData(driver, syndromes, organs, finalVerdict, graphScheme, onData);\n          break;\n        }\n    }\n  }, [name, genes, organs, diseases, syndromes, finalVerdict, graphScheme]);\n  const forceRef = useRef();\n\n  let handleEngineStop = () => {\n    if (forceRef.current) {\n      forceRef.current.zoomToFit(400);\n    }\n  };\n\n  if (!graphScheme.fitViewPort) {\n    if (forceRef.current) {}\n  }\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    id: \"graph-box\",\n    sx: {\n      padding: '2px'\n    },\n    onClick: handleClick,\n    onMouseMove: handleMouseMove,\n    onMouseOver: e => {\n      if (onMouseOver) onMouseOver();\n    },\n    onMouseOut: e => {\n      if (onMouseOut) onMouseOut();\n    },\n    children: [renderHover(), /*#__PURE__*/_jsxDEV(ForceGraph2D, {\n      ref: forceRef,\n      width: width,\n      height: height,\n      graphData: data,\n      nodeId: \"name\",\n      nodeColor: \"nodeColor\",\n      nodeLabel: \"name\",\n      linkDirectionalArrowRelPos: 1,\n      linkDirectionalArrowLength: 2,\n      cooldownTicks: 100,\n      onEngineStop: handleEngineStop,\n      nodeVal: graphScheme.nodeVal,\n      nodeRelSize: graphScheme.nodeRelSize,\n      nodeCanvasObjectMode: () => 'after',\n      nodeCanvasObject: paintNode,\n      onNodeHover: handleNodeHover,\n      onNodeClick: handleNodeClick,\n      enableZoomInteraction: enableZoom\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 424,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 409,\n    columnNumber: 9\n  }, this);\n};\n\n_s(BaseGraph, \"GTKi+W8kyXhkKre/0riLOJtto/A=\", false, function () {\n  return [useNavigate];\n});\n\n_c = BaseGraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"BaseGraph\");","map":{"version":3,"names":["useState","useContext","useEffect","useRef","Neo4jContext","ForceGraph2D","useNavigate","paintNode","defaultGraphScheme","IconButton","CloseIcon","loadGeneData","loadOrganData","loadDiseaseData","loadSyndromeDiseaseData","loadSyndromeGeneDiseaseData","Box","Card","CardContent","CardHeader","ReactDOM","drawerWidth","BaseGraph","drawerOpen","width","height","name","genes","organs","syndromes","diseases","finalVerdict","graphScheme","enableHover","enableZoom","onClick","onMouseOver","onMouseOut","console","log","nodeHover","setNodeHover","handleCardClose","handleMouseMove","e","position","x","y","pageX","pageY","handleNodeHover","node","previousNode","handleClick","event","handleNodeClick","navigate","handleNodeTypeClick","nodeType","getWidth","box","number","Number","document","getElementById","offsetWidth","renderHover","_node","createPortal","margin","left","top","border","minWidth","borderColor","fullName","altName","description","body","hereditaryType","context","driver","data","setData","nodes","links","onData","forceRef","handleEngineStop","current","zoomToFit","fitViewPort","padding","nodeVal","nodeRelSize"],"sources":["/Users/zack/src/_-MUSC/gene-graph-MUSC/src/components/BaseGraph.tsx"],"sourcesContent":["import { useState, useContext, useEffect, useRef, MutableRefObject } from 'react'\nimport { Neo4jContext } from 'use-neo4j'\nimport ForceGraph2D, { ForceGraphMethods, NodeObject }  from 'react-force-graph-2d'\nimport { useNavigate } from 'react-router-dom'\nimport { CustomNodeObject,  Force2DData, GraphName, GraphScheme, paintNode, GeneNodeObject, SyndromeNodeObject } from '../tools/graphtools'\nimport { defaultGraphScheme } from '../tools/graphtools';\nimport IconButton from '@mui/material/IconButton';\nimport CloseIcon from '@mui/icons-material/Close';\n\nimport { \n    loadGeneData,\n    loadOrganData,\n    loadDiseaseData,\n    loadSyndromeDiseaseData,\n    loadSyndromeGeneDiseaseData\n } from '../tools/graphdata'\nimport { Box, Card, CardContent, CardHeader } from '@mui/material'\nimport ReactDOM from 'react-dom'\n\n\nconst drawerWidth = 350;\n\ntype BaseGraphProps = {\n    drawerOpen: boolean\n    width: number\n    height: number\n    name: GraphName\n    genes: string[]\n    organs: string[]\n    syndromes: string[]\n    diseases: string[]\n    finalVerdict: string\n    graphScheme: GraphScheme\n    enableHover?: boolean\n    enableZoom?: boolean\n    onClick?: () => void\n    onMouseOver?: () => void  \n    onMouseOut?: () => void\n}\nexport const BaseGraph = ( { \n    drawerOpen, \n    width=200, \n    height=300, \n    name,  \n    genes, \n    organs, \n    syndromes,\n    diseases,\n    finalVerdict,\n    graphScheme,\n    enableHover,\n    enableZoom,\n    onClick,\n    onMouseOver,\n    onMouseOut\n} : BaseGraphProps ) => {\n\n    console.log('enter - BaseGraph', name)\n    \n    const [nodeHover, setNodeHover] = useState<NodeObject|null>(null)\n    // const [nodePosition, setNodePosition] = useState<{x:number, y:number}>({x:0 , y:0})\n\n    const handleCardClose = () => {\n        setNodeHover(null);\n      };\n\n    const handleMouseMove: React.MouseEventHandler<HTMLDivElement> = (e)  => {\n        let position: {x: number, y: number} = {x:0, y:0}\n        position.x = e?.pageX\n        position.y = e?.pageY\n        // setNodePosition(position)\n    }\n\n    const handleNodeHover = (node: NodeObject | null, previousNode: NodeObject | null) => {\n        console.log('handleNodeHover - enableHover', enableHover )\n        console.log('handleNodeHover - nodeHover', nodeHover )\n        console.log('handleNodeHover - node', node)\n        if ( enableHover && nodeHover === null && node   ) {\n            console.log('handleNodeHover - Enter', node)\n            setNodeHover(node)\n        }  \n    }\n\n    const handleClick:React.MouseEventHandler<HTMLDivElement> = (event) => {\n        console.log('onClick')\n        if (onClick)\n            onClick()\n\n    }\n\n    const handleNodeClick = (node: NodeObject, event: MouseEvent  ) => {\n        console.log('node', node)\n        console.log('evet', event)\n    }\n\n    const navigate = useNavigate()\n\n    const handleNodeTypeClick = (nodeType : string) => {\n        navigate(`/graph/${nodeType}`)\n    }\n\n    const getWidth = (box: number) => {\n        let number = Number(document.getElementById(`graph-box${box}`)?.offsetWidth )\n        console.log('getWidht', number)\n        if ( typeof number === 'number' && number === number) {\n            console.log('getWidth is a number', number)\n            return number-12\n        } else {\n            console.log('getWidth NaN', number)\n            return 200\n        }\n    }\n\n    const renderHover = () => {\n        //Check if nodeHover is set, if then render card\n        if (nodeHover) {\n            if ((nodeHover as GeneNodeObject).nodeType === 'gene') {\n                const _node = nodeHover as GeneNodeObject; \n                return (ReactDOM.createPortal(\n                    <Box\n                        className=\"nodeCard\"\n                        sx={{\n                            position: \"absolute\",\n                            margin: \"2px 0px 2px 0px\",\n                            left: 20,\n                            top: 80,\n                            width: 300,\n                            height: 300\n                            \n                        }}\n                    >\n                        <Card \n                            sx={{ \n                                border:0.1,\n                                minWidth:275, \n                                borderColor: 'primary.main'\n                            }}\n                        >\n\n                            <CardHeader \n                                title={_node.name}\n                                // subheader={(nodeHover as CustomNodeObject).nodeType}\n                                action={\n                                    <IconButton onClick={handleCardClose}  aria-label=\"close\"> <CloseIcon />\n                                    </IconButton>\n                                }\n                            />\n                            \n                            <CardContent>\n                                <Box>\n                                    <BaseGraph\n                                        drawerOpen={false}\n                                        width={getWidth(1)}\n                                        height={300}\n                                        //name={((nodeHover as CustomNodeObject).nodeType as GraphName)}\n                                        //Do we only want to show the disease grapgh each time?\n                                        name='disease'\n                                        genes={[_node.name]}\n                                        organs={[]}\n                                        syndromes={[]}\n                                        diseases={[]}\n                                        finalVerdict='Confirmed'\n                                        graphScheme={defaultGraphScheme}\n                                        enableZoom={false}\n                                        onClick={() => handleNodeTypeClick(_node.nodeType)}\n                                    />\n                                    <p>\n                                        <b> Name: </b>  {_node.fullName}\n                                    </p>\n                                    <p>\n                                        <b> Alternate Names : </b>\n                                        {_node.altName}\n                                    </p>\n                                    <div>\n                                        <b>  Description: </b> \n                                        {_node.description}\n                                    </div>\n                                </Box>\n                            </CardContent>\n                        </Card>\n                    </Box>,\n                    document.body\n                ))\n            } else if ((nodeHover as CustomNodeObject).nodeType === 'organ'){\n                const _node = nodeHover as CustomNodeObject\n                return (ReactDOM.createPortal(\n                    <Box\n                        className=\"nodeCard\"\n                        sx={{\n                            position: \"absolute\",\n                            margin: \"2px 0px 2px 0px\",\n                            left: 20,\n                            top: 80,\n                            width: 250,\n                            height: 300\n                        }}\n                    >\n                        <Card \n                            sx={{ \n                                border:1,\n                                minWidth:275, \n                                borderColor: 'primary.main'\n                            }}\n                        >\n                            <CardHeader \n                                title={_node.name}\n                                // subheader={(nodeHover as CustomNodeObject).nodeType}\n                                action={\n                                    <IconButton \n                                        onClick={handleCardClose}\n                                        aria-label=\"close\"\n                                    >\n                                        <CloseIcon />\n                                    </IconButton>\n                                }\n                            />\n                            <CardContent>\n                                <Box>\n                                    <BaseGraph\n                                        drawerOpen={false}\n                                        width={getWidth(1)}\n                                        height={300}\n                                        name={((nodeHover as CustomNodeObject).nodeType as GraphName)}\n                                        genes={[]}\n                                        organs={[(nodeHover as CustomNodeObject).name]}\n                                        syndromes={[]}\n                                        diseases={[]}\n                                        finalVerdict='Confirmed'\n                                        graphScheme={defaultGraphScheme}\n                                        enableZoom={false}\n                                        onClick={() => handleNodeTypeClick((nodeHover as CustomNodeObject).nodeType)}\n                                    />\n                                </Box>\n                            </CardContent>\n                        </Card>\n                    </Box>,\n                    document.body\n                ))\n            } else if ((nodeHover as CustomNodeObject).nodeType === 'disease'){\n                const _node = nodeHover as CustomNodeObject\n                return (ReactDOM.createPortal(\n                    <Box\n                        className=\"nodeCard\"\n                        sx={{\n                            position: \"absolute\",\n                            margin: \"2px 0px 2px 0px\",\n                            left: 20,\n                            top: 80,\n                            width: 250,\n                            height: 300\n                        }}\n                    >\n                        <Card \n                            sx={{ \n                                border:1,\n                                minWidth:275, \n                                borderColor: 'primary.main'\n                            }}\n                        >\n                            <CardHeader \n                                title={(nodeHover as CustomNodeObject).name}\n                                // subheader={(nodeHover as CustomNodeObject).nodeType}\n                                action={\n                                    <IconButton onClick={handleCardClose}  aria-label=\"close\"> <CloseIcon />\n                                    </IconButton>\n                            }\n    \n                            />\n                            <CardContent>\n                            <Box>\n                                <BaseGraph\n                                    drawerOpen={false}\n                                    width={getWidth(1)}\n                                    height={300}\n                                    name={_node.nodeType as GraphName}\n                                    genes={[]}\n                                    organs={[]}\n                                    syndromes={[]}\n                                    diseases={[(nodeHover as CustomNodeObject).name]}\n                                    finalVerdict='Confirmed'\n                                    graphScheme={defaultGraphScheme}\n                                    enableZoom={false}\n                                    onClick={() => handleNodeTypeClick((nodeHover as CustomNodeObject).nodeType)}\n                            />\n                            </Box>\n                            </CardContent>\n                        </Card>\n                    </Box>,\n                    document.body\n                ))\n            } else if ((nodeHover as CustomNodeObject).nodeType === 'syndrome'){\n                const _node = nodeHover as SyndromeNodeObject\n                console.log('hereditaryType',_node.hereditaryType)\n\n                return (ReactDOM.createPortal(\n                    <Box\n                        className=\"nodeCard\"\n                        sx={{\n                            position: \"absolute\",\n                            margin: \"2px 0px 2px 0px\",\n                            left: 20,\n                            top: 80,\n                            width: 250,\n                            height: 300\n                        }}\n                    >\n                        <Card sx={{\n                                border:1,\n                             minWidth:275,                             \n                            borderColor: 'primary.main'\n                        }}>\n\n                            <CardHeader \n                                title={(nodeHover as CustomNodeObject).name}\n                                // subheader={(nodeHover as CustomNodeObject).nodeType}\n                                action={\n                                    <IconButton onClick={handleCardClose}  aria-label=\"close\"> <CloseIcon />\n                                    </IconButton>\n                            }\n    \n                            />\n                            <CardContent>\n                            <Box>\n                                <BaseGraph\n                                drawerOpen={false}\n                                width={getWidth(1)}\n                                height={300}\n                                name={_node.nodeType as GraphName}\n                                genes={[]}\n                                organs={[]}\n                                syndromes={[_node.name]}\n                                diseases={[]}\n                                finalVerdict='Confirmed'\n                                graphScheme={defaultGraphScheme}\n                                enableZoom={false}\n                                onClick={() => handleNodeTypeClick(_node.nodeType)}\n                            />\n                            {/* // Armando */}\n                            <p>\n                                <b> Inheritance Type: </b>  {_node.hereditaryType}\n                            </p>\n                            {/* // Aramando - end */}\n                            </Box>\n                        </CardContent>\n                    </Card>\n                </Box>,\n                document.body\n            ))\n        } \n        \n    }\n        return (<></>)\n\n    }\n\n    if (drawerOpen) {\n        width = width - drawerWidth\n    }\n    \n    const context = useContext(Neo4jContext), driver = context.driver\n    const [data, setData] =  useState<Force2DData>( {nodes: [], links: []} )\n\n    useEffect( () => {\n        console.log('loading data ...')\n        const onData = (data: Force2DData) =>{\n            console.log(data)\n            setData(data)\n        }\n        console.log('Graph name',name)\n        switch (name) {\n            case 'gene': {\n                loadGeneData(driver, genes, organs,finalVerdict, graphScheme, onData)\n                break\n            }\n            case 'organ': {\n            loadOrganData(driver, genes, organs, finalVerdict, graphScheme, onData)\n                break\n            }\n            case 'disease': {\n            loadDiseaseData(driver, diseases, genes, finalVerdict, graphScheme, onData)\n            break\n            }\n            case 'syndrome-disease': {\n                loadSyndromeDiseaseData(driver, syndromes, organs, finalVerdict, graphScheme, onData)\n                break\n            }\n            case 'syndrome-gene-disease': {\n                loadSyndromeGeneDiseaseData(driver, syndromes, organs, finalVerdict, graphScheme, onData)\n                break\n            }\n        }\n\n    },[ name, genes, organs, diseases, syndromes, finalVerdict, graphScheme] )\n    \n    const forceRef : MutableRefObject<ForceGraphMethods | undefined> = useRef()      \n\n\n    let handleEngineStop: ()=>void | undefined = () => {\n        if (forceRef.current) {\n            (forceRef.current as ForceGraphMethods).zoomToFit(400);\n        }\n    }\n    \n    if (!graphScheme.fitViewPort) {\n        if (forceRef.current) {}\n    }\n\n    return (\n        <Box id='graph-box' sx={{padding:'2px'}} \n            onClick={handleClick}\n            onMouseMove={handleMouseMove}\n            onMouseOver={(e)=>{\n                if (onMouseOver) \n                    onMouseOver()\n            }}\n            onMouseOut={(e)=>{\n                if (onMouseOut) \n                    onMouseOut()\n            }}\n            \n            \n        >\n            {renderHover()}\n            <ForceGraph2D \n                \n                ref={forceRef}\n                width={width}\n                height={height}\n                graphData={data}\n                nodeId='name'  \n                nodeColor='nodeColor' \n                nodeLabel='name' \n                linkDirectionalArrowRelPos={1} \n                linkDirectionalArrowLength={2} \n                cooldownTicks={100}\n                onEngineStop={handleEngineStop} \n                nodeVal={graphScheme.nodeVal}\n                nodeRelSize={graphScheme.nodeRelSize}\n                nodeCanvasObjectMode={() => 'after'} \n                nodeCanvasObject={paintNode}\n                onNodeHover={handleNodeHover}\n                onNodeClick={handleNodeClick}\n                enableZoomInteraction={enableZoom}\n            />\n            \n        </Box>\n    )\n}\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}