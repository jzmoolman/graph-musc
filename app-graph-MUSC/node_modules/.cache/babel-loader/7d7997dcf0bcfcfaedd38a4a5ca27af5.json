{"ast":null,"code":"export const defualtColorScheme = {\n  geneNodeColor: 'blue',\n  geneFontColor: 'white',\n  organNodeColor: 'red',\n  organFontColor: 'white',\n  syndromeNodeColor: 'yellow',\n  syndromeFontColor: 'black'\n};\nexport const paintNode = (node, ctx, GlobalScale) => {\n  const label = node.name;\n  const fontColor = node.fontColor;\n  const fontSize = 12 / 12 * 1.5;\n  const x = node.x ? node.x : 0;\n  let y = node.y ? node.y : 0;\n  const lines = label.split(' ');\n  const lineHeight = fontSize;\n  ctx.font = `${fontSize}px Sans-Serif`;\n  ctx.textAlign = 'center';\n  ctx.textBaseline = 'middle';\n  ctx.fillStyle = fontColor;\n  y = y - lineHeight * ((lines.length - 1) / 2);\n\n  for (let i = 0; i < lines.length; i++) {\n    ctx.fillText(lines[i], x, y);\n    y = y + lineHeight;\n  }\n};","map":{"version":3,"names":["defualtColorScheme","geneNodeColor","geneFontColor","organNodeColor","organFontColor","syndromeNodeColor","syndromeFontColor","paintNode","node","ctx","GlobalScale","label","name","fontColor","fontSize","x","y","lines","split","lineHeight","font","textAlign","textBaseline","fillStyle","length","i","fillText"],"sources":["/Users/zack/src/gene3/src/views/genGraph.tsx"],"sourcesContent":["\nimport { ForceGraphMethods, NodeObject }  from 'react-force-graph-2d'\n\nexport type ColorScheme = {\n    geneNodeColor: string\n    geneFontColor: string\n    organNodeColor: string\n    organFontColor: string\n    syndromeNodeColor: string\n    syndromeFontColor: string\n}\nexport const defualtColorScheme: ColorScheme = {\n        geneNodeColor: 'blue',\n        geneFontColor: 'white',\n        organNodeColor: 'red',\n        organFontColor: 'white',\n        syndromeNodeColor: 'yellow',\n        syndromeFontColor: 'black'\n}\n\ninterface exNodeObject  {\n    name: string\n    fontColor: string\n}\n\nexport const paintNode = (node: NodeObject, ctx: CanvasRenderingContext2D, GlobalScale: number) => {\n    const label = (node as exNodeObject).name\n    const fontColor = (node as exNodeObject).fontColor\n\n    const fontSize = 12 / 12 * 1.5\n\n    const x = node.x?node.x:0\n    let y = node.y?node.y:0\n\n    const lines = label.split(' ')\n    const lineHeight  = fontSize\n\n    ctx.font = `${fontSize}px Sans-Serif`;\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle'\n    ctx.fillStyle = fontColor\n    \n    y = y - lineHeight*((lines.length-1)/2)\n    for ( let i = 0; i < lines.length; i++ ) {\n        ctx.fillText(lines[i], x, y)\n        y = y + (lineHeight)\n    }\n}"],"mappings":"AAWA,OAAO,MAAMA,kBAA+B,GAAG;EACvCC,aAAa,EAAE,MADwB;EAEvCC,aAAa,EAAE,OAFwB;EAGvCC,cAAc,EAAE,KAHuB;EAIvCC,cAAc,EAAE,OAJuB;EAKvCC,iBAAiB,EAAE,QALoB;EAMvCC,iBAAiB,EAAE;AANoB,CAAxC;AAcP,OAAO,MAAMC,SAAS,GAAG,CAACC,IAAD,EAAmBC,GAAnB,EAAkDC,WAAlD,KAA0E;EAC/F,MAAMC,KAAK,GAAIH,IAAD,CAAuBI,IAArC;EACA,MAAMC,SAAS,GAAIL,IAAD,CAAuBK,SAAzC;EAEA,MAAMC,QAAQ,GAAG,KAAK,EAAL,GAAU,GAA3B;EAEA,MAAMC,CAAC,GAAGP,IAAI,CAACO,CAAL,GAAOP,IAAI,CAACO,CAAZ,GAAc,CAAxB;EACA,IAAIC,CAAC,GAAGR,IAAI,CAACQ,CAAL,GAAOR,IAAI,CAACQ,CAAZ,GAAc,CAAtB;EAEA,MAAMC,KAAK,GAAGN,KAAK,CAACO,KAAN,CAAY,GAAZ,CAAd;EACA,MAAMC,UAAU,GAAIL,QAApB;EAEAL,GAAG,CAACW,IAAJ,GAAY,GAAEN,QAAS,eAAvB;EACAL,GAAG,CAACY,SAAJ,GAAgB,QAAhB;EACAZ,GAAG,CAACa,YAAJ,GAAmB,QAAnB;EACAb,GAAG,CAACc,SAAJ,GAAgBV,SAAhB;EAEAG,CAAC,GAAGA,CAAC,GAAGG,UAAU,IAAE,CAACF,KAAK,CAACO,MAAN,GAAa,CAAd,IAAiB,CAAnB,CAAlB;;EACA,KAAM,IAAIC,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAGR,KAAK,CAACO,MAA3B,EAAmCC,CAAC,EAApC,EAAyC;IACrChB,GAAG,CAACiB,QAAJ,CAAaT,KAAK,CAACQ,CAAD,CAAlB,EAAuBV,CAAvB,EAA0BC,CAA1B;IACAA,CAAC,GAAGA,CAAC,GAAIG,UAAT;EACH;AACJ,CAtBM"},"metadata":{},"sourceType":"module"}