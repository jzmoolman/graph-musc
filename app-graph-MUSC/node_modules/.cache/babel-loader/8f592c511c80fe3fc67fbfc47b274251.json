{"ast":null,"code":"export default function (x, y, z) {\n  if (isNaN(x = +x) || isNaN(y = +y) || isNaN(z = +z)) return this; // ignore invalid points\n\n  var x0 = this._x0,\n      y0 = this._y0,\n      z0 = this._z0,\n      x1 = this._x1,\n      y1 = this._y1,\n      z1 = this._z1; // If the octree has no extent, initialize them.\n  // Integer extent are necessary so that if we later double the extent,\n  // the existing octant boundaries don’t change due to floating point error!\n\n  if (isNaN(x0)) {\n    x1 = (x0 = Math.floor(x)) + 1;\n    y1 = (y0 = Math.floor(y)) + 1;\n    z1 = (z0 = Math.floor(z)) + 1;\n  } // Otherwise, double repeatedly to cover.\n  else {\n    var t = x1 - x0 || 1,\n        node = this._root,\n        parent,\n        i;\n\n    while (x0 > x || x >= x1 || y0 > y || y >= y1 || z0 > z || z >= z1) {\n      i = (z < z0) << 2 | (y < y0) << 1 | x < x0;\n      parent = new Array(8), parent[i] = node, node = parent, t *= 2;\n\n      switch (i) {\n        case 0:\n          x1 = x0 + t, y1 = y0 + t, z1 = z0 + t;\n          break;\n\n        case 1:\n          x0 = x1 - t, y1 = y0 + t, z1 = z0 + t;\n          break;\n\n        case 2:\n          x1 = x0 + t, y0 = y1 - t, z1 = z0 + t;\n          break;\n\n        case 3:\n          x0 = x1 - t, y0 = y1 - t, z1 = z0 + t;\n          break;\n\n        case 4:\n          x1 = x0 + t, y1 = y0 + t, z0 = z1 - t;\n          break;\n\n        case 5:\n          x0 = x1 - t, y1 = y0 + t, z0 = z1 - t;\n          break;\n\n        case 6:\n          x1 = x0 + t, y0 = y1 - t, z0 = z1 - t;\n          break;\n\n        case 7:\n          x0 = x1 - t, y0 = y1 - t, z0 = z1 - t;\n          break;\n      }\n    }\n\n    if (this._root && this._root.length) this._root = node;\n  }\n\n  this._x0 = x0;\n  this._y0 = y0;\n  this._z0 = z0;\n  this._x1 = x1;\n  this._y1 = y1;\n  this._z1 = z1;\n  return this;\n}","map":{"version":3,"names":["x","y","z","isNaN","x0","_x0","y0","_y0","z0","_z0","x1","_x1","y1","_y1","z1","_z1","Math","floor","t","node","_root","parent","i","Array","length"],"sources":["/Users/zack/src/gene-graph-MUSC/node_modules/d3-octree/src/cover.js"],"sourcesContent":["export default function(x, y, z) {\n  if (isNaN(x = +x) || isNaN(y = +y) || isNaN(z = +z)) return this; // ignore invalid points\n\n  var x0 = this._x0,\n      y0 = this._y0,\n      z0 = this._z0,\n      x1 = this._x1,\n      y1 = this._y1,\n      z1 = this._z1;\n\n  // If the octree has no extent, initialize them.\n  // Integer extent are necessary so that if we later double the extent,\n  // the existing octant boundaries don’t change due to floating point error!\n  if (isNaN(x0)) {\n    x1 = (x0 = Math.floor(x)) + 1;\n    y1 = (y0 = Math.floor(y)) + 1;\n    z1 = (z0 = Math.floor(z)) + 1;\n  }\n\n  // Otherwise, double repeatedly to cover.\n  else {\n    var t = x1 - x0 || 1,\n        node = this._root,\n        parent,\n        i;\n\n    while (x0 > x || x >= x1 || y0 > y || y >= y1 || z0 > z || z >= z1) {\n      i = (z < z0) << 2 | (y < y0) << 1 | (x < x0);\n      parent = new Array(8), parent[i] = node, node = parent, t *= 2;\n      switch (i) {\n        case 0: x1 = x0 + t, y1 = y0 + t, z1 = z0 + t; break;\n        case 1: x0 = x1 - t, y1 = y0 + t, z1 = z0 + t; break;\n        case 2: x1 = x0 + t, y0 = y1 - t, z1 = z0 + t; break;\n        case 3: x0 = x1 - t, y0 = y1 - t, z1 = z0 + t; break;\n        case 4: x1 = x0 + t, y1 = y0 + t, z0 = z1 - t; break;\n        case 5: x0 = x1 - t, y1 = y0 + t, z0 = z1 - t; break;\n        case 6: x1 = x0 + t, y0 = y1 - t, z0 = z1 - t; break;\n        case 7: x0 = x1 - t, y0 = y1 - t, z0 = z1 - t; break;\n      }\n    }\n\n    if (this._root && this._root.length) this._root = node;\n  }\n\n  this._x0 = x0;\n  this._y0 = y0;\n  this._z0 = z0;\n  this._x1 = x1;\n  this._y1 = y1;\n  this._z1 = z1;\n  return this;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}