{"ast":null,"code":"export default function (x) {\n  if (isNaN(x = +x)) return this; // ignore invalid points\n\n  var x0 = this._x0,\n      x1 = this._x1; // If the binarytree has no extent, initialize them.\n  // Integer extent are necessary so that if we later double the extent,\n  // the existing half boundaries don’t change due to floating point error!\n\n  if (isNaN(x0)) {\n    x1 = (x0 = Math.floor(x)) + 1;\n  } // Otherwise, double repeatedly to cover.\n  else {\n    var z = x1 - x0 || 1,\n        node = this._root,\n        parent,\n        i;\n\n    while (x0 > x || x >= x1) {\n      i = +(x < x0);\n      parent = new Array(2), parent[i] = node, node = parent, z *= 2;\n\n      switch (i) {\n        case 0:\n          x1 = x0 + z;\n          break;\n\n        case 1:\n          x0 = x1 - z;\n          break;\n      }\n    }\n\n    if (this._root && this._root.length) this._root = node;\n  }\n\n  this._x0 = x0;\n  this._x1 = x1;\n  return this;\n}","map":{"version":3,"names":["x","isNaN","x0","_x0","x1","_x1","Math","floor","z","node","_root","parent","i","Array","length"],"sources":["/Users/zack/src/gene3/node_modules/d3-binarytree/src/cover.js"],"sourcesContent":["export default function(x) {\n  if (isNaN(x = +x)) return this; // ignore invalid points\n\n  var x0 = this._x0,\n      x1 = this._x1;\n\n  // If the binarytree has no extent, initialize them.\n  // Integer extent are necessary so that if we later double the extent,\n  // the existing half boundaries don’t change due to floating point error!\n  if (isNaN(x0)) {\n    x1 = (x0 = Math.floor(x)) + 1;\n  }\n\n  // Otherwise, double repeatedly to cover.\n  else {\n    var z = x1 - x0 || 1,\n        node = this._root,\n        parent,\n        i;\n\n    while (x0 > x || x >= x1) {\n      i = +(x < x0);\n      parent = new Array(2), parent[i] = node, node = parent, z *= 2;\n      switch (i) {\n        case 0: x1 = x0 + z; break;\n        case 1: x0 = x1 - z; break;\n      }\n    }\n\n    if (this._root && this._root.length) this._root = node;\n  }\n\n  this._x0 = x0;\n  this._x1 = x1;\n  return this;\n}\n"],"mappings":"AAAA,eAAe,UAASA,CAAT,EAAY;EACzB,IAAIC,KAAK,CAACD,CAAC,GAAG,CAACA,CAAN,CAAT,EAAmB,OAAO,IAAP,CADM,CACO;;EAEhC,IAAIE,EAAE,GAAG,KAAKC,GAAd;EAAA,IACIC,EAAE,GAAG,KAAKC,GADd,CAHyB,CAMzB;EACA;EACA;;EACA,IAAIJ,KAAK,CAACC,EAAD,CAAT,EAAe;IACbE,EAAE,GAAG,CAACF,EAAE,GAAGI,IAAI,CAACC,KAAL,CAAWP,CAAX,CAAN,IAAuB,CAA5B;EACD,CAFD,CAIA;EAJA,KAKK;IACH,IAAIQ,CAAC,GAAGJ,EAAE,GAAGF,EAAL,IAAW,CAAnB;IAAA,IACIO,IAAI,GAAG,KAAKC,KADhB;IAAA,IAEIC,MAFJ;IAAA,IAGIC,CAHJ;;IAKA,OAAOV,EAAE,GAAGF,CAAL,IAAUA,CAAC,IAAII,EAAtB,EAA0B;MACxBQ,CAAC,GAAG,EAAEZ,CAAC,GAAGE,EAAN,CAAJ;MACAS,MAAM,GAAG,IAAIE,KAAJ,CAAU,CAAV,CAAT,EAAuBF,MAAM,CAACC,CAAD,CAAN,GAAYH,IAAnC,EAAyCA,IAAI,GAAGE,MAAhD,EAAwDH,CAAC,IAAI,CAA7D;;MACA,QAAQI,CAAR;QACE,KAAK,CAAL;UAAQR,EAAE,GAAGF,EAAE,GAAGM,CAAV;UAAa;;QACrB,KAAK,CAAL;UAAQN,EAAE,GAAGE,EAAE,GAAGI,CAAV;UAAa;MAFvB;IAID;;IAED,IAAI,KAAKE,KAAL,IAAc,KAAKA,KAAL,CAAWI,MAA7B,EAAqC,KAAKJ,KAAL,GAAaD,IAAb;EACtC;;EAED,KAAKN,GAAL,GAAWD,EAAX;EACA,KAAKG,GAAL,GAAWD,EAAX;EACA,OAAO,IAAP;AACD"},"metadata":{},"sourceType":"module"}