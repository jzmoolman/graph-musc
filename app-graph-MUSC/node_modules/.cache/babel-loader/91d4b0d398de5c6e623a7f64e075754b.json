{"ast":null,"code":"export const defaultGraphScheme = {\n  geneNode: 'Blue',\n  geneFont: 'White',\n  organNode: 'Red',\n  organFont: 'White',\n  diseaseNode: 'Purple',\n  diseaseFont: 'White',\n  syndromeNode: 'Yellow',\n  syndromeFont: 'Black',\n  nodeVal: 1,\n  nodeRelSize: 7,\n  scaleFont: 30,\n  // Percentage out of 100\n  fitViewPort: false\n};\nexport const ArrayToStr = data => {\n  let localFilter = '';\n  data.forEach(value => {\n    if (localFilter === '') localFilter = '[';\n    localFilter = localFilter + '\\'' + value + '\\',';\n  });\n\n  if (localFilter !== '') {\n    localFilter = localFilter.slice(0, localFilter.length - 1);\n    localFilter = localFilter + ']';\n  }\n\n  return localFilter;\n};\n_c = ArrayToStr;\n// Armando - end\nexport const paintNode = (node, ctx, GlobalScale) => {\n  const label = node.name;\n  const fontColor = node.fontColor;\n  const fontSize = node.nodeRelSize * node.scaleFont / 100;\n  const x = node.x ? node.x : 0;\n  let y = node.y ? node.y : 0;\n  const lines = label.split(' ');\n  const lineHeight = fontSize;\n  ctx.font = `${fontSize}px Sans-Serif`;\n  ctx.textAlign = 'center';\n  ctx.textBaseline = 'middle';\n  ctx.fillStyle = fontColor;\n  y = y - lineHeight * ((lines.length - 1) / 2);\n\n  for (let i = 0; i < lines.length; i++) {\n    ctx.fillText(lines[i], x, y);\n    y = y + lineHeight;\n  }\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"ArrayToStr\");","map":{"version":3,"names":["defaultGraphScheme","geneNode","geneFont","organNode","organFont","diseaseNode","diseaseFont","syndromeNode","syndromeFont","nodeVal","nodeRelSize","scaleFont","fitViewPort","ArrayToStr","data","localFilter","forEach","value","slice","length","paintNode","node","ctx","GlobalScale","label","name","fontColor","fontSize","x","y","lines","split","lineHeight","font","textAlign","textBaseline","fillStyle","i","fillText"],"sources":["/Users/zack/src/_-MUSC/gene-graph-MUSC/src/tools/graphtools.ts"],"sourcesContent":["\nimport { NodeObject }  from 'react-force-graph-2d'\n\nexport type GraphScheme = {\n    geneNode: string\n    geneFont: string\n    organNode: string\n    organFont: string\n    diseaseNode: string\n    diseaseFont: string\n    syndromeNode: string\n    syndromeFont: string\n    nodeVal: number,\n    nodeRelSize: number\n    scaleFont: number\n    fitViewPort: boolean\n}\n\nexport const defaultGraphScheme: GraphScheme = {\n    geneNode: 'Blue',\n    geneFont: 'White',\n    organNode: 'Red',\n    organFont: 'White',\n    diseaseNode: 'Purple',\n    diseaseFont: 'White',\n    syndromeNode: 'Yellow',\n    syndromeFont: 'Black', \n    nodeVal: 1,\n    nodeRelSize: 7,\n    scaleFont: 30, // Percentage out of 100\n    fitViewPort: false\n}\n\nexport type Force2DData = {\n    nodes : any[]\n    links: any[]\n}\n\nexport type GraphName = 'gene' | 'organ' | 'disease' | 'syndrome'\n\nexport const ArrayToStr = (data: string[]) => {\n    let localFilter = '';\n    data.forEach(value => { \n        if (localFilter === '') localFilter = '['\n            localFilter = localFilter + '\\'' + value + '\\','\n        } )\n        if (localFilter !== '') {\n            localFilter = localFilter.slice(0, localFilter.length - 1);\n            localFilter = localFilter + ']'\n        }\n    return localFilter\n}\n \nexport interface CustomNodeObject extends NodeObject {\n    name: string\n    nodeType: string\n    fontColor: string\n    nodeVal: number\n    nodeRelSize: number\n    scaleFont: number\n}\n\n// Armando - support different card \nexport interface CustomSyndromeCardObject extends NodeObject {\n    name: string\n    hereditaryType: string\n    nodeType: string\n}\n\nexport interface CustomGeneCardObject extends NodeObject {\n    name: string\n    nodeType: string\n    fullName: string\n    geneAltName: string\n    description: string\n}\n// Armando - end\n\nexport const paintNode = (node: NodeObject, ctx: CanvasRenderingContext2D, GlobalScale: number) => {\n    const label = (node as CustomNodeObject).name\n    const fontColor = (node as CustomNodeObject).fontColor\n    const fontSize = (node as CustomNodeObject).nodeRelSize * (node as CustomNodeObject).scaleFont/100\n\n    const x = node.x?node.x:0\n    let y = node.y?node.y:0\n\n    const lines = label.split(' ')\n    const lineHeight  = fontSize\n\n    ctx.font = `${fontSize}px Sans-Serif`;\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle'\n    ctx.fillStyle = fontColor\n    \n    y = y - lineHeight*((lines.length-1)/2)\n    for ( let i = 0; i < lines.length; i++ ) {\n        ctx.fillText(lines[i], x, y)\n        y = y + (lineHeight)\n    }\n}"],"mappings":"AAkBA,OAAO,MAAMA,kBAA+B,GAAG;EAC3CC,QAAQ,EAAE,MADiC;EAE3CC,QAAQ,EAAE,OAFiC;EAG3CC,SAAS,EAAE,KAHgC;EAI3CC,SAAS,EAAE,OAJgC;EAK3CC,WAAW,EAAE,QAL8B;EAM3CC,WAAW,EAAE,OAN8B;EAO3CC,YAAY,EAAE,QAP6B;EAQ3CC,YAAY,EAAE,OAR6B;EAS3CC,OAAO,EAAE,CATkC;EAU3CC,WAAW,EAAE,CAV8B;EAW3CC,SAAS,EAAE,EAXgC;EAW5B;EACfC,WAAW,EAAE;AAZ8B,CAAxC;AAsBP,OAAO,MAAMC,UAAU,GAAIC,IAAD,IAAoB;EAC1C,IAAIC,WAAW,GAAG,EAAlB;EACAD,IAAI,CAACE,OAAL,CAAaC,KAAK,IAAI;IAClB,IAAIF,WAAW,KAAK,EAApB,EAAwBA,WAAW,GAAG,GAAd;IACpBA,WAAW,GAAGA,WAAW,GAAG,IAAd,GAAqBE,KAArB,GAA6B,KAA3C;EACH,CAHL;;EAII,IAAIF,WAAW,KAAK,EAApB,EAAwB;IACpBA,WAAW,GAAGA,WAAW,CAACG,KAAZ,CAAkB,CAAlB,EAAqBH,WAAW,CAACI,MAAZ,GAAqB,CAA1C,CAAd;IACAJ,WAAW,GAAGA,WAAW,GAAG,GAA5B;EACH;;EACL,OAAOA,WAAP;AACH,CAXM;KAAMF,U;AAoCb;AAEA,OAAO,MAAMO,SAAS,GAAG,CAACC,IAAD,EAAmBC,GAAnB,EAAkDC,WAAlD,KAA0E;EAC/F,MAAMC,KAAK,GAAIH,IAAD,CAA2BI,IAAzC;EACA,MAAMC,SAAS,GAAIL,IAAD,CAA2BK,SAA7C;EACA,MAAMC,QAAQ,GAAIN,IAAD,CAA2BX,WAA3B,GAA0CW,IAAD,CAA2BV,SAApE,GAA8E,GAA/F;EAEA,MAAMiB,CAAC,GAAGP,IAAI,CAACO,CAAL,GAAOP,IAAI,CAACO,CAAZ,GAAc,CAAxB;EACA,IAAIC,CAAC,GAAGR,IAAI,CAACQ,CAAL,GAAOR,IAAI,CAACQ,CAAZ,GAAc,CAAtB;EAEA,MAAMC,KAAK,GAAGN,KAAK,CAACO,KAAN,CAAY,GAAZ,CAAd;EACA,MAAMC,UAAU,GAAIL,QAApB;EAEAL,GAAG,CAACW,IAAJ,GAAY,GAAEN,QAAS,eAAvB;EACAL,GAAG,CAACY,SAAJ,GAAgB,QAAhB;EACAZ,GAAG,CAACa,YAAJ,GAAmB,QAAnB;EACAb,GAAG,CAACc,SAAJ,GAAgBV,SAAhB;EAEAG,CAAC,GAAGA,CAAC,GAAGG,UAAU,IAAE,CAACF,KAAK,CAACX,MAAN,GAAa,CAAd,IAAiB,CAAnB,CAAlB;;EACA,KAAM,IAAIkB,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAGP,KAAK,CAACX,MAA3B,EAAmCkB,CAAC,EAApC,EAAyC;IACrCf,GAAG,CAACgB,QAAJ,CAAaR,KAAK,CAACO,CAAD,CAAlB,EAAuBT,CAAvB,EAA0BC,CAA1B;IACAA,CAAC,GAAGA,CAAC,GAAIG,UAAT;EACH;AACJ,CArBM"},"metadata":{},"sourceType":"module"}