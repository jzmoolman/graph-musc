{"ast":null,"code":"import { ArrayToStr } from '../tools/graphtools';\nexport const loadGeneData = async (driver, verified, organs, graphScheme, onData) => {\n  console.log('enter - loadData');\n\n  if (driver == null) {\n    console.log('Driver not loaded');\n    return;\n  }\n\n  const str_organs = ArrayToStr(organs);\n  let whereCLAUSE = '';\n\n  if (str_organs !== '' && verified) {\n    whereCLAUSE = 'WHERE o.name IN ' + str_organs + ' AND g.FinalVerdict = 1';\n  } else if (str_organs !== '' && !verified) {\n    whereCLAUSE = 'WHERE s.name IN ' + str_organs;\n  } else if (str_organs === '' && verified) {\n    whereCLAUSE = ' WHERE g.FinalVerdict = 1';\n  } else {\n    whereCLAUSE = '';\n  }\n\n  const query = `MATCH (g:MGene)-[r]->(o:Organ) ${whereCLAUSE} RETURN g,r,o`;\n  console.log('gSyndrome', query);\n  let session = driver.session();\n\n  try {\n    let res = await session.run(query);\n    let ids = new Set();\n    let nodes = [];\n    let links = [];\n    res.records.forEach(row => {\n      let link = {\n        source: '',\n        target: ''\n      };\n      const gene = row.get('g');\n\n      if (!ids.has(gene.properties.name)) {\n        let node = {\n          id: gene.identity,\n          name: gene.properties.name,\n          nodeColor: graphScheme.geneNode,\n          fontColor: graphScheme.geneFont,\n          nodeVal: graphScheme.nodeVal,\n          nodeRelSize: graphScheme.nodeRelSize\n        };\n        nodes.push(node);\n        link.source = node.name;\n        ids.add(node.name);\n      } else {\n        link.source = gene.properties.name;\n      }\n\n      const organ = row.get('o');\n\n      if (!ids.has(organ.properties.name)) {\n        let node = {\n          id: organ.identity,\n          name: organ.properties.name,\n          nodeColor: graphScheme.organNode,\n          fontColor: graphScheme.organFont,\n          nodeVal: graphScheme.nodeVal,\n          nodeRelSize: graphScheme.nodeRelSize\n        };\n        nodes.push(node);\n        link.target = node.name;\n        ids.add(node.name);\n      } else {\n        link.target = organ.properties.name;\n      }\n\n      links.push(link);\n    });\n    console.log(nodes);\n    console.log(links);\n    console.log('Data loaded');\n    session.close();\n    console.log('nodes', nodes);\n    onData({\n      nodes,\n      links\n    });\n  } catch (e) {\n    throw e;\n  } finally {\n    await session.close();\n  }\n};","map":{"version":3,"names":["ArrayToStr","loadGeneData","driver","verified","organs","graphScheme","onData","console","log","str_organs","whereCLAUSE","query","session","res","run","ids","Set","nodes","links","records","forEach","row","link","source","target","gene","get","has","properties","name","node","id","identity","nodeColor","geneNode","fontColor","geneFont","nodeVal","nodeRelSize","push","add","organ","organNode","organFont","close","e"],"sources":["/Users/zack/src/gene3/src/tools/grapgdata.ts"],"sourcesContent":["\nimport { GraphScheme, Force2DData, ArrayToStr } from '../tools/graphtools'\nimport { Driver }  from  'neo4j-driver'\n\nexport const  loadGeneData = async (driver: Driver | undefined,\n    verified: boolean,\n    organs: string[],\n    graphScheme : GraphScheme,\n    onData:(data: Force2DData)=> void) => {\n    console.log('enter - loadData')\n    if (driver == null) {\n        console.log('Driver not loaded')\n        return \n    }\n\n    const str_organs = ArrayToStr(organs)\n    \n    let whereCLAUSE = ''\n    if ( str_organs !== '' && verified ) {\n        whereCLAUSE =  'WHERE o.name IN ' + str_organs + ' AND g.FinalVerdict = 1'\n    } else if ( str_organs !== '' && !verified ) {\n        whereCLAUSE =  'WHERE s.name IN ' + str_organs\n    } else if ( str_organs === '' && verified ) {\n        whereCLAUSE = ' WHERE g.FinalVerdict = 1'\n    } else {\n        whereCLAUSE = ''\n    }\n\nconst query = `MATCH (g:MGene)-[r]->(o:Organ) ${whereCLAUSE} RETURN g,r,o`\n\nconsole.log('gSyndrome', query)\n\nlet session = driver.session()\n\ntry {\n    let res = await session.run(query)\n    let ids = new  Set<string>()\n    let nodes : any[] = []\n    let links : any[] = []\n    res.records.forEach(row => {\n        let link  = { source: '', target: ''}\n        const gene = row.get('g') \n        if (!ids.has(gene.properties.name)) {\n            let node = { \n                id: gene.identity,\n                name: gene.properties.name,\n                nodeColor: graphScheme.geneNode, \n                fontColor: graphScheme.geneFont,\n                nodeVal: graphScheme.nodeVal,\n                nodeRelSize: graphScheme.nodeRelSize\n            }\n            nodes.push(node) \n            link.source = node.name\n            ids.add(node.name)\n        } else {\n            link.source = gene.properties.name\n        }\n       \n        const organ = row.get('o') \n        if (!ids.has(organ.properties.name)) {\n            let node = { \n                id: organ.identity,\n                name: organ.properties.name,\n                nodeColor: graphScheme.organNode,\n                fontColor: graphScheme.organFont,\n                nodeVal: graphScheme.nodeVal,\n                nodeRelSize: graphScheme.nodeRelSize\n            }\n            nodes.push(node) \n            link.target = node.name\n            ids.add(node.name)\n        } else {\n            link.target = organ.properties.name\n        }\n\n        links.push(link)\n\n    })\n    console.log(nodes) \n    console.log(links) \n    console.log('Data loaded')\n    session.close();\n    console.log('nodes', nodes)\n    onData( {nodes, links} )\n} catch (e) {\n    throw e\n}\nfinally {\n    await session.close()\n\n}\n}"],"mappings":"AACA,SAAmCA,UAAnC,QAAqD,qBAArD;AAGA,OAAO,MAAOC,YAAY,GAAG,OAAOC,MAAP,EACzBC,QADyB,EAEzBC,MAFyB,EAGzBC,WAHyB,EAIzBC,MAJyB,KAIa;EACtCC,OAAO,CAACC,GAAR,CAAY,kBAAZ;;EACA,IAAIN,MAAM,IAAI,IAAd,EAAoB;IAChBK,OAAO,CAACC,GAAR,CAAY,mBAAZ;IACA;EACH;;EAED,MAAMC,UAAU,GAAGT,UAAU,CAACI,MAAD,CAA7B;EAEA,IAAIM,WAAW,GAAG,EAAlB;;EACA,IAAKD,UAAU,KAAK,EAAf,IAAqBN,QAA1B,EAAqC;IACjCO,WAAW,GAAI,qBAAqBD,UAArB,GAAkC,yBAAjD;EACH,CAFD,MAEO,IAAKA,UAAU,KAAK,EAAf,IAAqB,CAACN,QAA3B,EAAsC;IACzCO,WAAW,GAAI,qBAAqBD,UAApC;EACH,CAFM,MAEA,IAAKA,UAAU,KAAK,EAAf,IAAqBN,QAA1B,EAAqC;IACxCO,WAAW,GAAG,2BAAd;EACH,CAFM,MAEA;IACHA,WAAW,GAAG,EAAd;EACH;;EAEL,MAAMC,KAAK,GAAI,kCAAiCD,WAAY,eAA5D;EAEAH,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBG,KAAzB;EAEA,IAAIC,OAAO,GAAGV,MAAM,CAACU,OAAP,EAAd;;EAEA,IAAI;IACA,IAAIC,GAAG,GAAG,MAAMD,OAAO,CAACE,GAAR,CAAYH,KAAZ,CAAhB;IACA,IAAII,GAAG,GAAG,IAAKC,GAAL,EAAV;IACA,IAAIC,KAAa,GAAG,EAApB;IACA,IAAIC,KAAa,GAAG,EAApB;IACAL,GAAG,CAACM,OAAJ,CAAYC,OAAZ,CAAoBC,GAAG,IAAI;MACvB,IAAIC,IAAI,GAAI;QAAEC,MAAM,EAAE,EAAV;QAAcC,MAAM,EAAE;MAAtB,CAAZ;MACA,MAAMC,IAAI,GAAGJ,GAAG,CAACK,GAAJ,CAAQ,GAAR,CAAb;;MACA,IAAI,CAACX,GAAG,CAACY,GAAJ,CAAQF,IAAI,CAACG,UAAL,CAAgBC,IAAxB,CAAL,EAAoC;QAChC,IAAIC,IAAI,GAAG;UACPC,EAAE,EAAEN,IAAI,CAACO,QADF;UAEPH,IAAI,EAAEJ,IAAI,CAACG,UAAL,CAAgBC,IAFf;UAGPI,SAAS,EAAE5B,WAAW,CAAC6B,QAHhB;UAIPC,SAAS,EAAE9B,WAAW,CAAC+B,QAJhB;UAKPC,OAAO,EAAEhC,WAAW,CAACgC,OALd;UAMPC,WAAW,EAAEjC,WAAW,CAACiC;QANlB,CAAX;QAQArB,KAAK,CAACsB,IAAN,CAAWT,IAAX;QACAR,IAAI,CAACC,MAAL,GAAcO,IAAI,CAACD,IAAnB;QACAd,GAAG,CAACyB,GAAJ,CAAQV,IAAI,CAACD,IAAb;MACH,CAZD,MAYO;QACHP,IAAI,CAACC,MAAL,GAAcE,IAAI,CAACG,UAAL,CAAgBC,IAA9B;MACH;;MAED,MAAMY,KAAK,GAAGpB,GAAG,CAACK,GAAJ,CAAQ,GAAR,CAAd;;MACA,IAAI,CAACX,GAAG,CAACY,GAAJ,CAAQc,KAAK,CAACb,UAAN,CAAiBC,IAAzB,CAAL,EAAqC;QACjC,IAAIC,IAAI,GAAG;UACPC,EAAE,EAAEU,KAAK,CAACT,QADH;UAEPH,IAAI,EAAEY,KAAK,CAACb,UAAN,CAAiBC,IAFhB;UAGPI,SAAS,EAAE5B,WAAW,CAACqC,SAHhB;UAIPP,SAAS,EAAE9B,WAAW,CAACsC,SAJhB;UAKPN,OAAO,EAAEhC,WAAW,CAACgC,OALd;UAMPC,WAAW,EAAEjC,WAAW,CAACiC;QANlB,CAAX;QAQArB,KAAK,CAACsB,IAAN,CAAWT,IAAX;QACAR,IAAI,CAACE,MAAL,GAAcM,IAAI,CAACD,IAAnB;QACAd,GAAG,CAACyB,GAAJ,CAAQV,IAAI,CAACD,IAAb;MACH,CAZD,MAYO;QACHP,IAAI,CAACE,MAAL,GAAciB,KAAK,CAACb,UAAN,CAAiBC,IAA/B;MACH;;MAEDX,KAAK,CAACqB,IAAN,CAAWjB,IAAX;IAEH,CAtCD;IAuCAf,OAAO,CAACC,GAAR,CAAYS,KAAZ;IACAV,OAAO,CAACC,GAAR,CAAYU,KAAZ;IACAX,OAAO,CAACC,GAAR,CAAY,aAAZ;IACAI,OAAO,CAACgC,KAAR;IACArC,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBS,KAArB;IACAX,MAAM,CAAE;MAACW,KAAD;MAAQC;IAAR,CAAF,CAAN;EACH,CAlDD,CAkDE,OAAO2B,CAAP,EAAU;IACR,MAAMA,CAAN;EACH,CApDD,SAqDQ;IACJ,MAAMjC,OAAO,CAACgC,KAAR,EAAN;EAEH;AACA,CAvFM"},"metadata":{},"sourceType":"module"}