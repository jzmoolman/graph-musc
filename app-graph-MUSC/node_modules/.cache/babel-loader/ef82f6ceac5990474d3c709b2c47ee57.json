{"ast":null,"code":"import { binarytree } from \"d3-binarytree\";\nimport { quadtree } from \"d3-quadtree\";\nimport { octree } from \"d3-octree\";\nimport constant from \"./constant.js\";\nimport jiggle from \"./jiggle.js\";\nimport { x, y, z } from \"./simulation.js\";\nexport default function () {\n  var nodes,\n      nDim,\n      node,\n      random,\n      alpha,\n      strength = constant(-30),\n      strengths,\n      distanceMin2 = 1,\n      distanceMax2 = Infinity,\n      theta2 = 0.81;\n\n  function force(_) {\n    var i,\n        n = nodes.length,\n        tree = (nDim === 1 ? binarytree(nodes, x) : nDim === 2 ? quadtree(nodes, x, y) : nDim === 3 ? octree(nodes, x, y, z) : null).visitAfter(accumulate);\n\n    for (alpha = _, i = 0; i < n; ++i) node = nodes[i], tree.visit(apply);\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i,\n        n = nodes.length,\n        node;\n    strengths = new Array(n);\n\n    for (i = 0; i < n; ++i) node = nodes[i], strengths[node.index] = +strength(node, i, nodes);\n  }\n\n  function accumulate(treeNode) {\n    var strength = 0,\n        q,\n        c,\n        weight = 0,\n        x,\n        y,\n        z,\n        i;\n    var numChildren = treeNode.length; // For internal nodes, accumulate forces from children.\n\n    if (numChildren) {\n      for (x = y = z = i = 0; i < numChildren; ++i) {\n        if ((q = treeNode[i]) && (c = Math.abs(q.value))) {\n          strength += q.value, weight += c, x += c * (q.x || 0), y += c * (q.y || 0), z += c * (q.z || 0);\n        }\n      }\n\n      strength *= Math.sqrt(4 / numChildren); // scale accumulated strength according to number of dimensions\n\n      treeNode.x = x / weight;\n\n      if (nDim > 1) {\n        treeNode.y = y / weight;\n      }\n\n      if (nDim > 2) {\n        treeNode.z = z / weight;\n      }\n    } // For leaf nodes, accumulate forces from coincident nodes.\n    else {\n      q = treeNode;\n      q.x = q.data.x;\n\n      if (nDim > 1) {\n        q.y = q.data.y;\n      }\n\n      if (nDim > 2) {\n        q.z = q.data.z;\n      }\n\n      do strength += strengths[q.data.index]; while (q = q.next);\n    }\n\n    treeNode.value = strength;\n  }\n\n  function apply(treeNode, x1, arg1, arg2, arg3) {\n    if (!treeNode.value) return true;\n    var x2 = [arg1, arg2, arg3][nDim - 1];\n    var x = treeNode.x - node.x,\n        y = nDim > 1 ? treeNode.y - node.y : 0,\n        z = nDim > 2 ? treeNode.z - node.z : 0,\n        w = x2 - x1,\n        l = x * x + y * y + z * z; // Apply the Barnes-Hut approximation if possible.\n    // Limit forces for very close nodes; randomize direction if coincident.\n\n    if (w * w / theta2 < l) {\n      if (l < distanceMax2) {\n        if (x === 0) x = jiggle(random), l += x * x;\n        if (nDim > 1 && y === 0) y = jiggle(random), l += y * y;\n        if (nDim > 2 && z === 0) z = jiggle(random), l += z * z;\n        if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\n        node.vx += x * treeNode.value * alpha / l;\n\n        if (nDim > 1) {\n          node.vy += y * treeNode.value * alpha / l;\n        }\n\n        if (nDim > 2) {\n          node.vz += z * treeNode.value * alpha / l;\n        }\n      }\n\n      return true;\n    } // Otherwise, process points directly.\n    else if (treeNode.length || l >= distanceMax2) return; // Limit forces for very close nodes; randomize direction if coincident.\n\n\n    if (treeNode.data !== node || treeNode.next) {\n      if (x === 0) x = jiggle(random), l += x * x;\n      if (nDim > 1 && y === 0) y = jiggle(random), l += y * y;\n      if (nDim > 2 && z === 0) z = jiggle(random), l += z * z;\n      if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\n    }\n\n    do if (treeNode.data !== node) {\n      w = strengths[treeNode.data.index] * alpha / l;\n      node.vx += x * w;\n\n      if (nDim > 1) {\n        node.vy += y * w;\n      }\n\n      if (nDim > 2) {\n        node.vz += z * w;\n      }\n    } while (treeNode = treeNode.next);\n  }\n\n  force.initialize = function (_nodes) {\n    nodes = _nodes;\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    random = args.find(arg => typeof arg === 'function') || Math.random;\n    nDim = args.find(arg => [1, 2, 3].includes(arg)) || 2;\n    initialize();\n  };\n\n  force.strength = function (_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n  };\n\n  force.distanceMin = function (_) {\n    return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);\n  };\n\n  force.distanceMax = function (_) {\n    return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);\n  };\n\n  force.theta = function (_) {\n    return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);\n  };\n\n  return force;\n}","map":{"version":3,"names":["binarytree","quadtree","octree","constant","jiggle","x","y","z","nodes","nDim","node","random","alpha","strength","strengths","distanceMin2","distanceMax2","Infinity","theta2","force","_","i","n","length","tree","visitAfter","accumulate","visit","apply","initialize","Array","index","treeNode","q","c","weight","numChildren","Math","abs","value","sqrt","data","next","x1","arg1","arg2","arg3","x2","w","l","vx","vy","vz","_nodes","args","find","arg","includes","arguments","distanceMin","distanceMax","theta"],"sources":["/Users/zack/src/gene3/node_modules/d3-force-3d/src/manyBody.js"],"sourcesContent":["import {binarytree} from \"d3-binarytree\";\nimport {quadtree} from \"d3-quadtree\";\nimport {octree} from \"d3-octree\";\nimport constant from \"./constant.js\";\nimport jiggle from \"./jiggle.js\";\nimport {x, y, z} from \"./simulation.js\";\n\nexport default function() {\n  var nodes,\n      nDim,\n      node,\n      random,\n      alpha,\n      strength = constant(-30),\n      strengths,\n      distanceMin2 = 1,\n      distanceMax2 = Infinity,\n      theta2 = 0.81;\n\n  function force(_) {\n    var i,\n        n = nodes.length,\n        tree =\n            (nDim === 1 ? binarytree(nodes, x)\n            :(nDim === 2 ? quadtree(nodes, x, y)\n            :(nDim === 3 ? octree(nodes, x, y, z)\n            :null\n        ))).visitAfter(accumulate);\n\n    for (alpha = _, i = 0; i < n; ++i) node = nodes[i], tree.visit(apply);\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i, n = nodes.length, node;\n    strengths = new Array(n);\n    for (i = 0; i < n; ++i) node = nodes[i], strengths[node.index] = +strength(node, i, nodes);\n  }\n\n  function accumulate(treeNode) {\n    var strength = 0, q, c, weight = 0, x, y, z, i;\n    var numChildren = treeNode.length;\n\n    // For internal nodes, accumulate forces from children.\n    if (numChildren) {\n      for (x = y = z = i = 0; i < numChildren; ++i) {\n        if ((q = treeNode[i]) && (c = Math.abs(q.value))) {\n          strength += q.value, weight += c, x += c * (q.x || 0), y += c * (q.y || 0), z += c * (q.z || 0);\n        }\n      }\n      strength *= Math.sqrt(4 / numChildren); // scale accumulated strength according to number of dimensions\n\n      treeNode.x = x / weight;\n      if (nDim > 1) { treeNode.y = y / weight; }\n      if (nDim > 2) { treeNode.z = z / weight; }\n    }\n\n    // For leaf nodes, accumulate forces from coincident nodes.\n    else {\n      q = treeNode;\n      q.x = q.data.x;\n      if (nDim > 1) { q.y = q.data.y; }\n      if (nDim > 2) { q.z = q.data.z; }\n      do strength += strengths[q.data.index];\n      while (q = q.next);\n    }\n\n    treeNode.value = strength;\n  }\n\n  function apply(treeNode, x1, arg1, arg2, arg3) {\n    if (!treeNode.value) return true;\n    var x2 = [arg1, arg2, arg3][nDim-1];\n\n    var x = treeNode.x - node.x,\n        y = (nDim > 1 ? treeNode.y - node.y : 0),\n        z = (nDim > 2 ? treeNode.z - node.z : 0),\n        w = x2 - x1,\n        l = x * x + y * y + z * z;\n\n    // Apply the Barnes-Hut approximation if possible.\n    // Limit forces for very close nodes; randomize direction if coincident.\n    if (w * w / theta2 < l) {\n      if (l < distanceMax2) {\n        if (x === 0) x = jiggle(random), l += x * x;\n        if (nDim > 1 && y === 0) y = jiggle(random), l += y * y;\n        if (nDim > 2 && z === 0) z = jiggle(random), l += z * z;\n        if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\n        node.vx += x * treeNode.value * alpha / l;\n        if (nDim > 1) { node.vy += y * treeNode.value * alpha / l; }\n        if (nDim > 2) { node.vz += z * treeNode.value * alpha / l; }\n      }\n      return true;\n    }\n\n    // Otherwise, process points directly.\n    else if (treeNode.length || l >= distanceMax2) return;\n\n    // Limit forces for very close nodes; randomize direction if coincident.\n    if (treeNode.data !== node || treeNode.next) {\n      if (x === 0) x = jiggle(random), l += x * x;\n      if (nDim > 1 && y === 0) y = jiggle(random), l += y * y;\n      if (nDim > 2 && z === 0) z = jiggle(random), l += z * z;\n      if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\n    }\n\n    do if (treeNode.data !== node) {\n      w = strengths[treeNode.data.index] * alpha / l;\n      node.vx += x * w;\n      if (nDim > 1) { node.vy += y * w; }\n      if (nDim > 2) { node.vz += z * w; }\n    } while (treeNode = treeNode.next);\n  }\n\n  force.initialize = function(_nodes, ...args) {\n    nodes = _nodes;\n    random = args.find(arg => typeof arg === 'function') || Math.random;\n    nDim = args.find(arg => [1, 2, 3].includes(arg)) || 2;\n    initialize();\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n  };\n\n  force.distanceMin = function(_) {\n    return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);\n  };\n\n  force.distanceMax = function(_) {\n    return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);\n  };\n\n  force.theta = function(_) {\n    return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);\n  };\n\n  return force;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}