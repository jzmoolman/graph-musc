{"ast":null,"code":"import { ArrayToStr } from '../tools/graphtools';\nexport const loadGeneData = async (driver, verified, genes, organs, graphScheme, onData) => {\n  console.log('enter - loadData');\n\n  if (driver == null) {\n    console.log('Driver not loaded');\n    return;\n  }\n\n  const str_genes = ArrayToStr(genes);\n  const str_organs = ArrayToStr(organs);\n  let whereCLAUSE = '';\n\n  if (str_organs !== '' && verified) {\n    whereCLAUSE = 'WHERE o.name IN ' + str_organs + ' AND g.FinalVerdict = 1';\n  } else if (str_organs !== '' && !verified) {\n    whereCLAUSE = 'WHERE s.name IN ' + str_organs;\n  } else if (str_organs === '' && verified) {\n    whereCLAUSE = ' WHERE g.FinalVerdict = 1';\n  } else {\n    whereCLAUSE = '';\n  }\n\n  const query = `MATCH (g:MGene)-[r]->(o:Organ) ${whereCLAUSE} RETURN g,r,o`;\n  console.log('Gene->Orgran', query);\n  let session = driver.session();\n\n  try {\n    let res = await session.run(query);\n    let ids = new Set();\n    let nodes = [];\n    let links = [];\n    res.records.forEach(row => {\n      let link = {\n        source: '',\n        target: ''\n      };\n      const gene = row.get('g');\n\n      if (!ids.has(gene.properties.name)) {\n        let node = {\n          id: gene.identity,\n          name: gene.properties.name,\n          nodeColor: graphScheme.geneNode,\n          fontColor: graphScheme.geneFont,\n          nodeVal: graphScheme.nodeVal,\n          nodeRelSize: graphScheme.nodeRelSize,\n          scaleFont: graphScheme.scaleFont\n        };\n        nodes.push(node);\n        link.source = node.name;\n        ids.add(node.name);\n      } else {\n        link.source = gene.properties.name;\n      }\n\n      const organ = row.get('o');\n\n      if (!ids.has(organ.properties.name)) {\n        let node = {\n          id: organ.identity,\n          name: organ.properties.name,\n          nodeColor: graphScheme.organNode,\n          fontColor: graphScheme.organFont,\n          nodeVal: graphScheme.nodeVal,\n          nodeRelSize: graphScheme.nodeRelSize,\n          scaleFont: graphScheme.scaleFont\n        };\n        nodes.push(node);\n        link.target = node.name;\n        ids.add(node.name);\n      } else {\n        link.target = organ.properties.name;\n      }\n\n      links.push(link);\n    });\n    console.log(nodes);\n    console.log(links);\n    console.log('Data loaded');\n    session.close();\n    console.log('nodes', nodes);\n    onData({\n      nodes,\n      links\n    });\n  } catch (e) {\n    throw e;\n  } finally {\n    await session.close();\n  }\n};","map":{"version":3,"names":["ArrayToStr","loadGeneData","driver","verified","genes","organs","graphScheme","onData","console","log","str_genes","str_organs","whereCLAUSE","query","session","res","run","ids","Set","nodes","links","records","forEach","row","link","source","target","gene","get","has","properties","name","node","id","identity","nodeColor","geneNode","fontColor","geneFont","nodeVal","nodeRelSize","scaleFont","push","add","organ","organNode","organFont","close","e"],"sources":["/Users/zack/src/gene3/src/tools/grapgdata.ts"],"sourcesContent":["\nimport { GraphScheme, Force2DData, ArrayToStr } from '../tools/graphtools'\nimport { Driver }  from  'neo4j-driver'\n\nexport const  loadGeneData = async (driver: Driver | undefined,\n    verified: boolean,\n    genes: string[],\n    organs: string[],\n    graphScheme : GraphScheme,\n    onData:(data: Force2DData)=> void) => {\n    console.log('enter - loadData')\n    if (driver == null) {\n        console.log('Driver not loaded')\n        return \n    }\n\n    const str_genes = ArrayToStr(genes)\n    const str_organs = ArrayToStr(organs)\n    \n    let whereCLAUSE = ''\n    if ( str_organs !== '' && verified ) {\n        whereCLAUSE =  'WHERE o.name IN ' + str_organs + ' AND g.FinalVerdict = 1'\n    } else if ( str_organs !== '' && !verified ) {\n        whereCLAUSE =  'WHERE s.name IN ' + str_organs\n    } else if ( str_organs === '' && verified ) {\n        whereCLAUSE = ' WHERE g.FinalVerdict = 1'\n    } else {\n        whereCLAUSE = ''\n    }\n\n    const query = `MATCH (g:MGene)-[r]->(o:Organ) ${whereCLAUSE} RETURN g,r,o`\n\n    console.log('Gene->Orgran', query)\n\n    let session = driver.session()\n\n    try {\n        let res = await session.run(query)\n        let ids = new  Set<string>()\n        let nodes : any[] = []\n        let links : any[] = []\n        res.records.forEach(row => {\n            let link  = { source: '', target: ''}\n            const gene = row.get('g') \n            if (!ids.has(gene.properties.name)) {\n                let node = { \n                    id: gene.identity,\n                    name: gene.properties.name,\n                    nodeColor: graphScheme.geneNode, \n                    fontColor: graphScheme.geneFont,\n                    nodeVal: graphScheme.nodeVal,\n                    nodeRelSize: graphScheme.nodeRelSize,\n                    scaleFont: graphScheme.scaleFont\n                }\n                nodes.push(node) \n                link.source = node.name\n                ids.add(node.name)\n            } else {\n                link.source = gene.properties.name\n            }\n        \n            const organ = row.get('o') \n            if (!ids.has(organ.properties.name)) {\n                let node = { \n                    id: organ.identity,\n                    name: organ.properties.name,\n                    nodeColor: graphScheme.organNode,\n                    fontColor: graphScheme.organFont,\n                    nodeVal: graphScheme.nodeVal,\n                    nodeRelSize: graphScheme.nodeRelSize,\n                    scaleFont: graphScheme.scaleFont\n                }\n                nodes.push(node) \n                link.target = node.name\n                ids.add(node.name)\n            } else {\n                link.target = organ.properties.name\n            }\n\n            links.push(link)\n\n        })\n        console.log(nodes) \n        console.log(links) \n        console.log('Data loaded')\n        session.close();\n        console.log('nodes', nodes)\n        onData( {nodes, links} )\n    } catch (e) {\n        throw e\n    }\n    finally {\n        await session.close()\n\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}