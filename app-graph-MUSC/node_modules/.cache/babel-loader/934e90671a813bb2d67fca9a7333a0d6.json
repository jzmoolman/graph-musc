{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.epochSecondAndNanoToLocalDateTime = exports.nanoOfDayToLocalTime = exports.epochDayToDate = void 0;\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar neo4j_driver_core_1 = require(\"neo4j-driver-core\");\n\nvar _a = neo4j_driver_core_1.internal.temporalUtil,\n    DAYS_0000_TO_1970 = _a.DAYS_0000_TO_1970,\n    DAYS_PER_400_YEAR_CYCLE = _a.DAYS_PER_400_YEAR_CYCLE,\n    NANOS_PER_HOUR = _a.NANOS_PER_HOUR,\n    NANOS_PER_MINUTE = _a.NANOS_PER_MINUTE,\n    NANOS_PER_SECOND = _a.NANOS_PER_SECOND,\n    SECONDS_PER_DAY = _a.SECONDS_PER_DAY,\n    floorDiv = _a.floorDiv,\n    floorMod = _a.floorMod;\n/**\n * Converts given epoch day to a local date.\n * @param {Integer|number|string} epochDay the epoch day to convert.\n * @return {Date} the date representing the epoch day in years, months and days.\n */\n\nfunction epochDayToDate(epochDay) {\n  epochDay = (0, neo4j_driver_core_1.int)(epochDay);\n  var zeroDay = epochDay.add(DAYS_0000_TO_1970).subtract(60);\n  var adjust = (0, neo4j_driver_core_1.int)(0);\n\n  if (zeroDay.lessThan(0)) {\n    var adjustCycles = zeroDay.add(1).div(DAYS_PER_400_YEAR_CYCLE).subtract(1);\n    adjust = adjustCycles.multiply(400);\n    zeroDay = zeroDay.add(adjustCycles.multiply(-DAYS_PER_400_YEAR_CYCLE));\n  }\n\n  var year = zeroDay.multiply(400).add(591).div(DAYS_PER_400_YEAR_CYCLE);\n  var dayOfYearEst = zeroDay.subtract(year.multiply(365).add(year.div(4)).subtract(year.div(100)).add(year.div(400)));\n\n  if (dayOfYearEst.lessThan(0)) {\n    year = year.subtract(1);\n    dayOfYearEst = zeroDay.subtract(year.multiply(365).add(year.div(4)).subtract(year.div(100)).add(year.div(400)));\n  }\n\n  year = year.add(adjust);\n  var marchDayOfYear = dayOfYearEst;\n  var marchMonth = marchDayOfYear.multiply(5).add(2).div(153);\n  var month = marchMonth.add(2).modulo(12).add(1);\n  var day = marchDayOfYear.subtract(marchMonth.multiply(306).add(5).div(10)).add(1);\n  year = year.add(marchMonth.div(10));\n  return new neo4j_driver_core_1.Date(year, month, day);\n}\n\nexports.epochDayToDate = epochDayToDate;\n/**\n * Converts nanoseconds of the day into local time.\n * @param {Integer|number|string} nanoOfDay the nanoseconds of the day to convert.\n * @return {LocalTime} the local time representing given nanoseconds of the day.\n */\n\nfunction nanoOfDayToLocalTime(nanoOfDay) {\n  nanoOfDay = (0, neo4j_driver_core_1.int)(nanoOfDay);\n  var hour = nanoOfDay.div(NANOS_PER_HOUR);\n  nanoOfDay = nanoOfDay.subtract(hour.multiply(NANOS_PER_HOUR));\n  var minute = nanoOfDay.div(NANOS_PER_MINUTE);\n  nanoOfDay = nanoOfDay.subtract(minute.multiply(NANOS_PER_MINUTE));\n  var second = nanoOfDay.div(NANOS_PER_SECOND);\n  var nanosecond = nanoOfDay.subtract(second.multiply(NANOS_PER_SECOND));\n  return new neo4j_driver_core_1.LocalTime(hour, minute, second, nanosecond);\n}\n\nexports.nanoOfDayToLocalTime = nanoOfDayToLocalTime;\n/**\n * Converts given epoch second and nanosecond adjustment into a local date time object.\n * @param {Integer|number|string} epochSecond the epoch second to use.\n * @param {Integer|number|string} nano the nanosecond to use.\n * @return {LocalDateTime} the local date time representing given epoch second and nano.\n */\n\nfunction epochSecondAndNanoToLocalDateTime(epochSecond, nano) {\n  var epochDay = floorDiv(epochSecond, SECONDS_PER_DAY);\n  var secondsOfDay = floorMod(epochSecond, SECONDS_PER_DAY);\n  var nanoOfDay = secondsOfDay.multiply(NANOS_PER_SECOND).add(nano);\n  var localDate = epochDayToDate(epochDay);\n  var localTime = nanoOfDayToLocalTime(nanoOfDay);\n  return new neo4j_driver_core_1.LocalDateTime(localDate.year, localDate.month, localDate.day, localTime.hour, localTime.minute, localTime.second, localTime.nanosecond);\n}\n\nexports.epochSecondAndNanoToLocalDateTime = epochSecondAndNanoToLocalDateTime;","map":{"version":3,"names":["Object","defineProperty","exports","value","epochSecondAndNanoToLocalDateTime","nanoOfDayToLocalTime","epochDayToDate","neo4j_driver_core_1","require","_a","internal","temporalUtil","DAYS_0000_TO_1970","DAYS_PER_400_YEAR_CYCLE","NANOS_PER_HOUR","NANOS_PER_MINUTE","NANOS_PER_SECOND","SECONDS_PER_DAY","floorDiv","floorMod","epochDay","int","zeroDay","add","subtract","adjust","lessThan","adjustCycles","div","multiply","year","dayOfYearEst","marchDayOfYear","marchMonth","month","modulo","day","Date","nanoOfDay","hour","minute","second","nanosecond","LocalTime","epochSecond","nano","secondsOfDay","localDate","localTime","LocalDateTime"],"sources":["/Users/zack/src/gene3/node_modules/neo4j-driver-bolt-connection/lib/packstream/temporal-factory.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.epochSecondAndNanoToLocalDateTime = exports.nanoOfDayToLocalTime = exports.epochDayToDate = void 0;\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar neo4j_driver_core_1 = require(\"neo4j-driver-core\");\nvar _a = neo4j_driver_core_1.internal.temporalUtil, DAYS_0000_TO_1970 = _a.DAYS_0000_TO_1970, DAYS_PER_400_YEAR_CYCLE = _a.DAYS_PER_400_YEAR_CYCLE, NANOS_PER_HOUR = _a.NANOS_PER_HOUR, NANOS_PER_MINUTE = _a.NANOS_PER_MINUTE, NANOS_PER_SECOND = _a.NANOS_PER_SECOND, SECONDS_PER_DAY = _a.SECONDS_PER_DAY, floorDiv = _a.floorDiv, floorMod = _a.floorMod;\n/**\n * Converts given epoch day to a local date.\n * @param {Integer|number|string} epochDay the epoch day to convert.\n * @return {Date} the date representing the epoch day in years, months and days.\n */\nfunction epochDayToDate(epochDay) {\n    epochDay = (0, neo4j_driver_core_1.int)(epochDay);\n    var zeroDay = epochDay.add(DAYS_0000_TO_1970).subtract(60);\n    var adjust = (0, neo4j_driver_core_1.int)(0);\n    if (zeroDay.lessThan(0)) {\n        var adjustCycles = zeroDay\n            .add(1)\n            .div(DAYS_PER_400_YEAR_CYCLE)\n            .subtract(1);\n        adjust = adjustCycles.multiply(400);\n        zeroDay = zeroDay.add(adjustCycles.multiply(-DAYS_PER_400_YEAR_CYCLE));\n    }\n    var year = zeroDay\n        .multiply(400)\n        .add(591)\n        .div(DAYS_PER_400_YEAR_CYCLE);\n    var dayOfYearEst = zeroDay.subtract(year\n        .multiply(365)\n        .add(year.div(4))\n        .subtract(year.div(100))\n        .add(year.div(400)));\n    if (dayOfYearEst.lessThan(0)) {\n        year = year.subtract(1);\n        dayOfYearEst = zeroDay.subtract(year\n            .multiply(365)\n            .add(year.div(4))\n            .subtract(year.div(100))\n            .add(year.div(400)));\n    }\n    year = year.add(adjust);\n    var marchDayOfYear = dayOfYearEst;\n    var marchMonth = marchDayOfYear\n        .multiply(5)\n        .add(2)\n        .div(153);\n    var month = marchMonth\n        .add(2)\n        .modulo(12)\n        .add(1);\n    var day = marchDayOfYear\n        .subtract(marchMonth\n        .multiply(306)\n        .add(5)\n        .div(10))\n        .add(1);\n    year = year.add(marchMonth.div(10));\n    return new neo4j_driver_core_1.Date(year, month, day);\n}\nexports.epochDayToDate = epochDayToDate;\n/**\n * Converts nanoseconds of the day into local time.\n * @param {Integer|number|string} nanoOfDay the nanoseconds of the day to convert.\n * @return {LocalTime} the local time representing given nanoseconds of the day.\n */\nfunction nanoOfDayToLocalTime(nanoOfDay) {\n    nanoOfDay = (0, neo4j_driver_core_1.int)(nanoOfDay);\n    var hour = nanoOfDay.div(NANOS_PER_HOUR);\n    nanoOfDay = nanoOfDay.subtract(hour.multiply(NANOS_PER_HOUR));\n    var minute = nanoOfDay.div(NANOS_PER_MINUTE);\n    nanoOfDay = nanoOfDay.subtract(minute.multiply(NANOS_PER_MINUTE));\n    var second = nanoOfDay.div(NANOS_PER_SECOND);\n    var nanosecond = nanoOfDay.subtract(second.multiply(NANOS_PER_SECOND));\n    return new neo4j_driver_core_1.LocalTime(hour, minute, second, nanosecond);\n}\nexports.nanoOfDayToLocalTime = nanoOfDayToLocalTime;\n/**\n * Converts given epoch second and nanosecond adjustment into a local date time object.\n * @param {Integer|number|string} epochSecond the epoch second to use.\n * @param {Integer|number|string} nano the nanosecond to use.\n * @return {LocalDateTime} the local date time representing given epoch second and nano.\n */\nfunction epochSecondAndNanoToLocalDateTime(epochSecond, nano) {\n    var epochDay = floorDiv(epochSecond, SECONDS_PER_DAY);\n    var secondsOfDay = floorMod(epochSecond, SECONDS_PER_DAY);\n    var nanoOfDay = secondsOfDay.multiply(NANOS_PER_SECOND).add(nano);\n    var localDate = epochDayToDate(epochDay);\n    var localTime = nanoOfDayToLocalTime(nanoOfDay);\n    return new neo4j_driver_core_1.LocalDateTime(localDate.year, localDate.month, localDate.day, localTime.hour, localTime.minute, localTime.second, localTime.nanosecond);\n}\nexports.epochSecondAndNanoToLocalDateTime = epochSecondAndNanoToLocalDateTime;\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,iCAAR,GAA4CF,OAAO,CAACG,oBAAR,GAA+BH,OAAO,CAACI,cAAR,GAAyB,KAAK,CAAzG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,mBAAmB,GAAGC,OAAO,CAAC,mBAAD,CAAjC;;AACA,IAAIC,EAAE,GAAGF,mBAAmB,CAACG,QAApB,CAA6BC,YAAtC;AAAA,IAAoDC,iBAAiB,GAAGH,EAAE,CAACG,iBAA3E;AAAA,IAA8FC,uBAAuB,GAAGJ,EAAE,CAACI,uBAA3H;AAAA,IAAoJC,cAAc,GAAGL,EAAE,CAACK,cAAxK;AAAA,IAAwLC,gBAAgB,GAAGN,EAAE,CAACM,gBAA9M;AAAA,IAAgOC,gBAAgB,GAAGP,EAAE,CAACO,gBAAtP;AAAA,IAAwQC,eAAe,GAAGR,EAAE,CAACQ,eAA7R;AAAA,IAA8SC,QAAQ,GAAGT,EAAE,CAACS,QAA5T;AAAA,IAAsUC,QAAQ,GAAGV,EAAE,CAACU,QAApV;AACA;AACA;AACA;AACA;AACA;;AACA,SAASb,cAAT,CAAwBc,QAAxB,EAAkC;EAC9BA,QAAQ,GAAG,CAAC,GAAGb,mBAAmB,CAACc,GAAxB,EAA6BD,QAA7B,CAAX;EACA,IAAIE,OAAO,GAAGF,QAAQ,CAACG,GAAT,CAAaX,iBAAb,EAAgCY,QAAhC,CAAyC,EAAzC,CAAd;EACA,IAAIC,MAAM,GAAG,CAAC,GAAGlB,mBAAmB,CAACc,GAAxB,EAA6B,CAA7B,CAAb;;EACA,IAAIC,OAAO,CAACI,QAAR,CAAiB,CAAjB,CAAJ,EAAyB;IACrB,IAAIC,YAAY,GAAGL,OAAO,CACrBC,GADc,CACV,CADU,EAEdK,GAFc,CAEVf,uBAFU,EAGdW,QAHc,CAGL,CAHK,CAAnB;IAIAC,MAAM,GAAGE,YAAY,CAACE,QAAb,CAAsB,GAAtB,CAAT;IACAP,OAAO,GAAGA,OAAO,CAACC,GAAR,CAAYI,YAAY,CAACE,QAAb,CAAsB,CAAChB,uBAAvB,CAAZ,CAAV;EACH;;EACD,IAAIiB,IAAI,GAAGR,OAAO,CACbO,QADM,CACG,GADH,EAENN,GAFM,CAEF,GAFE,EAGNK,GAHM,CAGFf,uBAHE,CAAX;EAIA,IAAIkB,YAAY,GAAGT,OAAO,CAACE,QAAR,CAAiBM,IAAI,CACnCD,QAD+B,CACtB,GADsB,EAE/BN,GAF+B,CAE3BO,IAAI,CAACF,GAAL,CAAS,CAAT,CAF2B,EAG/BJ,QAH+B,CAGtBM,IAAI,CAACF,GAAL,CAAS,GAAT,CAHsB,EAI/BL,GAJ+B,CAI3BO,IAAI,CAACF,GAAL,CAAS,GAAT,CAJ2B,CAAjB,CAAnB;;EAKA,IAAIG,YAAY,CAACL,QAAb,CAAsB,CAAtB,CAAJ,EAA8B;IAC1BI,IAAI,GAAGA,IAAI,CAACN,QAAL,CAAc,CAAd,CAAP;IACAO,YAAY,GAAGT,OAAO,CAACE,QAAR,CAAiBM,IAAI,CAC/BD,QAD2B,CAClB,GADkB,EAE3BN,GAF2B,CAEvBO,IAAI,CAACF,GAAL,CAAS,CAAT,CAFuB,EAG3BJ,QAH2B,CAGlBM,IAAI,CAACF,GAAL,CAAS,GAAT,CAHkB,EAI3BL,GAJ2B,CAIvBO,IAAI,CAACF,GAAL,CAAS,GAAT,CAJuB,CAAjB,CAAf;EAKH;;EACDE,IAAI,GAAGA,IAAI,CAACP,GAAL,CAASE,MAAT,CAAP;EACA,IAAIO,cAAc,GAAGD,YAArB;EACA,IAAIE,UAAU,GAAGD,cAAc,CAC1BH,QADY,CACH,CADG,EAEZN,GAFY,CAER,CAFQ,EAGZK,GAHY,CAGR,GAHQ,CAAjB;EAIA,IAAIM,KAAK,GAAGD,UAAU,CACjBV,GADO,CACH,CADG,EAEPY,MAFO,CAEA,EAFA,EAGPZ,GAHO,CAGH,CAHG,CAAZ;EAIA,IAAIa,GAAG,GAAGJ,cAAc,CACnBR,QADK,CACIS,UAAU,CACnBJ,QADS,CACA,GADA,EAETN,GAFS,CAEL,CAFK,EAGTK,GAHS,CAGL,EAHK,CADJ,EAKLL,GALK,CAKD,CALC,CAAV;EAMAO,IAAI,GAAGA,IAAI,CAACP,GAAL,CAASU,UAAU,CAACL,GAAX,CAAe,EAAf,CAAT,CAAP;EACA,OAAO,IAAIrB,mBAAmB,CAAC8B,IAAxB,CAA6BP,IAA7B,EAAmCI,KAAnC,EAA0CE,GAA1C,CAAP;AACH;;AACDlC,OAAO,CAACI,cAAR,GAAyBA,cAAzB;AACA;AACA;AACA;AACA;AACA;;AACA,SAASD,oBAAT,CAA8BiC,SAA9B,EAAyC;EACrCA,SAAS,GAAG,CAAC,GAAG/B,mBAAmB,CAACc,GAAxB,EAA6BiB,SAA7B,CAAZ;EACA,IAAIC,IAAI,GAAGD,SAAS,CAACV,GAAV,CAAcd,cAAd,CAAX;EACAwB,SAAS,GAAGA,SAAS,CAACd,QAAV,CAAmBe,IAAI,CAACV,QAAL,CAAcf,cAAd,CAAnB,CAAZ;EACA,IAAI0B,MAAM,GAAGF,SAAS,CAACV,GAAV,CAAcb,gBAAd,CAAb;EACAuB,SAAS,GAAGA,SAAS,CAACd,QAAV,CAAmBgB,MAAM,CAACX,QAAP,CAAgBd,gBAAhB,CAAnB,CAAZ;EACA,IAAI0B,MAAM,GAAGH,SAAS,CAACV,GAAV,CAAcZ,gBAAd,CAAb;EACA,IAAI0B,UAAU,GAAGJ,SAAS,CAACd,QAAV,CAAmBiB,MAAM,CAACZ,QAAP,CAAgBb,gBAAhB,CAAnB,CAAjB;EACA,OAAO,IAAIT,mBAAmB,CAACoC,SAAxB,CAAkCJ,IAAlC,EAAwCC,MAAxC,EAAgDC,MAAhD,EAAwDC,UAAxD,CAAP;AACH;;AACDxC,OAAO,CAACG,oBAAR,GAA+BA,oBAA/B;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASD,iCAAT,CAA2CwC,WAA3C,EAAwDC,IAAxD,EAA8D;EAC1D,IAAIzB,QAAQ,GAAGF,QAAQ,CAAC0B,WAAD,EAAc3B,eAAd,CAAvB;EACA,IAAI6B,YAAY,GAAG3B,QAAQ,CAACyB,WAAD,EAAc3B,eAAd,CAA3B;EACA,IAAIqB,SAAS,GAAGQ,YAAY,CAACjB,QAAb,CAAsBb,gBAAtB,EAAwCO,GAAxC,CAA4CsB,IAA5C,CAAhB;EACA,IAAIE,SAAS,GAAGzC,cAAc,CAACc,QAAD,CAA9B;EACA,IAAI4B,SAAS,GAAG3C,oBAAoB,CAACiC,SAAD,CAApC;EACA,OAAO,IAAI/B,mBAAmB,CAAC0C,aAAxB,CAAsCF,SAAS,CAACjB,IAAhD,EAAsDiB,SAAS,CAACb,KAAhE,EAAuEa,SAAS,CAACX,GAAjF,EAAsFY,SAAS,CAACT,IAAhG,EAAsGS,SAAS,CAACR,MAAhH,EAAwHQ,SAAS,CAACP,MAAlI,EAA0IO,SAAS,CAACN,UAApJ,CAAP;AACH;;AACDxC,OAAO,CAACE,iCAAR,GAA4CA,iCAA5C"},"metadata":{},"sourceType":"script"}