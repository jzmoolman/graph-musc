{"ast":null,"code":"\"use strict\";\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Stats = exports.QueryStatistics = exports.ProfiledPlan = exports.Plan = exports.Notification = exports.ServerInfo = exports.queryType = void 0;\n\nvar integer_1 = __importStar(require(\"./integer\"));\n/**\n * A ResultSummary instance contains structured metadata for a {@link Result}.\n * @access public\n */\n\n\nvar ResultSummary =\n/** @class */\nfunction () {\n  /**\n   * @constructor\n   * @param {string} query - The query this summary is for\n   * @param {Object} parameters - Parameters for the query\n   * @param {Object} metadata - Query metadata\n   * @param {number|undefined} protocolVersion - Bolt Protocol Version\n   */\n  function ResultSummary(query, parameters, metadata, protocolVersion) {\n    /**\n     * The query and parameters this summary is for.\n     * @type {{text: string, parameters: Object}}\n     * @public\n     */\n    this.query = {\n      text: query,\n      parameters: parameters\n    };\n    /**\n     * The type of query executed. Can be \"r\" for read-only query, \"rw\" for read-write query,\n     * \"w\" for write-only query and \"s\" for schema-write query.\n     * String constants are available in {@link queryType} object.\n     * @type {string}\n     * @public\n     */\n\n    this.queryType = metadata.type;\n    /**\n     * Counters for operations the query triggered.\n     * @type {QueryStatistics}\n     * @public\n     */\n\n    this.counters = new QueryStatistics(metadata.stats || {}); // for backwards compatibility, remove in future version\n\n    /**\n     * Use {@link ResultSummary.counters} instead.\n     * @type {QueryStatistics}\n     * @deprecated\n     */\n\n    this.updateStatistics = this.counters;\n    /**\n     * This describes how the database will execute the query.\n     * Query plan for the executed query if available, otherwise undefined.\n     * Will only be populated for queries that start with \"EXPLAIN\".\n     * @type {Plan|false}\n     * @public\n     */\n\n    this.plan = metadata.plan || metadata.profile ? new Plan(metadata.plan || metadata.profile) : false;\n    /**\n     * This describes how the database did execute your query. This will contain detailed information about what\n     * each step of the plan did. Profiled query plan for the executed query if available, otherwise undefined.\n     * Will only be populated for queries that start with \"PROFILE\".\n     * @type {ProfiledPlan}\n     * @public\n     */\n\n    this.profile = metadata.profile ? new ProfiledPlan(metadata.profile) : false;\n    /**\n     * An array of notifications that might arise when executing the query. Notifications can be warnings about\n     * problematic queries or other valuable information that can be presented in a client. Unlike failures\n     * or errors, notifications do not affect the execution of a query.\n     * @type {Array<Notification>}\n     * @public\n     */\n\n    this.notifications = this._buildNotifications(metadata.notifications);\n    /**\n     * The basic information of the server where the result is obtained from.\n     * @type {ServerInfo}\n     * @public\n     */\n\n    this.server = new ServerInfo(metadata.server, protocolVersion);\n    /**\n     * The time it took the server to consume the result.\n     * @type {number}\n     * @public\n     */\n\n    this.resultConsumedAfter = metadata.result_consumed_after;\n    /**\n     * The time it took the server to make the result available for consumption in milliseconds.\n     * @type {number}\n     * @public\n     */\n\n    this.resultAvailableAfter = metadata.result_available_after;\n    /**\n     * The database name where this summary is obtained from.\n     * @type {{name: string}}\n     * @public\n     */\n\n    this.database = {\n      name: metadata.db || null\n    };\n  }\n\n  ResultSummary.prototype._buildNotifications = function (notifications) {\n    if (!notifications) {\n      return [];\n    }\n\n    return notifications.map(function (n) {\n      return new Notification(n);\n    });\n  };\n  /**\n   * Check if the result summary has a plan\n   * @return {boolean}\n   */\n\n\n  ResultSummary.prototype.hasPlan = function () {\n    return this.plan instanceof Plan;\n  };\n  /**\n   * Check if the result summary has a profile\n   * @return {boolean}\n   */\n\n\n  ResultSummary.prototype.hasProfile = function () {\n    return this.profile instanceof ProfiledPlan;\n  };\n\n  return ResultSummary;\n}();\n/**\n * Class for execution plan received by prepending Cypher with EXPLAIN.\n * @access public\n */\n\n\nvar Plan =\n/** @class */\nfunction () {\n  /**\n   * Create a Plan instance\n   * @constructor\n   * @param {Object} plan - Object with plan data\n   */\n  function Plan(plan) {\n    this.operatorType = plan.operatorType;\n    this.identifiers = plan.identifiers;\n    this.arguments = plan.args;\n    this.children = plan.children ? plan.children.map(function (child) {\n      return new Plan(child);\n    }) : [];\n  }\n\n  return Plan;\n}();\n\nexports.Plan = Plan;\n/**\n * Class for execution plan received by prepending Cypher with PROFILE.\n * @access public\n */\n\nvar ProfiledPlan =\n/** @class */\nfunction () {\n  /**\n   * Create a ProfiledPlan instance\n   * @constructor\n   * @param {Object} profile - Object with profile data\n   */\n  function ProfiledPlan(profile) {\n    this.operatorType = profile.operatorType;\n    this.identifiers = profile.identifiers;\n    this.arguments = profile.args;\n    this.dbHits = valueOrDefault('dbHits', profile);\n    this.rows = valueOrDefault('rows', profile);\n    this.pageCacheMisses = valueOrDefault('pageCacheMisses', profile);\n    this.pageCacheHits = valueOrDefault('pageCacheHits', profile);\n    this.pageCacheHitRatio = valueOrDefault('pageCacheHitRatio', profile);\n    this.time = valueOrDefault('time', profile);\n    this.children = profile.children ? profile.children.map(function (child) {\n      return new ProfiledPlan(child);\n    }) : [];\n  }\n\n  ProfiledPlan.prototype.hasPageCacheStats = function () {\n    return this.pageCacheMisses > 0 || this.pageCacheHits > 0 || this.pageCacheHitRatio > 0;\n  };\n\n  return ProfiledPlan;\n}();\n\nexports.ProfiledPlan = ProfiledPlan;\n/**\n * Stats Query statistics dictionary for a {@link QueryStatistics}\n * @public\n */\n\nvar Stats =\n/** @class */\nfunction () {\n  /**\n   * @constructor\n   * @private\n   */\n  function Stats() {\n    /**\n     * nodes created\n     * @type {number}\n     * @public\n     */\n    this.nodesCreated = 0;\n    /**\n     * nodes deleted\n     * @type {number}\n     * @public\n     */\n\n    this.nodesDeleted = 0;\n    /**\n     * relationships created\n     * @type {number}\n     * @public\n     */\n\n    this.relationshipsCreated = 0;\n    /**\n     * relationships deleted\n     * @type {number}\n     * @public\n     */\n\n    this.relationshipsDeleted = 0;\n    /**\n     * properties set\n     * @type {number}\n     * @public\n     */\n\n    this.propertiesSet = 0;\n    /**\n     * labels added\n     * @type {number}\n     * @public\n     */\n\n    this.labelsAdded = 0;\n    /**\n     * labels removed\n     * @type {number}\n     * @public\n     */\n\n    this.labelsRemoved = 0;\n    /**\n     * indexes added\n     * @type {number}\n     * @public\n     */\n\n    this.indexesAdded = 0;\n    /**\n     * indexes removed\n     * @type {number}\n     * @public\n     */\n\n    this.indexesRemoved = 0;\n    /**\n     * constraints added\n     * @type {number}\n     * @public\n     */\n\n    this.constraintsAdded = 0;\n    /**\n     * constraints removed\n     * @type {number}\n     * @public\n     */\n\n    this.constraintsRemoved = 0;\n  }\n\n  return Stats;\n}();\n\nexports.Stats = Stats;\n/**\n * Get statistical information for a {@link Result}.\n * @access public\n */\n\nvar QueryStatistics =\n/** @class */\nfunction () {\n  /**\n   * Structurize the statistics\n   * @constructor\n   * @param {Object} statistics - Result statistics\n   */\n  function QueryStatistics(statistics) {\n    var _this = this;\n\n    this._stats = {\n      nodesCreated: 0,\n      nodesDeleted: 0,\n      relationshipsCreated: 0,\n      relationshipsDeleted: 0,\n      propertiesSet: 0,\n      labelsAdded: 0,\n      labelsRemoved: 0,\n      indexesAdded: 0,\n      indexesRemoved: 0,\n      constraintsAdded: 0,\n      constraintsRemoved: 0\n    };\n    this._systemUpdates = 0;\n    Object.keys(statistics).forEach(function (index) {\n      // To camelCase\n      var camelCaseIndex = index.replace(/(-\\w)/g, function (m) {\n        return m[1].toUpperCase();\n      });\n\n      if (camelCaseIndex in _this._stats) {\n        _this._stats[camelCaseIndex] = intValue(statistics[index]);\n      } else if (camelCaseIndex === 'systemUpdates') {\n        _this._systemUpdates = intValue(statistics[index]);\n      } else if (camelCaseIndex === 'containsSystemUpdates') {\n        _this._containsSystemUpdates = statistics[index];\n      } else if (camelCaseIndex === 'containsUpdates') {\n        _this._containsUpdates = statistics[index];\n      }\n    });\n    this._stats = Object.freeze(this._stats);\n  }\n  /**\n   * Did the database get updated?\n   * @return {boolean}\n   */\n\n\n  QueryStatistics.prototype.containsUpdates = function () {\n    var _this = this;\n\n    return this._containsUpdates !== undefined ? this._containsUpdates : Object.keys(this._stats).reduce(function (last, current) {\n      return last + _this._stats[current];\n    }, 0) > 0;\n  };\n  /**\n   * Returns the query statistics updates in a dictionary.\n   * @returns {Stats}\n   */\n\n\n  QueryStatistics.prototype.updates = function () {\n    return this._stats;\n  };\n  /**\n   * Return true if the system database get updated, otherwise false\n   * @returns {boolean} - If the system database get updated or not.\n   */\n\n\n  QueryStatistics.prototype.containsSystemUpdates = function () {\n    return this._containsSystemUpdates !== undefined ? this._containsSystemUpdates : this._systemUpdates > 0;\n  };\n  /**\n   * @returns {number} - Number of system updates\n   */\n\n\n  QueryStatistics.prototype.systemUpdates = function () {\n    return this._systemUpdates;\n  };\n\n  return QueryStatistics;\n}();\n\nexports.QueryStatistics = QueryStatistics;\n/**\n * Class for Cypher notifications\n * @access public\n */\n\nvar Notification =\n/** @class */\nfunction () {\n  /**\n   * Create a Notification instance\n   * @constructor\n   * @param {Object} notification - Object with notification data\n   */\n  function Notification(notification) {\n    this.code = notification.code;\n    this.title = notification.title;\n    this.description = notification.description;\n    this.severity = notification.severity;\n    this.position = Notification._constructPosition(notification.position);\n  }\n\n  Notification._constructPosition = function (pos) {\n    if (!pos) {\n      return {};\n    }\n\n    return {\n      offset: intValue(pos.offset),\n      line: intValue(pos.line),\n      column: intValue(pos.column)\n    };\n  };\n\n  return Notification;\n}();\n\nexports.Notification = Notification;\n/**\n * Class for exposing server info from a result.\n * @access public\n */\n\nvar ServerInfo =\n/** @class */\nfunction () {\n  /**\n   * Create a ServerInfo instance\n   * @constructor\n   * @param {Object} serverMeta - Object with serverMeta data\n   * @param {Object} connectionInfo - Bolt connection info\n   * @param {number} protocolVersion - Bolt Protocol Version\n   */\n  function ServerInfo(serverMeta, protocolVersion) {\n    if (serverMeta) {\n      /**\n       * The server adress\n       * @type {string}\n       * @public\n       */\n      this.address = serverMeta.address;\n      /**\n       * The server version string.\n       *\n       * See {@link ServerInfo#protocolVersion} and {@link ServerInfo#agent}\n       * @type {string}\n       * @deprecated in 4.3, please use ServerInfo#agent, ServerInfo#protocolVersion, or call the <i>dbms.components</i> procedure instead.\n       * <b>Method might be removed in the next major release.</b>\n       \n       * @public\n       */\n\n      this.version = serverMeta.version;\n      /**\n       * The server user agent string\n       * @type {string}\n       * @public\n       */\n\n      this.agent = serverMeta.version;\n    }\n    /**\n     * The protocol version used by the connection\n     * @type {number}\n     * @public\n     */\n\n\n    this.protocolVersion = protocolVersion;\n  }\n\n  return ServerInfo;\n}();\n\nexports.ServerInfo = ServerInfo;\n\nfunction intValue(value) {\n  if (value instanceof integer_1.default) {\n    return value.toInt();\n  } else if (typeof value == 'bigint') {\n    return (0, integer_1.int)(value).toInt();\n  } else {\n    return value;\n  }\n}\n\nfunction valueOrDefault(key, values, defaultValue) {\n  if (defaultValue === void 0) {\n    defaultValue = 0;\n  }\n\n  if (key in values) {\n    var value = values[key];\n    return intValue(value);\n  } else {\n    return defaultValue;\n  }\n}\n/**\n * The constants for query types\n * @type {{SCHEMA_WRITE: string, WRITE_ONLY: string, READ_ONLY: string, READ_WRITE: string}}\n */\n\n\nvar queryType = {\n  READ_ONLY: 'r',\n  READ_WRITE: 'rw',\n  WRITE_ONLY: 'w',\n  SCHEMA_WRITE: 's'\n};\nexports.queryType = queryType;\nexports.default = ResultSummary;","map":{"version":3,"names":["__createBinding","Object","create","o","m","k","k2","undefined","defineProperty","enumerable","get","__setModuleDefault","v","value","__importStar","mod","__esModule","result","prototype","hasOwnProperty","call","exports","Stats","QueryStatistics","ProfiledPlan","Plan","Notification","ServerInfo","queryType","integer_1","require","ResultSummary","query","parameters","metadata","protocolVersion","text","type","counters","stats","updateStatistics","plan","profile","notifications","_buildNotifications","server","resultConsumedAfter","result_consumed_after","resultAvailableAfter","result_available_after","database","name","db","map","n","hasPlan","hasProfile","operatorType","identifiers","arguments","args","children","child","dbHits","valueOrDefault","rows","pageCacheMisses","pageCacheHits","pageCacheHitRatio","time","hasPageCacheStats","nodesCreated","nodesDeleted","relationshipsCreated","relationshipsDeleted","propertiesSet","labelsAdded","labelsRemoved","indexesAdded","indexesRemoved","constraintsAdded","constraintsRemoved","statistics","_this","_stats","_systemUpdates","keys","forEach","index","camelCaseIndex","replace","toUpperCase","intValue","_containsSystemUpdates","_containsUpdates","freeze","containsUpdates","reduce","last","current","updates","containsSystemUpdates","systemUpdates","notification","code","title","description","severity","position","_constructPosition","pos","offset","line","column","serverMeta","address","version","agent","default","toInt","int","key","values","defaultValue","READ_ONLY","READ_WRITE","WRITE_ONLY","SCHEMA_WRITE"],"sources":["/Users/zack/src/_-MUSC/gene-graph-MUSC/node_modules/neo4j-driver-core/lib/result-summary.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Stats = exports.QueryStatistics = exports.ProfiledPlan = exports.Plan = exports.Notification = exports.ServerInfo = exports.queryType = void 0;\nvar integer_1 = __importStar(require(\"./integer\"));\n/**\n * A ResultSummary instance contains structured metadata for a {@link Result}.\n * @access public\n */\nvar ResultSummary = /** @class */ (function () {\n    /**\n     * @constructor\n     * @param {string} query - The query this summary is for\n     * @param {Object} parameters - Parameters for the query\n     * @param {Object} metadata - Query metadata\n     * @param {number|undefined} protocolVersion - Bolt Protocol Version\n     */\n    function ResultSummary(query, parameters, metadata, protocolVersion) {\n        /**\n         * The query and parameters this summary is for.\n         * @type {{text: string, parameters: Object}}\n         * @public\n         */\n        this.query = { text: query, parameters: parameters };\n        /**\n         * The type of query executed. Can be \"r\" for read-only query, \"rw\" for read-write query,\n         * \"w\" for write-only query and \"s\" for schema-write query.\n         * String constants are available in {@link queryType} object.\n         * @type {string}\n         * @public\n         */\n        this.queryType = metadata.type;\n        /**\n         * Counters for operations the query triggered.\n         * @type {QueryStatistics}\n         * @public\n         */\n        this.counters = new QueryStatistics(metadata.stats || {});\n        // for backwards compatibility, remove in future version\n        /**\n         * Use {@link ResultSummary.counters} instead.\n         * @type {QueryStatistics}\n         * @deprecated\n         */\n        this.updateStatistics = this.counters;\n        /**\n         * This describes how the database will execute the query.\n         * Query plan for the executed query if available, otherwise undefined.\n         * Will only be populated for queries that start with \"EXPLAIN\".\n         * @type {Plan|false}\n         * @public\n         */\n        this.plan =\n            metadata.plan || metadata.profile\n                ? new Plan(metadata.plan || metadata.profile)\n                : false;\n        /**\n         * This describes how the database did execute your query. This will contain detailed information about what\n         * each step of the plan did. Profiled query plan for the executed query if available, otherwise undefined.\n         * Will only be populated for queries that start with \"PROFILE\".\n         * @type {ProfiledPlan}\n         * @public\n         */\n        this.profile = metadata.profile ? new ProfiledPlan(metadata.profile) : false;\n        /**\n         * An array of notifications that might arise when executing the query. Notifications can be warnings about\n         * problematic queries or other valuable information that can be presented in a client. Unlike failures\n         * or errors, notifications do not affect the execution of a query.\n         * @type {Array<Notification>}\n         * @public\n         */\n        this.notifications = this._buildNotifications(metadata.notifications);\n        /**\n         * The basic information of the server where the result is obtained from.\n         * @type {ServerInfo}\n         * @public\n         */\n        this.server = new ServerInfo(metadata.server, protocolVersion);\n        /**\n         * The time it took the server to consume the result.\n         * @type {number}\n         * @public\n         */\n        this.resultConsumedAfter = metadata.result_consumed_after;\n        /**\n         * The time it took the server to make the result available for consumption in milliseconds.\n         * @type {number}\n         * @public\n         */\n        this.resultAvailableAfter = metadata.result_available_after;\n        /**\n         * The database name where this summary is obtained from.\n         * @type {{name: string}}\n         * @public\n         */\n        this.database = { name: metadata.db || null };\n    }\n    ResultSummary.prototype._buildNotifications = function (notifications) {\n        if (!notifications) {\n            return [];\n        }\n        return notifications.map(function (n) {\n            return new Notification(n);\n        });\n    };\n    /**\n     * Check if the result summary has a plan\n     * @return {boolean}\n     */\n    ResultSummary.prototype.hasPlan = function () {\n        return this.plan instanceof Plan;\n    };\n    /**\n     * Check if the result summary has a profile\n     * @return {boolean}\n     */\n    ResultSummary.prototype.hasProfile = function () {\n        return this.profile instanceof ProfiledPlan;\n    };\n    return ResultSummary;\n}());\n/**\n * Class for execution plan received by prepending Cypher with EXPLAIN.\n * @access public\n */\nvar Plan = /** @class */ (function () {\n    /**\n     * Create a Plan instance\n     * @constructor\n     * @param {Object} plan - Object with plan data\n     */\n    function Plan(plan) {\n        this.operatorType = plan.operatorType;\n        this.identifiers = plan.identifiers;\n        this.arguments = plan.args;\n        this.children = plan.children\n            ? plan.children.map(function (child) { return new Plan(child); })\n            : [];\n    }\n    return Plan;\n}());\nexports.Plan = Plan;\n/**\n * Class for execution plan received by prepending Cypher with PROFILE.\n * @access public\n */\nvar ProfiledPlan = /** @class */ (function () {\n    /**\n     * Create a ProfiledPlan instance\n     * @constructor\n     * @param {Object} profile - Object with profile data\n     */\n    function ProfiledPlan(profile) {\n        this.operatorType = profile.operatorType;\n        this.identifiers = profile.identifiers;\n        this.arguments = profile.args;\n        this.dbHits = valueOrDefault('dbHits', profile);\n        this.rows = valueOrDefault('rows', profile);\n        this.pageCacheMisses = valueOrDefault('pageCacheMisses', profile);\n        this.pageCacheHits = valueOrDefault('pageCacheHits', profile);\n        this.pageCacheHitRatio = valueOrDefault('pageCacheHitRatio', profile);\n        this.time = valueOrDefault('time', profile);\n        this.children = profile.children\n            ? profile.children.map(function (child) { return new ProfiledPlan(child); })\n            : [];\n    }\n    ProfiledPlan.prototype.hasPageCacheStats = function () {\n        return (this.pageCacheMisses > 0 ||\n            this.pageCacheHits > 0 ||\n            this.pageCacheHitRatio > 0);\n    };\n    return ProfiledPlan;\n}());\nexports.ProfiledPlan = ProfiledPlan;\n/**\n * Stats Query statistics dictionary for a {@link QueryStatistics}\n * @public\n */\nvar Stats = /** @class */ (function () {\n    /**\n     * @constructor\n     * @private\n     */\n    function Stats() {\n        /**\n         * nodes created\n         * @type {number}\n         * @public\n         */\n        this.nodesCreated = 0;\n        /**\n         * nodes deleted\n         * @type {number}\n         * @public\n         */\n        this.nodesDeleted = 0;\n        /**\n         * relationships created\n         * @type {number}\n         * @public\n         */\n        this.relationshipsCreated = 0;\n        /**\n         * relationships deleted\n         * @type {number}\n         * @public\n         */\n        this.relationshipsDeleted = 0;\n        /**\n         * properties set\n         * @type {number}\n         * @public\n         */\n        this.propertiesSet = 0;\n        /**\n         * labels added\n         * @type {number}\n         * @public\n         */\n        this.labelsAdded = 0;\n        /**\n         * labels removed\n         * @type {number}\n         * @public\n         */\n        this.labelsRemoved = 0;\n        /**\n         * indexes added\n         * @type {number}\n         * @public\n         */\n        this.indexesAdded = 0;\n        /**\n         * indexes removed\n         * @type {number}\n         * @public\n         */\n        this.indexesRemoved = 0;\n        /**\n         * constraints added\n         * @type {number}\n         * @public\n         */\n        this.constraintsAdded = 0;\n        /**\n         * constraints removed\n         * @type {number}\n         * @public\n         */\n        this.constraintsRemoved = 0;\n    }\n    return Stats;\n}());\nexports.Stats = Stats;\n/**\n * Get statistical information for a {@link Result}.\n * @access public\n */\nvar QueryStatistics = /** @class */ (function () {\n    /**\n     * Structurize the statistics\n     * @constructor\n     * @param {Object} statistics - Result statistics\n     */\n    function QueryStatistics(statistics) {\n        var _this = this;\n        this._stats = {\n            nodesCreated: 0,\n            nodesDeleted: 0,\n            relationshipsCreated: 0,\n            relationshipsDeleted: 0,\n            propertiesSet: 0,\n            labelsAdded: 0,\n            labelsRemoved: 0,\n            indexesAdded: 0,\n            indexesRemoved: 0,\n            constraintsAdded: 0,\n            constraintsRemoved: 0,\n        };\n        this._systemUpdates = 0;\n        Object.keys(statistics).forEach(function (index) {\n            // To camelCase\n            var camelCaseIndex = index.replace(/(-\\w)/g, function (m) { return m[1].toUpperCase(); });\n            if (camelCaseIndex in _this._stats) {\n                _this._stats[camelCaseIndex] = intValue(statistics[index]);\n            }\n            else if (camelCaseIndex === 'systemUpdates') {\n                _this._systemUpdates = intValue(statistics[index]);\n            }\n            else if (camelCaseIndex === 'containsSystemUpdates') {\n                _this._containsSystemUpdates = statistics[index];\n            }\n            else if (camelCaseIndex === 'containsUpdates') {\n                _this._containsUpdates = statistics[index];\n            }\n        });\n        this._stats = Object.freeze(this._stats);\n    }\n    /**\n     * Did the database get updated?\n     * @return {boolean}\n     */\n    QueryStatistics.prototype.containsUpdates = function () {\n        var _this = this;\n        return this._containsUpdates !== undefined ?\n            this._containsUpdates : (Object.keys(this._stats).reduce(function (last, current) {\n            return last + _this._stats[current];\n        }, 0) > 0);\n    };\n    /**\n     * Returns the query statistics updates in a dictionary.\n     * @returns {Stats}\n     */\n    QueryStatistics.prototype.updates = function () {\n        return this._stats;\n    };\n    /**\n     * Return true if the system database get updated, otherwise false\n     * @returns {boolean} - If the system database get updated or not.\n     */\n    QueryStatistics.prototype.containsSystemUpdates = function () {\n        return this._containsSystemUpdates !== undefined ?\n            this._containsSystemUpdates : this._systemUpdates > 0;\n    };\n    /**\n     * @returns {number} - Number of system updates\n     */\n    QueryStatistics.prototype.systemUpdates = function () {\n        return this._systemUpdates;\n    };\n    return QueryStatistics;\n}());\nexports.QueryStatistics = QueryStatistics;\n/**\n * Class for Cypher notifications\n * @access public\n */\nvar Notification = /** @class */ (function () {\n    /**\n     * Create a Notification instance\n     * @constructor\n     * @param {Object} notification - Object with notification data\n     */\n    function Notification(notification) {\n        this.code = notification.code;\n        this.title = notification.title;\n        this.description = notification.description;\n        this.severity = notification.severity;\n        this.position = Notification._constructPosition(notification.position);\n    }\n    Notification._constructPosition = function (pos) {\n        if (!pos) {\n            return {};\n        }\n        return {\n            offset: intValue(pos.offset),\n            line: intValue(pos.line),\n            column: intValue(pos.column)\n        };\n    };\n    return Notification;\n}());\nexports.Notification = Notification;\n/**\n * Class for exposing server info from a result.\n * @access public\n */\nvar ServerInfo = /** @class */ (function () {\n    /**\n     * Create a ServerInfo instance\n     * @constructor\n     * @param {Object} serverMeta - Object with serverMeta data\n     * @param {Object} connectionInfo - Bolt connection info\n     * @param {number} protocolVersion - Bolt Protocol Version\n     */\n    function ServerInfo(serverMeta, protocolVersion) {\n        if (serverMeta) {\n            /**\n             * The server adress\n             * @type {string}\n             * @public\n             */\n            this.address = serverMeta.address;\n            /**\n             * The server version string.\n             *\n             * See {@link ServerInfo#protocolVersion} and {@link ServerInfo#agent}\n             * @type {string}\n             * @deprecated in 4.3, please use ServerInfo#agent, ServerInfo#protocolVersion, or call the <i>dbms.components</i> procedure instead.\n             * <b>Method might be removed in the next major release.</b>\n             \n             * @public\n             */\n            this.version = serverMeta.version;\n            /**\n             * The server user agent string\n             * @type {string}\n             * @public\n             */\n            this.agent = serverMeta.version;\n        }\n        /**\n         * The protocol version used by the connection\n         * @type {number}\n         * @public\n         */\n        this.protocolVersion = protocolVersion;\n    }\n    return ServerInfo;\n}());\nexports.ServerInfo = ServerInfo;\nfunction intValue(value) {\n    if (value instanceof integer_1.default) {\n        return value.toInt();\n    }\n    else if (typeof value == 'bigint') {\n        return (0, integer_1.int)(value).toInt();\n    }\n    else {\n        return value;\n    }\n}\nfunction valueOrDefault(key, values, defaultValue) {\n    if (defaultValue === void 0) { defaultValue = 0; }\n    if (key in values) {\n        var value = values[key];\n        return intValue(value);\n    }\n    else {\n        return defaultValue;\n    }\n}\n/**\n * The constants for query types\n * @type {{SCHEMA_WRITE: string, WRITE_ONLY: string, READ_ONLY: string, READ_WRITE: string}}\n */\nvar queryType = {\n    READ_ONLY: 'r',\n    READ_WRITE: 'rw',\n    WRITE_ONLY: 'w',\n    SCHEMA_WRITE: 's'\n};\nexports.queryType = queryType;\nexports.default = ResultSummary;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}