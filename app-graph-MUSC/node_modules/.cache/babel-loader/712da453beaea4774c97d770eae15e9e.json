{"ast":null,"code":"\"use strict\";\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EMPTY_CONNECTION_HOLDER = exports.ReadOnlyConnectionHolder = exports.ConnectionHolder = void 0;\n\nvar error_1 = require(\"../error\");\n\nvar util_1 = require(\"./util\");\n\nvar constants_1 = require(\"./constants\");\n\nvar bookmark_1 = require(\"./bookmark\");\n/**\n * Utility to lazily initialize connections and return them back to the pool when unused.\n * @private\n */\n\n\nvar ConnectionHolder =\n/** @class */\nfunction () {\n  /**\n   * @constructor\n   * @param {object} params\n   * @property {string} params.mode - the access mode for new connection holder.\n   * @property {string} params.database - the target database name.\n   * @property {Bookmark} params.bookmark - the last bookmark\n   * @property {ConnectionProvider} params.connectionProvider - the connection provider to acquire connections from.\n   * @property {string?} params.impersonatedUser - the user which will be impersonated\n   * @property {function(databaseName:string)} params.onDatabaseNameResolved - callback called when the database name is resolved\n   */\n  function ConnectionHolder(_a) {\n    var _b = _a === void 0 ? {} : _a,\n        _c = _b.mode,\n        mode = _c === void 0 ? constants_1.ACCESS_MODE_WRITE : _c,\n        _d = _b.database,\n        database = _d === void 0 ? '' : _d,\n        bookmark = _b.bookmark,\n        connectionProvider = _b.connectionProvider,\n        impersonatedUser = _b.impersonatedUser,\n        onDatabaseNameResolved = _b.onDatabaseNameResolved;\n\n    this._mode = mode;\n    this._database = database ? (0, util_1.assertString)(database, 'database') : '';\n    this._bookmark = bookmark || bookmark_1.Bookmark.empty();\n    this._connectionProvider = connectionProvider;\n    this._impersonatedUser = impersonatedUser;\n    this._referenceCount = 0;\n    this._connectionPromise = Promise.resolve();\n    this._onDatabaseNameResolved = onDatabaseNameResolved;\n  }\n\n  ConnectionHolder.prototype.mode = function () {\n    return this._mode;\n  };\n\n  ConnectionHolder.prototype.database = function () {\n    return this._database;\n  };\n\n  ConnectionHolder.prototype.setDatabase = function (database) {\n    this._database = database;\n  };\n\n  ConnectionHolder.prototype.bookmark = function () {\n    return this._bookmark;\n  };\n\n  ConnectionHolder.prototype.connectionProvider = function () {\n    return this._connectionProvider;\n  };\n\n  ConnectionHolder.prototype.referenceCount = function () {\n    return this._referenceCount;\n  };\n\n  ConnectionHolder.prototype.initializeConnection = function () {\n    if (this._referenceCount === 0 && this._connectionProvider) {\n      this._connectionPromise = this._connectionProvider.acquireConnection({\n        accessMode: this._mode,\n        database: this._database,\n        bookmarks: this._bookmark,\n        impersonatedUser: this._impersonatedUser,\n        onDatabaseNameResolved: this._onDatabaseNameResolved\n      });\n    } else {\n      this._referenceCount++;\n      return false;\n    }\n\n    this._referenceCount++;\n    return true;\n  };\n\n  ConnectionHolder.prototype.getConnection = function () {\n    return this._connectionPromise;\n  };\n\n  ConnectionHolder.prototype.releaseConnection = function () {\n    if (this._referenceCount === 0) {\n      return this._connectionPromise;\n    }\n\n    this._referenceCount--;\n\n    if (this._referenceCount === 0) {\n      return this._releaseConnection();\n    }\n\n    return this._connectionPromise;\n  };\n\n  ConnectionHolder.prototype.close = function () {\n    if (this._referenceCount === 0) {\n      return this._connectionPromise;\n    }\n\n    this._referenceCount = 0;\n    return this._releaseConnection();\n  };\n  /**\n   * Return the current pooled connection instance to the connection pool.\n   * We don't pool Session instances, to avoid users using the Session after they've called close.\n   * The `Session` object is just a thin wrapper around Connection anyway, so it makes little difference.\n   * @return {Promise} - promise resolved then connection is returned to the pool.\n   * @private\n   */\n\n\n  ConnectionHolder.prototype._releaseConnection = function () {\n    this._connectionPromise = this._connectionPromise.then(function (connection) {\n      if (connection) {\n        if (connection.isOpen()) {\n          return connection.resetAndFlush().catch(ignoreError).then(function () {\n            return connection._release();\n          });\n        }\n\n        return connection._release();\n      } else {\n        return Promise.resolve();\n      }\n    }).catch(ignoreError);\n    return this._connectionPromise;\n  };\n\n  return ConnectionHolder;\n}();\n\nexports.ConnectionHolder = ConnectionHolder;\n/**\n * Provides a interaction with a ConnectionHolder without change it state by\n * releasing or initilizing\n */\n\nvar ReadOnlyConnectionHolder =\n/** @class */\nfunction (_super) {\n  __extends(ReadOnlyConnectionHolder, _super);\n  /**\n   * Contructor\n   * @param {ConnectionHolder} connectionHolder the connection holder which will treat the requests\n   */\n\n\n  function ReadOnlyConnectionHolder(connectionHolder) {\n    var _this = _super.call(this, {\n      mode: connectionHolder.mode(),\n      database: connectionHolder.database(),\n      bookmark: connectionHolder.bookmark(),\n      connectionProvider: connectionHolder.connectionProvider()\n    }) || this;\n\n    _this._connectionHolder = connectionHolder;\n    return _this;\n  }\n  /**\n   * Return the true if the connection is suppose to be initilized with the command.\n   *\n   * @return {boolean}\n   */\n\n\n  ReadOnlyConnectionHolder.prototype.initializeConnection = function () {\n    if (this._connectionHolder.referenceCount() === 0) {\n      return false;\n    }\n\n    return true;\n  };\n  /**\n   * Get the current connection promise.\n   * @return {Promise<Connection>} promise resolved with the current connection.\n   */\n\n\n  ReadOnlyConnectionHolder.prototype.getConnection = function () {\n    return this._connectionHolder.getConnection();\n  };\n  /**\n   * Get the current connection promise, doesn't performs the release\n   * @return {Promise<Connection>} promise with the resolved current connection\n   */\n\n\n  ReadOnlyConnectionHolder.prototype.releaseConnection = function () {\n    return this._connectionHolder.getConnection().catch(function () {\n      return Promise.resolve();\n    });\n  };\n  /**\n   * Get the current connection promise, doesn't performs the connection close\n   * @return {Promise<Connection>} promise with the resolved current connection\n   */\n\n\n  ReadOnlyConnectionHolder.prototype.close = function () {\n    return this._connectionHolder.getConnection().catch(function () {\n      return Promise.resolve();\n    });\n  };\n\n  return ReadOnlyConnectionHolder;\n}(ConnectionHolder);\n\nexports.ReadOnlyConnectionHolder = ReadOnlyConnectionHolder;\nexports.default = ReadOnlyConnectionHolder;\n\nvar EmptyConnectionHolder =\n/** @class */\nfunction (_super) {\n  __extends(EmptyConnectionHolder, _super);\n\n  function EmptyConnectionHolder() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  EmptyConnectionHolder.prototype.mode = function () {\n    return undefined;\n  };\n\n  EmptyConnectionHolder.prototype.database = function () {\n    return undefined;\n  };\n\n  EmptyConnectionHolder.prototype.initializeConnection = function () {\n    // nothing to initialize\n    return true;\n  };\n\n  EmptyConnectionHolder.prototype.getConnection = function () {\n    return Promise.reject((0, error_1.newError)('This connection holder does not serve connections'));\n  };\n\n  EmptyConnectionHolder.prototype.releaseConnection = function () {\n    return Promise.resolve();\n  };\n\n  EmptyConnectionHolder.prototype.close = function () {\n    return Promise.resolve();\n  };\n\n  return EmptyConnectionHolder;\n}(ConnectionHolder);\n/**\n * Connection holder that does not manage any connections.\n * @type {ConnectionHolder}\n * @private\n */\n\n\nvar EMPTY_CONNECTION_HOLDER = new EmptyConnectionHolder();\nexports.EMPTY_CONNECTION_HOLDER = EMPTY_CONNECTION_HOLDER; // eslint-disable-next-line handle-callback-err\n\nfunction ignoreError(error) {}","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","defineProperty","exports","value","EMPTY_CONNECTION_HOLDER","ReadOnlyConnectionHolder","ConnectionHolder","error_1","require","util_1","constants_1","bookmark_1","_a","_b","_c","mode","ACCESS_MODE_WRITE","_d","database","bookmark","connectionProvider","impersonatedUser","onDatabaseNameResolved","_mode","_database","assertString","_bookmark","Bookmark","empty","_connectionProvider","_impersonatedUser","_referenceCount","_connectionPromise","Promise","resolve","_onDatabaseNameResolved","setDatabase","referenceCount","initializeConnection","acquireConnection","accessMode","bookmarks","getConnection","releaseConnection","_releaseConnection","close","then","connection","isOpen","resetAndFlush","catch","ignoreError","_release","_super","connectionHolder","_this","_connectionHolder","default","EmptyConnectionHolder","apply","arguments","undefined","reject","newError","error"],"sources":["/Users/zack/src/gene3/node_modules/neo4j-driver-core/lib/internal/connection-holder.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EMPTY_CONNECTION_HOLDER = exports.ReadOnlyConnectionHolder = exports.ConnectionHolder = void 0;\nvar error_1 = require(\"../error\");\nvar util_1 = require(\"./util\");\nvar constants_1 = require(\"./constants\");\nvar bookmark_1 = require(\"./bookmark\");\n/**\n * Utility to lazily initialize connections and return them back to the pool when unused.\n * @private\n */\nvar ConnectionHolder = /** @class */ (function () {\n    /**\n     * @constructor\n     * @param {object} params\n     * @property {string} params.mode - the access mode for new connection holder.\n     * @property {string} params.database - the target database name.\n     * @property {Bookmark} params.bookmark - the last bookmark\n     * @property {ConnectionProvider} params.connectionProvider - the connection provider to acquire connections from.\n     * @property {string?} params.impersonatedUser - the user which will be impersonated\n     * @property {function(databaseName:string)} params.onDatabaseNameResolved - callback called when the database name is resolved\n     */\n    function ConnectionHolder(_a) {\n        var _b = _a === void 0 ? {} : _a, _c = _b.mode, mode = _c === void 0 ? constants_1.ACCESS_MODE_WRITE : _c, _d = _b.database, database = _d === void 0 ? '' : _d, bookmark = _b.bookmark, connectionProvider = _b.connectionProvider, impersonatedUser = _b.impersonatedUser, onDatabaseNameResolved = _b.onDatabaseNameResolved;\n        this._mode = mode;\n        this._database = database ? (0, util_1.assertString)(database, 'database') : '';\n        this._bookmark = bookmark || bookmark_1.Bookmark.empty();\n        this._connectionProvider = connectionProvider;\n        this._impersonatedUser = impersonatedUser;\n        this._referenceCount = 0;\n        this._connectionPromise = Promise.resolve();\n        this._onDatabaseNameResolved = onDatabaseNameResolved;\n    }\n    ConnectionHolder.prototype.mode = function () {\n        return this._mode;\n    };\n    ConnectionHolder.prototype.database = function () {\n        return this._database;\n    };\n    ConnectionHolder.prototype.setDatabase = function (database) {\n        this._database = database;\n    };\n    ConnectionHolder.prototype.bookmark = function () {\n        return this._bookmark;\n    };\n    ConnectionHolder.prototype.connectionProvider = function () {\n        return this._connectionProvider;\n    };\n    ConnectionHolder.prototype.referenceCount = function () {\n        return this._referenceCount;\n    };\n    ConnectionHolder.prototype.initializeConnection = function () {\n        if (this._referenceCount === 0 && this._connectionProvider) {\n            this._connectionPromise = this._connectionProvider.acquireConnection({\n                accessMode: this._mode,\n                database: this._database,\n                bookmarks: this._bookmark,\n                impersonatedUser: this._impersonatedUser,\n                onDatabaseNameResolved: this._onDatabaseNameResolved\n            });\n        }\n        else {\n            this._referenceCount++;\n            return false;\n        }\n        this._referenceCount++;\n        return true;\n    };\n    ConnectionHolder.prototype.getConnection = function () {\n        return this._connectionPromise;\n    };\n    ConnectionHolder.prototype.releaseConnection = function () {\n        if (this._referenceCount === 0) {\n            return this._connectionPromise;\n        }\n        this._referenceCount--;\n        if (this._referenceCount === 0) {\n            return this._releaseConnection();\n        }\n        return this._connectionPromise;\n    };\n    ConnectionHolder.prototype.close = function () {\n        if (this._referenceCount === 0) {\n            return this._connectionPromise;\n        }\n        this._referenceCount = 0;\n        return this._releaseConnection();\n    };\n    /**\n     * Return the current pooled connection instance to the connection pool.\n     * We don't pool Session instances, to avoid users using the Session after they've called close.\n     * The `Session` object is just a thin wrapper around Connection anyway, so it makes little difference.\n     * @return {Promise} - promise resolved then connection is returned to the pool.\n     * @private\n     */\n    ConnectionHolder.prototype._releaseConnection = function () {\n        this._connectionPromise = this._connectionPromise\n            .then(function (connection) {\n            if (connection) {\n                if (connection.isOpen()) {\n                    return connection\n                        .resetAndFlush()\n                        .catch(ignoreError)\n                        .then(function () { return connection._release(); });\n                }\n                return connection._release();\n            }\n            else {\n                return Promise.resolve();\n            }\n        })\n            .catch(ignoreError);\n        return this._connectionPromise;\n    };\n    return ConnectionHolder;\n}());\nexports.ConnectionHolder = ConnectionHolder;\n/**\n * Provides a interaction with a ConnectionHolder without change it state by\n * releasing or initilizing\n */\nvar ReadOnlyConnectionHolder = /** @class */ (function (_super) {\n    __extends(ReadOnlyConnectionHolder, _super);\n    /**\n     * Contructor\n     * @param {ConnectionHolder} connectionHolder the connection holder which will treat the requests\n     */\n    function ReadOnlyConnectionHolder(connectionHolder) {\n        var _this = _super.call(this, {\n            mode: connectionHolder.mode(),\n            database: connectionHolder.database(),\n            bookmark: connectionHolder.bookmark(),\n            connectionProvider: connectionHolder.connectionProvider()\n        }) || this;\n        _this._connectionHolder = connectionHolder;\n        return _this;\n    }\n    /**\n     * Return the true if the connection is suppose to be initilized with the command.\n     *\n     * @return {boolean}\n     */\n    ReadOnlyConnectionHolder.prototype.initializeConnection = function () {\n        if (this._connectionHolder.referenceCount() === 0) {\n            return false;\n        }\n        return true;\n    };\n    /**\n     * Get the current connection promise.\n     * @return {Promise<Connection>} promise resolved with the current connection.\n     */\n    ReadOnlyConnectionHolder.prototype.getConnection = function () {\n        return this._connectionHolder.getConnection();\n    };\n    /**\n     * Get the current connection promise, doesn't performs the release\n     * @return {Promise<Connection>} promise with the resolved current connection\n     */\n    ReadOnlyConnectionHolder.prototype.releaseConnection = function () {\n        return this._connectionHolder.getConnection().catch(function () { return Promise.resolve(); });\n    };\n    /**\n     * Get the current connection promise, doesn't performs the connection close\n     * @return {Promise<Connection>} promise with the resolved current connection\n     */\n    ReadOnlyConnectionHolder.prototype.close = function () {\n        return this._connectionHolder.getConnection().catch(function () { return Promise.resolve(); });\n    };\n    return ReadOnlyConnectionHolder;\n}(ConnectionHolder));\nexports.ReadOnlyConnectionHolder = ReadOnlyConnectionHolder;\nexports.default = ReadOnlyConnectionHolder;\nvar EmptyConnectionHolder = /** @class */ (function (_super) {\n    __extends(EmptyConnectionHolder, _super);\n    function EmptyConnectionHolder() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    EmptyConnectionHolder.prototype.mode = function () {\n        return undefined;\n    };\n    EmptyConnectionHolder.prototype.database = function () {\n        return undefined;\n    };\n    EmptyConnectionHolder.prototype.initializeConnection = function () {\n        // nothing to initialize\n        return true;\n    };\n    EmptyConnectionHolder.prototype.getConnection = function () {\n        return Promise.reject((0, error_1.newError)('This connection holder does not serve connections'));\n    };\n    EmptyConnectionHolder.prototype.releaseConnection = function () {\n        return Promise.resolve();\n    };\n    EmptyConnectionHolder.prototype.close = function () {\n        return Promise.resolve();\n    };\n    return EmptyConnectionHolder;\n}(ConnectionHolder));\n/**\n * Connection holder that does not manage any connections.\n * @type {ConnectionHolder}\n * @private\n */\nvar EMPTY_CONNECTION_HOLDER = new EmptyConnectionHolder();\nexports.EMPTY_CONNECTION_HOLDER = EMPTY_CONNECTION_HOLDER;\n// eslint-disable-next-line handle-callback-err\nfunction ignoreError(error) { }\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}