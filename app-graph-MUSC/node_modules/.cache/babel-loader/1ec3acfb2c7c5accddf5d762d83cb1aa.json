{"ast":null,"code":"\"use strict\";\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Dechunker = exports.Chunker = void 0;\n\nvar base_buf_1 = __importDefault(require(\"../buf/base-buf\"));\n\nvar channel_buf_1 = require(\"./channel-buf\");\n\nvar combined_buf_1 = __importDefault(require(\"./combined-buf\"));\n\nvar _CHUNK_HEADER_SIZE = 2;\nvar _MESSAGE_BOUNDARY = 0x00;\nvar _DEFAULT_BUFFER_SIZE = 1400; // http://stackoverflow.com/questions/2613734/maximum-packet-size-for-a-tcp-connection\n\n/**\n * Looks like a writable buffer, chunks output transparently into a channel below.\n * @access private\n */\n\nvar Chunker =\n/** @class */\nfunction (_super) {\n  __extends(Chunker, _super);\n\n  function Chunker(channel, bufferSize) {\n    var _this = _super.call(this, 0) || this;\n\n    _this._bufferSize = bufferSize || _DEFAULT_BUFFER_SIZE;\n    _this._ch = channel;\n    _this._buffer = (0, channel_buf_1.alloc)(_this._bufferSize);\n    _this._currentChunkStart = 0;\n    _this._chunkOpen = false;\n    return _this;\n  }\n\n  Chunker.prototype.putUInt8 = function (position, val) {\n    this._ensure(1);\n\n    this._buffer.writeUInt8(val);\n  };\n\n  Chunker.prototype.putInt8 = function (position, val) {\n    this._ensure(1);\n\n    this._buffer.writeInt8(val);\n  };\n\n  Chunker.prototype.putFloat64 = function (position, val) {\n    this._ensure(8);\n\n    this._buffer.writeFloat64(val);\n  };\n\n  Chunker.prototype.putBytes = function (position, data) {\n    // TODO: If data is larger than our chunk size or so, we're very likely better off just passing this buffer on\n    // rather than doing the copy here TODO: *however* note that we need some way to find out when the data has been\n    // written (and thus the buffer can be re-used) if we take that approach\n    while (data.remaining() > 0) {\n      // Ensure there is an open chunk, and that it has at least one byte of space left\n      this._ensure(1);\n\n      if (this._buffer.remaining() > data.remaining()) {\n        this._buffer.writeBytes(data);\n      } else {\n        this._buffer.writeBytes(data.readSlice(this._buffer.remaining()));\n      }\n    }\n\n    return this;\n  };\n\n  Chunker.prototype.flush = function () {\n    if (this._buffer.position > 0) {\n      this._closeChunkIfOpen(); // Local copy and clear the buffer field. This ensures that the buffer is not re-released if the flush call fails\n\n\n      var out = this._buffer;\n      this._buffer = null;\n\n      this._ch.write(out.getSlice(0, out.position)); // Alloc a new output buffer. We assume we're using NodeJS's buffer pooling under the hood here!\n\n\n      this._buffer = (0, channel_buf_1.alloc)(this._bufferSize);\n      this._chunkOpen = false;\n    }\n\n    return this;\n  };\n  /**\n   * Bolt messages are encoded in one or more chunks, and the boundary between two messages\n   * is encoded as a 0-length chunk, `00 00`. This inserts such a message boundary, closing\n   * any currently open chunk as needed\n   */\n\n\n  Chunker.prototype.messageBoundary = function () {\n    this._closeChunkIfOpen();\n\n    if (this._buffer.remaining() < _CHUNK_HEADER_SIZE) {\n      this.flush();\n    } // Write message boundary\n\n\n    this._buffer.writeInt16(_MESSAGE_BOUNDARY);\n  };\n  /** Ensure at least the given size is available for writing */\n\n\n  Chunker.prototype._ensure = function (size) {\n    var toWriteSize = this._chunkOpen ? size : size + _CHUNK_HEADER_SIZE;\n\n    if (this._buffer.remaining() < toWriteSize) {\n      this.flush();\n    }\n\n    if (!this._chunkOpen) {\n      this._currentChunkStart = this._buffer.position;\n      this._buffer.position = this._buffer.position + _CHUNK_HEADER_SIZE;\n      this._chunkOpen = true;\n    }\n  };\n\n  Chunker.prototype._closeChunkIfOpen = function () {\n    if (this._chunkOpen) {\n      var chunkSize = this._buffer.position - (this._currentChunkStart + _CHUNK_HEADER_SIZE);\n\n      this._buffer.putUInt16(this._currentChunkStart, chunkSize);\n\n      this._chunkOpen = false;\n    }\n  };\n\n  return Chunker;\n}(base_buf_1.default);\n\nexports.Chunker = Chunker;\n/**\n * Combines chunks until a complete message is gathered up, and then forwards that\n * message to an 'onmessage' listener.\n * @access private\n */\n\nvar Dechunker =\n/** @class */\nfunction () {\n  function Dechunker() {\n    this._currentMessage = [];\n    this._partialChunkHeader = 0;\n    this._state = this.AWAITING_CHUNK;\n  }\n\n  Dechunker.prototype.AWAITING_CHUNK = function (buf) {\n    if (buf.remaining() >= 2) {\n      // Whole header available, read that\n      return this._onHeader(buf.readUInt16());\n    } else {\n      // Only one byte available, read that and wait for the second byte\n      this._partialChunkHeader = buf.readUInt8() << 8;\n      return this.IN_HEADER;\n    }\n  };\n\n  Dechunker.prototype.IN_HEADER = function (buf) {\n    // First header byte read, now we read the next one\n    return this._onHeader((this._partialChunkHeader | buf.readUInt8()) & 0xffff);\n  };\n\n  Dechunker.prototype.IN_CHUNK = function (buf) {\n    if (this._chunkSize <= buf.remaining()) {\n      // Current packet is larger than current chunk, or same size:\n      this._currentMessage.push(buf.readSlice(this._chunkSize));\n\n      return this.AWAITING_CHUNK;\n    } else {\n      // Current packet is smaller than the chunk we're reading, split the current chunk itself up\n      this._chunkSize -= buf.remaining();\n\n      this._currentMessage.push(buf.readSlice(buf.remaining()));\n\n      return this.IN_CHUNK;\n    }\n  };\n\n  Dechunker.prototype.CLOSED = function (buf) {// no-op\n  };\n  /** Called when a complete chunk header has been received */\n\n\n  Dechunker.prototype._onHeader = function (header) {\n    if (header === 0) {\n      // Message boundary\n      var message = void 0;\n\n      switch (this._currentMessage.length) {\n        case 0:\n          // Keep alive chunk, sent by server to keep network alive.\n          return this.AWAITING_CHUNK;\n\n        case 1:\n          // All data in one chunk, this signals the end of that chunk.\n          message = this._currentMessage[0];\n          break;\n\n        default:\n          // A large chunk of data received, this signals that the last chunk has been received.\n          message = new combined_buf_1.default(this._currentMessage);\n          break;\n      }\n\n      this._currentMessage = [];\n      this.onmessage(message);\n      return this.AWAITING_CHUNK;\n    } else {\n      this._chunkSize = header;\n      return this.IN_CHUNK;\n    }\n  };\n\n  Dechunker.prototype.write = function (buf) {\n    while (buf.hasRemaining()) {\n      this._state = this._state(buf);\n    }\n  };\n\n  return Dechunker;\n}();\n\nexports.Dechunker = Dechunker;","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","__importDefault","mod","__esModule","defineProperty","exports","value","Dechunker","Chunker","base_buf_1","require","channel_buf_1","combined_buf_1","_CHUNK_HEADER_SIZE","_MESSAGE_BOUNDARY","_DEFAULT_BUFFER_SIZE","_super","channel","bufferSize","_this","_bufferSize","_ch","_buffer","alloc","_currentChunkStart","_chunkOpen","putUInt8","position","val","_ensure","writeUInt8","putInt8","writeInt8","putFloat64","writeFloat64","putBytes","data","remaining","writeBytes","readSlice","flush","_closeChunkIfOpen","out","write","getSlice","messageBoundary","writeInt16","size","toWriteSize","chunkSize","putUInt16","default","_currentMessage","_partialChunkHeader","_state","AWAITING_CHUNK","buf","_onHeader","readUInt16","readUInt8","IN_HEADER","IN_CHUNK","_chunkSize","push","CLOSED","header","message","length","onmessage","hasRemaining"],"sources":["/Users/zack/src/gene-graph-MUSC/node_modules/neo4j-driver-bolt-connection/lib/channel/chunking.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Dechunker = exports.Chunker = void 0;\nvar base_buf_1 = __importDefault(require(\"../buf/base-buf\"));\nvar channel_buf_1 = require(\"./channel-buf\");\nvar combined_buf_1 = __importDefault(require(\"./combined-buf\"));\nvar _CHUNK_HEADER_SIZE = 2;\nvar _MESSAGE_BOUNDARY = 0x00;\nvar _DEFAULT_BUFFER_SIZE = 1400; // http://stackoverflow.com/questions/2613734/maximum-packet-size-for-a-tcp-connection\n/**\n * Looks like a writable buffer, chunks output transparently into a channel below.\n * @access private\n */\nvar Chunker = /** @class */ (function (_super) {\n    __extends(Chunker, _super);\n    function Chunker(channel, bufferSize) {\n        var _this = _super.call(this, 0) || this;\n        _this._bufferSize = bufferSize || _DEFAULT_BUFFER_SIZE;\n        _this._ch = channel;\n        _this._buffer = (0, channel_buf_1.alloc)(_this._bufferSize);\n        _this._currentChunkStart = 0;\n        _this._chunkOpen = false;\n        return _this;\n    }\n    Chunker.prototype.putUInt8 = function (position, val) {\n        this._ensure(1);\n        this._buffer.writeUInt8(val);\n    };\n    Chunker.prototype.putInt8 = function (position, val) {\n        this._ensure(1);\n        this._buffer.writeInt8(val);\n    };\n    Chunker.prototype.putFloat64 = function (position, val) {\n        this._ensure(8);\n        this._buffer.writeFloat64(val);\n    };\n    Chunker.prototype.putBytes = function (position, data) {\n        // TODO: If data is larger than our chunk size or so, we're very likely better off just passing this buffer on\n        // rather than doing the copy here TODO: *however* note that we need some way to find out when the data has been\n        // written (and thus the buffer can be re-used) if we take that approach\n        while (data.remaining() > 0) {\n            // Ensure there is an open chunk, and that it has at least one byte of space left\n            this._ensure(1);\n            if (this._buffer.remaining() > data.remaining()) {\n                this._buffer.writeBytes(data);\n            }\n            else {\n                this._buffer.writeBytes(data.readSlice(this._buffer.remaining()));\n            }\n        }\n        return this;\n    };\n    Chunker.prototype.flush = function () {\n        if (this._buffer.position > 0) {\n            this._closeChunkIfOpen();\n            // Local copy and clear the buffer field. This ensures that the buffer is not re-released if the flush call fails\n            var out = this._buffer;\n            this._buffer = null;\n            this._ch.write(out.getSlice(0, out.position));\n            // Alloc a new output buffer. We assume we're using NodeJS's buffer pooling under the hood here!\n            this._buffer = (0, channel_buf_1.alloc)(this._bufferSize);\n            this._chunkOpen = false;\n        }\n        return this;\n    };\n    /**\n     * Bolt messages are encoded in one or more chunks, and the boundary between two messages\n     * is encoded as a 0-length chunk, `00 00`. This inserts such a message boundary, closing\n     * any currently open chunk as needed\n     */\n    Chunker.prototype.messageBoundary = function () {\n        this._closeChunkIfOpen();\n        if (this._buffer.remaining() < _CHUNK_HEADER_SIZE) {\n            this.flush();\n        }\n        // Write message boundary\n        this._buffer.writeInt16(_MESSAGE_BOUNDARY);\n    };\n    /** Ensure at least the given size is available for writing */\n    Chunker.prototype._ensure = function (size) {\n        var toWriteSize = this._chunkOpen ? size : size + _CHUNK_HEADER_SIZE;\n        if (this._buffer.remaining() < toWriteSize) {\n            this.flush();\n        }\n        if (!this._chunkOpen) {\n            this._currentChunkStart = this._buffer.position;\n            this._buffer.position = this._buffer.position + _CHUNK_HEADER_SIZE;\n            this._chunkOpen = true;\n        }\n    };\n    Chunker.prototype._closeChunkIfOpen = function () {\n        if (this._chunkOpen) {\n            var chunkSize = this._buffer.position - (this._currentChunkStart + _CHUNK_HEADER_SIZE);\n            this._buffer.putUInt16(this._currentChunkStart, chunkSize);\n            this._chunkOpen = false;\n        }\n    };\n    return Chunker;\n}(base_buf_1.default));\nexports.Chunker = Chunker;\n/**\n * Combines chunks until a complete message is gathered up, and then forwards that\n * message to an 'onmessage' listener.\n * @access private\n */\nvar Dechunker = /** @class */ (function () {\n    function Dechunker() {\n        this._currentMessage = [];\n        this._partialChunkHeader = 0;\n        this._state = this.AWAITING_CHUNK;\n    }\n    Dechunker.prototype.AWAITING_CHUNK = function (buf) {\n        if (buf.remaining() >= 2) {\n            // Whole header available, read that\n            return this._onHeader(buf.readUInt16());\n        }\n        else {\n            // Only one byte available, read that and wait for the second byte\n            this._partialChunkHeader = buf.readUInt8() << 8;\n            return this.IN_HEADER;\n        }\n    };\n    Dechunker.prototype.IN_HEADER = function (buf) {\n        // First header byte read, now we read the next one\n        return this._onHeader((this._partialChunkHeader | buf.readUInt8()) & 0xffff);\n    };\n    Dechunker.prototype.IN_CHUNK = function (buf) {\n        if (this._chunkSize <= buf.remaining()) {\n            // Current packet is larger than current chunk, or same size:\n            this._currentMessage.push(buf.readSlice(this._chunkSize));\n            return this.AWAITING_CHUNK;\n        }\n        else {\n            // Current packet is smaller than the chunk we're reading, split the current chunk itself up\n            this._chunkSize -= buf.remaining();\n            this._currentMessage.push(buf.readSlice(buf.remaining()));\n            return this.IN_CHUNK;\n        }\n    };\n    Dechunker.prototype.CLOSED = function (buf) {\n        // no-op\n    };\n    /** Called when a complete chunk header has been received */\n    Dechunker.prototype._onHeader = function (header) {\n        if (header === 0) {\n            // Message boundary\n            var message = void 0;\n            switch (this._currentMessage.length) {\n                case 0:\n                    // Keep alive chunk, sent by server to keep network alive.\n                    return this.AWAITING_CHUNK;\n                case 1:\n                    // All data in one chunk, this signals the end of that chunk.\n                    message = this._currentMessage[0];\n                    break;\n                default:\n                    // A large chunk of data received, this signals that the last chunk has been received.\n                    message = new combined_buf_1.default(this._currentMessage);\n                    break;\n            }\n            this._currentMessage = [];\n            this.onmessage(message);\n            return this.AWAITING_CHUNK;\n        }\n        else {\n            this._chunkSize = header;\n            return this.IN_CHUNK;\n        }\n    };\n    Dechunker.prototype.write = function (buf) {\n        while (buf.hasRemaining()) {\n            this._state = this._state(buf);\n        }\n    };\n    return Dechunker;\n}());\nexports.Dechunker = Dechunker;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}