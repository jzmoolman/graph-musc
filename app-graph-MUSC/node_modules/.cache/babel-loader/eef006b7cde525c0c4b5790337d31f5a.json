{"ast":null,"code":"import constant from \"./constant.js\";\nimport jiggle from \"./jiggle.js\";\n\nfunction index(d) {\n  return d.index;\n}\n\nfunction find(nodeById, nodeId) {\n  var node = nodeById.get(nodeId);\n  if (!node) throw new Error(\"node not found: \" + nodeId);\n  return node;\n}\n\nexport default function (links) {\n  var id = index,\n      strength = defaultStrength,\n      strengths,\n      distance = constant(30),\n      distances,\n      nodes,\n      nDim,\n      count,\n      bias,\n      random,\n      iterations = 1;\n  if (links == null) links = [];\n\n  function defaultStrength(link) {\n    return 1 / Math.min(count[link.source.index], count[link.target.index]);\n  }\n\n  function force(alpha) {\n    for (var k = 0, n = links.length; k < iterations; ++k) {\n      for (var i = 0, link, source, target, x = 0, y = 0, z = 0, l, b; i < n; ++i) {\n        link = links[i], source = link.source, target = link.target;\n        x = target.x + target.vx - source.x - source.vx || jiggle(random);\n\n        if (nDim > 1) {\n          y = target.y + target.vy - source.y - source.vy || jiggle(random);\n        }\n\n        if (nDim > 2) {\n          z = target.z + target.vz - source.z - source.vz || jiggle(random);\n        }\n\n        l = Math.sqrt(x * x + y * y + z * z);\n        l = (l - distances[i]) / l * alpha * strengths[i];\n        x *= l, y *= l, z *= l;\n        target.vx -= x * (b = bias[i]);\n\n        if (nDim > 1) {\n          target.vy -= y * b;\n        }\n\n        if (nDim > 2) {\n          target.vz -= z * b;\n        }\n\n        source.vx += x * (b = 1 - b);\n\n        if (nDim > 1) {\n          source.vy += y * b;\n        }\n\n        if (nDim > 2) {\n          source.vz += z * b;\n        }\n      }\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i,\n        n = nodes.length,\n        m = links.length,\n        nodeById = new Map(nodes.map((d, i) => [id(d, i, nodes), d])),\n        link;\n\n    for (i = 0, count = new Array(n); i < m; ++i) {\n      link = links[i], link.index = i;\n      if (typeof link.source !== \"object\") link.source = find(nodeById, link.source);\n      if (typeof link.target !== \"object\") link.target = find(nodeById, link.target);\n      count[link.source.index] = (count[link.source.index] || 0) + 1;\n      count[link.target.index] = (count[link.target.index] || 0) + 1;\n    }\n\n    for (i = 0, bias = new Array(m); i < m; ++i) {\n      link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);\n    }\n\n    strengths = new Array(m), initializeStrength();\n    distances = new Array(m), initializeDistance();\n  }\n\n  function initializeStrength() {\n    if (!nodes) return;\n\n    for (var i = 0, n = links.length; i < n; ++i) {\n      strengths[i] = +strength(links[i], i, links);\n    }\n  }\n\n  function initializeDistance() {\n    if (!nodes) return;\n\n    for (var i = 0, n = links.length; i < n; ++i) {\n      distances[i] = +distance(links[i], i, links);\n    }\n  }\n\n  force.initialize = function (_nodes) {\n    nodes = _nodes;\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    random = args.find(arg => typeof arg === 'function') || Math.random;\n    nDim = args.find(arg => [1, 2, 3].includes(arg)) || 2;\n    initialize();\n  };\n\n  force.links = function (_) {\n    return arguments.length ? (links = _, initialize(), force) : links;\n  };\n\n  force.id = function (_) {\n    return arguments.length ? (id = _, force) : id;\n  };\n\n  force.iterations = function (_) {\n    return arguments.length ? (iterations = +_, force) : iterations;\n  };\n\n  force.strength = function (_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initializeStrength(), force) : strength;\n  };\n\n  force.distance = function (_) {\n    return arguments.length ? (distance = typeof _ === \"function\" ? _ : constant(+_), initializeDistance(), force) : distance;\n  };\n\n  return force;\n}","map":{"version":3,"names":["constant","jiggle","index","d","find","nodeById","nodeId","node","get","Error","links","id","strength","defaultStrength","strengths","distance","distances","nodes","nDim","count","bias","random","iterations","link","Math","min","source","target","force","alpha","k","n","length","i","x","y","z","l","b","vx","vy","vz","sqrt","initialize","m","Map","map","Array","initializeStrength","initializeDistance","_nodes","args","arg","includes","_","arguments"],"sources":["/Users/zack/src/_-MUSC/gene-graph-MUSC/node_modules/d3-force-3d/src/link.js"],"sourcesContent":["import constant from \"./constant.js\";\nimport jiggle from \"./jiggle.js\";\n\nfunction index(d) {\n  return d.index;\n}\n\nfunction find(nodeById, nodeId) {\n  var node = nodeById.get(nodeId);\n  if (!node) throw new Error(\"node not found: \" + nodeId);\n  return node;\n}\n\nexport default function(links) {\n  var id = index,\n      strength = defaultStrength,\n      strengths,\n      distance = constant(30),\n      distances,\n      nodes,\n      nDim,\n      count,\n      bias,\n      random,\n      iterations = 1;\n\n  if (links == null) links = [];\n\n  function defaultStrength(link) {\n    return 1 / Math.min(count[link.source.index], count[link.target.index]);\n  }\n\n  function force(alpha) {\n    for (var k = 0, n = links.length; k < iterations; ++k) {\n      for (var i = 0, link, source, target, x = 0, y = 0, z = 0, l, b; i < n; ++i) {\n        link = links[i], source = link.source, target = link.target;\n        x = target.x + target.vx - source.x - source.vx || jiggle(random);\n        if (nDim > 1) { y = target.y + target.vy - source.y - source.vy || jiggle(random); }\n        if (nDim > 2) { z = target.z + target.vz - source.z - source.vz || jiggle(random); }\n        l = Math.sqrt(x * x + y * y + z * z);\n        l = (l - distances[i]) / l * alpha * strengths[i];\n        x *= l, y *= l, z *= l;\n\n        target.vx -= x * (b = bias[i]);\n        if (nDim > 1) { target.vy -= y * b; }\n        if (nDim > 2) { target.vz -= z * b; }\n\n        source.vx += x * (b = 1 - b);\n        if (nDim > 1) { source.vy += y * b; }\n        if (nDim > 2) { source.vz += z * b; }\n      }\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n\n    var i,\n        n = nodes.length,\n        m = links.length,\n        nodeById = new Map(nodes.map((d, i) => [id(d, i, nodes), d])),\n        link;\n\n    for (i = 0, count = new Array(n); i < m; ++i) {\n      link = links[i], link.index = i;\n      if (typeof link.source !== \"object\") link.source = find(nodeById, link.source);\n      if (typeof link.target !== \"object\") link.target = find(nodeById, link.target);\n      count[link.source.index] = (count[link.source.index] || 0) + 1;\n      count[link.target.index] = (count[link.target.index] || 0) + 1;\n    }\n\n    for (i = 0, bias = new Array(m); i < m; ++i) {\n      link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);\n    }\n\n    strengths = new Array(m), initializeStrength();\n    distances = new Array(m), initializeDistance();\n  }\n\n  function initializeStrength() {\n    if (!nodes) return;\n\n    for (var i = 0, n = links.length; i < n; ++i) {\n      strengths[i] = +strength(links[i], i, links);\n    }\n  }\n\n  function initializeDistance() {\n    if (!nodes) return;\n\n    for (var i = 0, n = links.length; i < n; ++i) {\n      distances[i] = +distance(links[i], i, links);\n    }\n  }\n\n  force.initialize = function(_nodes, ...args) {\n    nodes = _nodes;\n    random = args.find(arg => typeof arg === 'function') || Math.random;\n    nDim = args.find(arg => [1, 2, 3].includes(arg)) || 2;\n    initialize();\n  };\n\n  force.links = function(_) {\n    return arguments.length ? (links = _, initialize(), force) : links;\n  };\n\n  force.id = function(_) {\n    return arguments.length ? (id = _, force) : id;\n  };\n\n  force.iterations = function(_) {\n    return arguments.length ? (iterations = +_, force) : iterations;\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initializeStrength(), force) : strength;\n  };\n\n  force.distance = function(_) {\n    return arguments.length ? (distance = typeof _ === \"function\" ? _ : constant(+_), initializeDistance(), force) : distance;\n  };\n\n  return force;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}