{"ast":null,"code":"var _jsxFileName = \"/Users/zack/src/_-MUSC/gene-graph-MUSC/src/components/CustomDropdown.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState } from 'react';\nimport { Neo4jContext } from 'use-neo4j';\nimport { Dropdown } from './Dropdown';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CustomDropdown = _ref => {\n  _s();\n\n  let {\n    name,\n    label,\n    selected,\n    onChange\n  } = _ref;\n  const context = useContext(Neo4jContext),\n        driver = context.driver;\n  const [data, setData] = useState([]); // useEffect(()=> {\n  //     if (name === 'gene') {\n  //         loadGene(driver, handleData)\n  //     } else if (name === 'organ') {\n  //         loadOrgan(driver, handleData)\n  //     } else if ( name === 'disease') {\n  //         loadDisease(driver, handleData)\n  //     } else if ( name in ['syndrome-disease','syndrome-gene-disease']) {\n  //         loadSyndrome(driver, handleData)\n  //     }\n  //     console.log('loading data')\n  // },[])\n  // const handleData = (data: string[]) => {\n  //     setData(data)\n  // }\n\n  const handleChange = selection => {\n    if (onChange) {\n      onChange(selection);\n    }\n  }; // const getLabelName = (name: GraphName) => {\n  //     if (name === 'gene')\n  //         return 'Choose Genes'\n  //     else if (name === 'organ') \n  //         return 'Choose Organs'\n  //     else if (name === 'disease')\n  //         return 'Choose Diseases'\n  //     else if (name in ['syndrome-disease','syndrome-gene-disease'])\n  //         return 'Choose Syndromes'\n  //     else return 'Filter not defined'\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(Dropdown, {\n    label: label,\n    options: data,\n    selected: selected,\n    onChange: handleChange\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CustomDropdown, \"rO0c9PwnWBbd4AbsX032cTTSFic=\");\n\n_c = CustomDropdown;\n\nvar _c;\n\n$RefreshReg$(_c, \"CustomDropdown\");","map":{"version":3,"names":["React","useContext","useState","Neo4jContext","Dropdown","CustomDropdown","name","label","selected","onChange","context","driver","data","setData","handleChange","selection"],"sources":["/Users/zack/src/_-MUSC/gene-graph-MUSC/src/components/CustomDropdown.tsx"],"sourcesContent":["\nimport React, { useContext, useEffect, useState } from 'react'\nimport { Neo4jContext } from 'use-neo4j'\nimport { loadDisease, loadGene, loadOrgan, loadSyndrome } from '../tools/graphdata'\nimport { GraphName } from '../tools/graphtools'\nimport { Dropdown } from './Dropdown'\n\ntype CustomDropdownProps = {\n    name: GraphName \n    label: string \n    selected: string[]\n    onChange?: (selected: string[]) => void \n}\n\nexport const CustomDropdown = ( {name, label, selected, onChange }: CustomDropdownProps) => {\n    \n    const context = useContext(Neo4jContext), driver = context.driver\n\n    const [data, setData] = useState<string[]>([])\n\n    // useEffect(()=> {\n    //     if (name === 'gene') {\n    //         loadGene(driver, handleData)\n    //     } else if (name === 'organ') {\n    //         loadOrgan(driver, handleData)\n    //     } else if ( name === 'disease') {\n    //         loadDisease(driver, handleData)\n    //     } else if ( name in ['syndrome-disease','syndrome-gene-disease']) {\n    //         loadSyndrome(driver, handleData)\n    //     }\n    //     console.log('loading data')\n    // },[])\n\n    // const handleData = (data: string[]) => {\n    //     setData(data)\n    // }\n\n    const handleChange = (selection: string[] ) =>  {\n        if (onChange) {\n           onChange(selection)\n        }\n    }\n\n    // const getLabelName = (name: GraphName) => {\n    //     if (name === 'gene')\n    //         return 'Choose Genes'\n    //     else if (name === 'organ') \n    //         return 'Choose Organs'\n    //     else if (name === 'disease')\n    //         return 'Choose Diseases'\n    //     else if (name in ['syndrome-disease','syndrome-gene-disease'])\n    //         return 'Choose Syndromes'\n    //     else return 'Filter not defined'\n    // }\n\n    return (\n        <Dropdown \n            label={label}\n            options={data} \n            selected={selected}\n            onChange={handleChange}\n        />\n    )\n}\n\n\n"],"mappings":";;;AACA,OAAOA,KAAP,IAAgBC,UAAhB,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,SAASC,YAAT,QAA6B,WAA7B;AAGA,SAASC,QAAT,QAAyB,YAAzB;;AASA,OAAO,MAAMC,cAAc,GAAG,QAA8D;EAAA;;EAAA,IAA5D;IAACC,IAAD;IAAOC,KAAP;IAAcC,QAAd;IAAwBC;EAAxB,CAA4D;EAExF,MAAMC,OAAO,GAAGT,UAAU,CAACE,YAAD,CAA1B;EAAA,MAA0CQ,MAAM,GAAGD,OAAO,CAACC,MAA3D;EAEA,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAW,EAAX,CAAhC,CAJwF,CAMxF;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;;EAEA,MAAMY,YAAY,GAAIC,SAAD,IAA2B;IAC5C,IAAIN,QAAJ,EAAc;MACXA,QAAQ,CAACM,SAAD,CAAR;IACF;EACJ,CAJD,CAvBwF,CA6BxF;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EAEA,oBACI,QAAC,QAAD;IACI,KAAK,EAAER,KADX;IAEI,OAAO,EAAEK,IAFb;IAGI,QAAQ,EAAEJ,QAHd;IAII,QAAQ,EAAEM;EAJd;IAAA;IAAA;IAAA;EAAA,QADJ;AAQH,CAjDM;;GAAMT,c;;KAAAA,c"},"metadata":{},"sourceType":"module"}