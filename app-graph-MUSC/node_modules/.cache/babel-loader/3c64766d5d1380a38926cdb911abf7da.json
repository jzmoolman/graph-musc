{"ast":null,"code":"var _jsxFileName = \"/Users/zack/src/gene3/src/views/SyndromeGeneGraph.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useContext, useEffect, useRef } from 'react';\nimport { Neo4jContext } from 'use-neo4j';\nimport ForceGraph2D from 'react-force-graph-2d';\nimport { paintNode } from './genGraph';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst selectedSyndromesToStr = seletedSyndromes => {\n  let localFilter = '';\n  seletedSyndromes.forEach(value => {\n    if (localFilter === '') localFilter = '[';\n    localFilter = localFilter + '\\'' + value.text + '\\',';\n  });\n\n  if (localFilter !== '') {\n    localFilter = localFilter.slice(0, localFilter.length - 1);\n    localFilter = localFilter + ']';\n  }\n\n  return localFilter;\n};\n\nconst loadData = async (driver, selectedSyndromes, verified, colorScheme, onData) => {\n  console.log('enter - loadData');\n\n  if (driver == null) {\n    console.log('Driver not loaded');\n    return;\n  }\n\n  const syndromesStr = selectedSyndromesToStr(selectedSyndromes);\n  console.log('selectedSyndromesStr', syndromesStr);\n  let whereCLAUSE = '';\n\n  if (syndromesStr !== '' && verified) {\n    whereCLAUSE = 'WHERE s.name IN ' + syndromesStr + ' AND g.FinalVerdict = 1';\n  } else if (syndromesStr !== '' && !verified) {\n    whereCLAUSE = 'WHERE s.name IN ' + syndromesStr;\n  } else if (syndromesStr === '' && verified) {\n    whereCLAUSE = ' WHERE g.FinalVerdict = 1';\n  } else {\n    whereCLAUSE = '';\n  }\n\n  const qSyndromeGene = `MATCH (g:MGene)-[r:ATTR]->(s:Syndrome) ${whereCLAUSE} RETURN g,r,s`;\n  console.log('gSyndrome', qSyndromeGene);\n  let session = driver.session();\n\n  try {\n    let res = await session.run(qSyndromeGene);\n    let keys = new Set();\n    let nodes = [];\n    let links = [];\n    res.records.forEach(row => {\n      let link = {\n        source: '',\n        target: ''\n      };\n      const gene = row.get('g');\n\n      if (!keys.has(gene.properties.name)) {\n        let node = {\n          id: gene.identity,\n          name: gene.properties.name,\n          nodeColor: colorScheme.geneNodeColor,\n          fontColor: colorScheme.geneFontColor\n        };\n        nodes.push(node);\n        link.source = node.name;\n        keys.add(node.name);\n      } else {\n        link.source = gene.properties.name;\n      }\n\n      const syndrome = row.get('s');\n\n      if (!keys.has(syndrome.properties.name)) {\n        let node = {\n          id: syndrome.identity,\n          name: syndrome.properties.name,\n          nodeColor: colorScheme.syndromeNodeColor,\n          fontColor: colorScheme.syndromeFontColor\n        };\n        nodes.push(node);\n        link.target = node.name;\n        keys.add(node.name);\n      } else {\n        link.target = syndrome.properties.name;\n      } //const rel = row.get('r') \n\n\n      links.push(link);\n    });\n    console.log(nodes);\n    console.log(links);\n    console.log('Data loaded');\n    session.close();\n    console.log('nodes', nodes);\n    onData({\n      nodes,\n      links\n    });\n  } catch (e) {\n    throw e;\n  } finally {\n    await session.close();\n  }\n};\n\nexport const SyndromeGeneGraph = _ref => {\n  _s();\n\n  let {\n    verified,\n    selectedSyndromes,\n    colorScheme\n  } = _ref;\n  console.log('enter - SyndromeGeneGraph');\n  console.log('selectedSyndromes', selectedSyndromes);\n  console.log('colorScheme', colorScheme);\n  const isMounted = useRef(false);\n  const [rerender, setRerender] = useState(0);\n  let tick = 0;\n  console.log('tick', tick);\n\n  const onResize = () => {\n    console.log('onResize');\n    console.log('tick', tick);\n\n    if (tick === 0) {\n      tick = tick + 1;\n      console.log('send rerender');\n      setRerender(rerender + 1);\n    }\n  };\n\n  useEffect(() => {\n    console.log('Graph mounted');\n    isMounted.current = true;\n    window.addEventListener(\"resize\", onResize);\n  }, []);\n  const context = useContext(Neo4jContext),\n        driver = context.driver;\n  const [data, setData] = useState({\n    nodes: [],\n    links: []\n  });\n  useEffect(() => {\n    console.log('Reload data');\n\n    const onData = data => {\n      console.log(data);\n      setData(data);\n    };\n\n    loadData(driver, selectedSyndromes, verified, colorScheme, onData);\n  }, [selectedSyndromes, verified, colorScheme]);\n  const forceRef = useRef();\n  const minWidth = window.innerWidth - 38 - 300;\n  const minHeight = window.innerHeight - 60;\n  return /*#__PURE__*/_jsxDEV(ForceGraph2D, {\n    ref: forceRef,\n    width: minWidth,\n    height: minHeight,\n    graphData: data,\n    backgroundColor: \"white\",\n    nodeId: \"name\",\n    nodeColor: \"nodeColor\",\n    nodeLabel: \"name\",\n    linkDirectionalArrowRelPos: 1,\n    linkDirectionalArrowLength: 2,\n    cooldownTicks: 100,\n    onEngineStop: () => {\n      var _forceRef$current;\n\n      return (_forceRef$current = forceRef.current) === null || _forceRef$current === void 0 ? void 0 : _forceRef$current.zoomToFit(400);\n    },\n    nodeCanvasObjectMode: () => 'after',\n    nodeCanvasObject: paintNode\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 185,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SyndromeGeneGraph, \"54POs7PfikP0OwdOYHKfJDIn4Nw=\");\n\n_c = SyndromeGeneGraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"SyndromeGeneGraph\");","map":{"version":3,"names":["useState","useContext","useEffect","useRef","Neo4jContext","ForceGraph2D","paintNode","selectedSyndromesToStr","seletedSyndromes","localFilter","forEach","value","text","slice","length","loadData","driver","selectedSyndromes","verified","colorScheme","onData","console","log","syndromesStr","whereCLAUSE","qSyndromeGene","session","res","run","keys","Set","nodes","links","records","row","link","source","target","gene","get","has","properties","name","node","id","identity","nodeColor","geneNodeColor","fontColor","geneFontColor","push","add","syndrome","syndromeNodeColor","syndromeFontColor","close","e","SyndromeGeneGraph","isMounted","rerender","setRerender","tick","onResize","current","window","addEventListener","context","data","setData","forceRef","minWidth","innerWidth","minHeight","innerHeight","zoomToFit"],"sources":["/Users/zack/src/gene3/src/views/SyndromeGeneGraph.tsx"],"sourcesContent":["import { useState, useContext, useEffect, useRef, MutableRefObject } from 'react'\nimport { Driver }  from  'neo4j-driver'\nimport { Neo4jContext } from 'use-neo4j'\nimport ForceGraph2D, { ForceGraphMethods }  from 'react-force-graph-2d'\nimport { SyndromeDataType } from './SyndromeSelector'\nimport { ColorScheme, paintNode } from './genGraph'\n\ntype SyndromeGeneGraphType = {\n    verified: boolean\n    selectedSyndromes: SyndromeDataType[]\n    colorScheme: ColorScheme\n}\n\nconst selectedSyndromesToStr = (seletedSyndromes: SyndromeDataType[]) => {\n    let localFilter = '';\n    seletedSyndromes.forEach(value => { \n        if (localFilter === '') localFilter = '['\n            localFilter = localFilter + '\\'' + value.text + '\\','\n        } )\n        if (localFilter !== '') {\n            localFilter = localFilter.slice(0, localFilter.length - 1);\n            localFilter = localFilter + ']'\n        }\n    return localFilter\n}\n\ntype dataType = \n{   nodes: nodeType[] \n    links: linkType[]\n}\n\ntype nodeType = {\n        id:number\n        name: string\n        nodeColor: string\n        fontColor: string\n }\n \ntype linkType =  {\n  source: string,\n  target: string\n\n}\n\n\nconst  loadData = async (driver: Driver | undefined,\n        selectedSyndromes: SyndromeDataType[], \n        verified: boolean,\n        colorScheme: ColorScheme,\n        onData:(data: dataType)=> void) => {\n    console.log('enter - loadData')\n    if (driver == null) {\n        console.log('Driver not loaded')\n        return \n    }\n\n    const syndromesStr = selectedSyndromesToStr(selectedSyndromes)\n    console.log('selectedSyndromesStr', syndromesStr)\n    let whereCLAUSE = ''\n    if ( syndromesStr !== '' && verified ) {\n        whereCLAUSE =  'WHERE s.name IN ' + syndromesStr + ' AND g.FinalVerdict = 1'\n    } else if ( syndromesStr !== '' && !verified ) {\n        whereCLAUSE =  'WHERE s.name IN ' + syndromesStr\n    } else if ( syndromesStr === '' && verified ) {\n        whereCLAUSE = ' WHERE g.FinalVerdict = 1'\n    } else {\n        whereCLAUSE = ''\n    }\n\n    const qSyndromeGene = `MATCH (g:MGene)-[r:ATTR]->(s:Syndrome) ${whereCLAUSE} RETURN g,r,s`\n   \n    console.log('gSyndrome', qSyndromeGene)\n  \n    let session = driver.session()\n\n    try {\n        let res = await session.run(qSyndromeGene)\n        let keys = new  Set<string>()\n        let nodes : nodeType[] = []\n        let links : linkType[] = []\n        res.records.forEach(row => {\n            let link : linkType = { source: '', target: ''}\n            const gene = row.get('g') \n            if (!keys.has(gene.properties.name)) {\n\n                let node = { \n                    id: gene.identity,\n                    name: gene.properties.name,\n                    nodeColor: colorScheme.geneNodeColor, \n                    fontColor: colorScheme.geneFontColor \n                }\n                nodes.push(node) \n                link.source = node.name\n                keys.add(node.name)\n            } else {\n                link.source = gene.properties.name\n            }\n           \n        \n           \n            const syndrome = row.get('s') \n            if (!keys.has(syndrome.properties.name)) {\n                \n                let node = { \n                    id: syndrome.identity,\n                    name: syndrome.properties.name,\n                    nodeColor:colorScheme.syndromeNodeColor,\n                    fontColor:colorScheme.syndromeFontColor \n                }\n                nodes.push(node) \n                link.target = node.name\n                keys.add(node.name)\n            } else {\n                link.target = syndrome.properties.name\n            }\n            //const rel = row.get('r') \n\n            links.push(link)\n\n        })\n        console.log(nodes) \n        console.log(links) \n        console.log('Data loaded')\n        session.close();\n        console.log('nodes', nodes)\n        onData( {nodes, links} )\n    } catch (e) {\n        throw e\n    }\n    finally {\n        await session.close()\n    \n    }\n}\n\nexport const SyndromeGeneGraph = ( {verified, selectedSyndromes,\n    colorScheme }: SyndromeGeneGraphType ) => {\n\n    console.log('enter - SyndromeGeneGraph')\n    console.log('selectedSyndromes', selectedSyndromes)\n    console.log('colorScheme', colorScheme)\n    \n    const isMounted = useRef(false)\n    const [rerender, setRerender] = useState(0);\n\n    let tick = 0 \n    console.log('tick', tick )\n\n    const onResize = () => {\n        console.log('onResize')\n        console.log('tick', tick )\n        if ( tick === 0 ) {\n            tick = tick + 1\n            console.log('send rerender')\n            setRerender( rerender + 1 ) \n        }\n    }\n\n    useEffect(()=>{\n        console.log('Graph mounted')\n        isMounted.current = true\n        window.addEventListener(\"resize\", onResize )\n    },[])\n\n    const context = useContext(Neo4jContext), driver = context.driver\n    const [data, setData] =  useState<dataType>( {nodes: [], links: []} )\n\n    useEffect( () => {\n        console.log('Reload data')\n        const onData = (data: dataType) =>{\n            console.log(data)\n            setData(data)\n            \n        }\n        loadData(driver, selectedSyndromes, verified, colorScheme,  onData)\n\n    },[selectedSyndromes, verified, colorScheme] )\n\n    const forceRef : MutableRefObject<ForceGraphMethods | undefined> = useRef()      \n\n    const minWidth = window.innerWidth -38 -300\n    const minHeight = window.innerHeight -60\n\n    return ( \n        <ForceGraph2D \n            ref={forceRef}\n            width={minWidth}\n            height={minHeight}\n            graphData={data}\n            backgroundColor='white'\n            nodeId='name'  \n            nodeColor='nodeColor' \n            nodeLabel='name' \n            linkDirectionalArrowRelPos={1} \n            linkDirectionalArrowLength={2} \n            cooldownTicks={100}\n            onEngineStop={ () => forceRef.current?.zoomToFit(400)} \n            nodeCanvasObjectMode={() => 'after'} \n            nodeCanvasObject={paintNode}\n            />\n    )\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}