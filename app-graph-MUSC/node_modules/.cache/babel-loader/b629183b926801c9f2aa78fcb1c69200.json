{"ast":null,"code":"import { ArrayToStr } from './graphtools';\n\nconst getFinalVerdictClause = finalVerdict => {\n  let whereClause = '';\n\n  if (finalVerdict === 'Confirmed') {\n    whereClause = 'WHERE g.FinalVerdict = 1';\n  } else if (finalVerdict === 'Maybe') {\n    whereClause = 'WHERE g.FinalVerdict = 9';\n  } else if (finalVerdict === 'Both') {\n    whereClause = 'WHERE g.FinalVerdict in [1,9]';\n  } else {\n    whereClause = 'WHERE g.FinalVerdict in [0,1,9]';\n  }\n\n  return whereClause;\n};\n\nexport const loadGene = async (driver, onData) => {\n  if (driver == null) {\n    console.log('Driver not loaded');\n    return;\n  }\n\n  const query = `MATCH (g:MGene) RETURN DISTINCT g.name as name ORDER BY name`;\n  let session = driver.session();\n\n  try {\n    let res = await session.run(query);\n    const genes = res.records.map(row => {\n      return row.get('name');\n    });\n    session.close();\n    onData(genes);\n  } catch (e) {\n    throw e;\n  } finally {\n    await session.close();\n  }\n};\nexport const loadOrgan = async (driver, onData) => {\n  if (driver == null) {\n    console.log('Driver not loaded');\n    return;\n  }\n\n  const query = `MATCH (o:Organ) RETURN DISTINCT o.name as name ORDER BY name`;\n  let session = driver.session();\n\n  try {\n    let res = await session.run(query);\n    const genes = res.records.map(row => {\n      return row.get('name');\n    });\n    session.close();\n    onData(genes);\n  } catch (e) {\n    throw e;\n  } finally {\n    await session.close();\n  }\n};\nexport const loadDisease = async (driver, onData) => {\n  if (driver == null) {\n    console.log('Driver not loaded');\n    return;\n  }\n\n  const query = `MATCH (g:MGene)-[r:CAUSE]->(d:Disease) ${getFinalVerdictClause('Both')} RETURN DISTINCT d.name as name ORDER BY name`;\n  let session = driver.session();\n\n  try {\n    let res = await session.run(query);\n    const genes = res.records.map(row => {\n      return row.get('name');\n    });\n    session.close();\n    onData(genes);\n  } catch (e) {\n    throw e;\n  } finally {\n    await session.close();\n  }\n};\nexport const loadSyndrome = async (driver, onData) => {\n  if (driver == null) {\n    console.log('Driver not loaded');\n    return;\n  } // Armando \n  //const query = `MATCH (g:MGene)-[r]->(s:Syndrome) ${getFinalVerdictClause('Both')} RETURN DISTINCT s.name as name ORDER BY name`\n\n\n  const query = `MATCH (g:MGene)-[r]->(s:VERBIAGE_SYNDROME) ${getFinalVerdictClause('Both')} RETURN DISTINCT s.name as name ORDER BY name`; // Armando  - end\n\n  let session = driver.session();\n  console.log('query', query);\n\n  try {\n    let res = await session.run(query);\n    const genes = res.records.map(row => {\n      return row.get('name');\n    });\n    session.close();\n    onData(genes);\n  } catch (e) {\n    throw e;\n  } finally {\n    await session.close();\n  }\n};\nexport const loadGeneData = async (driver, genes, organs, finalVerdict, graphScheme, onData) => {\n  // console.log('enter - loadData')\n  if (driver == null) {\n    console.log('Driver not loaded');\n    return;\n  }\n\n  const str_genes = ArrayToStr(genes);\n  const str_organs = ArrayToStr(organs);\n  let whereCLAUSE = getFinalVerdictClause(finalVerdict); // console.log(genes, organs)\n\n  if (str_genes !== '') {\n    whereCLAUSE = whereCLAUSE + ' AND g.name IN ' + str_genes;\n  }\n\n  if (str_organs !== '') {\n    whereCLAUSE = whereCLAUSE + ' AND o.name IN ' + str_organs;\n  }\n\n  const query = `MATCH (g:MGene)-[r]->(o:Organ) ${whereCLAUSE} RETURN g,r,o`; // console.log('Gene->Orgran', query)\n\n  let session = driver.session();\n\n  try {\n    let res = await session.run(query);\n    let ids = new Set();\n    let nodes = [];\n    let links = [];\n    res.records.forEach(row => {\n      let link = {\n        source: '',\n        target: ''\n      };\n      const source = row.get('g');\n\n      if (!ids.has(source.properties.name)) {\n        let node = {\n          id: source.identity,\n          name: source.properties.name,\n          // Armando\n          fullName: source.properties.fullName,\n          mechanism: source.properties.mechanism,\n          // Armondo - end\n          nodeType: 'gene',\n          nodeColor: graphScheme.geneNode,\n          fontColor: graphScheme.geneFont,\n          nodeVal: graphScheme.nodeVal,\n          nodeRelSize: graphScheme.nodeRelSize,\n          scaleFont: graphScheme.scaleFont\n        };\n        nodes.push(node);\n        link.source = node.name;\n        ids.add(node.name);\n      } else {\n        link.source = source.properties.name;\n      }\n\n      const target = row.get('o');\n\n      if (!ids.has(target.properties.name)) {\n        let node = {\n          id: target.identity,\n          name: target.properties.name,\n          nodeType: 'organ',\n          nodeColor: graphScheme.organNode,\n          fontColor: graphScheme.organFont,\n          nodeVal: graphScheme.nodeVal,\n          nodeRelSize: graphScheme.nodeRelSize,\n          scaleFont: graphScheme.scaleFont\n        };\n        nodes.push(node);\n        link.target = node.name;\n        ids.add(node.name);\n      } else {\n        link.target = target.properties.name;\n      }\n\n      links.push(link);\n    });\n    session.close();\n    onData({\n      nodes,\n      links\n    });\n  } catch (e) {\n    throw e;\n  } finally {\n    await session.close();\n  }\n};\nexport const loadOrganData = async (driver, genes, organs, finalVerdict, graphScheme, onData) => {\n  // console.log('enter - loadData')\n  if (driver == null) {\n    console.log('Driver not loaded');\n    return;\n  }\n\n  const str_genes = ArrayToStr(genes);\n  const str_organs = ArrayToStr(organs);\n  let whereCLAUSE = getFinalVerdictClause(finalVerdict); // console.log(genes, organs)\n\n  if (str_genes !== '') {\n    whereCLAUSE = whereCLAUSE + ' AND g.name IN ' + str_genes;\n  }\n\n  if (str_organs !== '') {\n    whereCLAUSE = whereCLAUSE + ' AND o.name IN ' + str_organs;\n  }\n\n  const query = `MATCH (g:MGene)-[r]->(o:Organ) ${whereCLAUSE} RETURN g,r,o`; // console.log('Gene->Orgran', query)\n\n  let session = driver.session();\n\n  try {\n    let res = await session.run(query);\n    let ids = new Set();\n    let nodes = [];\n    let links = [];\n    res.records.forEach(row => {\n      let link = {\n        source: '',\n        target: ''\n      };\n      const source = row.get('o');\n\n      if (!ids.has(source.properties.name)) {\n        let node = {\n          id: source.identity,\n          name: source.properties.name,\n          nodeType: 'organ',\n          nodeColor: graphScheme.organNode,\n          fontColor: graphScheme.organFont,\n          nodeVal: graphScheme.nodeVal,\n          nodeRelSize: graphScheme.nodeRelSize,\n          scaleFont: graphScheme.scaleFont\n        };\n        nodes.push(node);\n        link.source = node.name;\n        ids.add(node.name);\n      } else {\n        link.source = source.properties.name;\n      }\n\n      const target = row.get('g');\n\n      if (!ids.has(target.properties.name)) {\n        let node = {\n          id: target.identity,\n          name: target.properties.name,\n          // Armando\n          fullName: source.properties.FullName,\n          mechanism: source.properties.Mechanism,\n          // Armando - end\n          nodeType: 'gene',\n          nodeColor: graphScheme.geneNode,\n          fontColor: graphScheme.geneFont,\n          nodeVal: graphScheme.nodeVal,\n          nodeRelSize: graphScheme.nodeRelSize,\n          scaleFont: graphScheme.scaleFont\n        };\n        nodes.push(node);\n        link.target = node.name;\n        ids.add(node.name);\n      } else {\n        link.target = target.properties.name;\n      }\n\n      links.push(link);\n    });\n    session.close();\n    onData({\n      nodes,\n      links\n    });\n  } catch (e) {\n    throw e;\n  } finally {\n    await session.close();\n  }\n};\nexport const loadDiseaseData = async (driver, diseases, genes, finalVerdict, graphScheme, onData) => {\n  if (driver == null) {\n    console.log('Driver not loaded');\n    return;\n  }\n\n  const str_diseases = ArrayToStr(diseases);\n  const str_genes = ArrayToStr(genes);\n  let whereCLAUSE = getFinalVerdictClause(finalVerdict);\n\n  if (str_diseases !== '') {\n    whereCLAUSE = whereCLAUSE + ' AND d.name IN ' + str_diseases;\n  }\n\n  if (str_genes !== '') {\n    whereCLAUSE = whereCLAUSE + ' AND g.name IN ' + str_genes;\n  }\n\n  const query = `MATCH (g:MGene)-[r:CAUSE]->(d:Disease) ${whereCLAUSE} RETURN g,r,d`;\n  let session = driver.session();\n\n  try {\n    let res = await session.run(query);\n    let ids = new Set();\n    let nodes = [];\n    let links = [];\n    res.records.forEach(row => {\n      let link1 = {\n        source: '',\n        target: ''\n      };\n      let source = row.get('g');\n\n      if (!ids.has(source.properties.name)) {\n        let node = {\n          id: source.identity,\n          name: source.properties.name,\n          // Armando\n          fullName: source.properties.FullName,\n          mechanism: source.properties.Mechanism,\n          // Armando - end\n          nodeType: 'gene',\n          nodeColor: graphScheme.geneNode,\n          fontColor: graphScheme.geneFont,\n          nodeVal: graphScheme.nodeVal,\n          nodeRelSize: graphScheme.nodeRelSize,\n          scaleFont: graphScheme.scaleFont\n        };\n        nodes.push(node);\n        link1.source = node.name;\n        ids.add(node.name);\n      } else {\n        link1.source = source.properties.name;\n      }\n\n      let target = row.get('d');\n\n      if (!ids.has(target.properties.name)) {\n        let node = {\n          id: target.identity,\n          name: target.properties.name,\n          nodeType: 'disease',\n          nodeColor: graphScheme.diseaseNode,\n          fontColor: graphScheme.diseaseFont,\n          nodeVal: graphScheme.nodeVal,\n          nodeRelSize: graphScheme.nodeRelSize,\n          scaleFont: graphScheme.scaleFont\n        };\n        nodes.push(node);\n        link1.target = node.name;\n        ids.add(node.name);\n      } else {\n        link1.target = target.properties.name;\n      }\n\n      links.push(link1);\n    });\n    session.close();\n    onData({\n      nodes,\n      links\n    });\n  } catch (e) {\n    throw e;\n  } finally {\n    await session.close();\n  }\n};\nexport const loadSyndromeData = async (driver, syndromes, genes, finalVerdict, graphScheme, onData) => {\n  console.log('enter - loadSyndromeData');\n\n  if (driver == null) {\n    console.log('Driver not loaded');\n    return;\n  }\n\n  const str_genes = ArrayToStr(genes);\n  const str_syndrome = ArrayToStr(syndromes);\n  let whereCLAUSE = getFinalVerdictClause(finalVerdict);\n\n  if (str_genes !== '') {\n    whereCLAUSE = whereCLAUSE + ' AND g.name IN ' + str_genes;\n  }\n\n  if (str_syndrome !== '') {\n    whereCLAUSE = whereCLAUSE + ' AND s.name IN ' + str_syndrome;\n  } // Armando \n  //const query = `MATCH (g:MGene)-[r]->(s:Syndrome) ${whereCLAUSE} RETURN g,r,s` Need to fix later\n\n\n  const query = `MATCH (g:MGene)-[r]->(s:VERBIAGE_SYNDROME) ${whereCLAUSE} RETURN g,r,s`; // Armando - end\n\n  console.log('Syndrome->Gene', query);\n  let session = driver.session();\n\n  try {\n    let res = await session.run(query);\n    let ids = new Set();\n    let nodes = [];\n    let links = [];\n    res.records.forEach(row => {\n      let link = {\n        source: '',\n        target: ''\n      };\n      const source = row.get('s');\n\n      if (!ids.has(source.properties.name)) {\n        let node = {\n          id: source.identity,\n          name: source.properties.name,\n          // Arnmando\n          hereditaryType: source.properties.HereditaryType,\n          // Armnado - end\n          nodeType: 'syndrome',\n          nodeColor: graphScheme.syndromeNode,\n          fontColor: graphScheme.syndromeFont,\n          nodeVal: graphScheme.nodeVal,\n          nodeRelSize: graphScheme.nodeRelSize,\n          scaleFont: graphScheme.scaleFont\n        };\n        nodes.push(node);\n        link.source = node.name;\n        ids.add(node.name);\n      } else {\n        link.source = source.properties.name;\n      }\n\n      let target = row.get('g');\n\n      if (!ids.has(target.properties.name)) {\n        let node = {\n          id: target.identity,\n          name: target.properties.name,\n          // Armando \n          fullName: source.properties.FullName,\n          mechanism: source.properties.Mechanism,\n          // Armando - end\n          nodeType: 'gene',\n          nodeColor: graphScheme.geneNode,\n          fontColor: graphScheme.geneFont,\n          nodeVal: graphScheme.nodeVal,\n          nodeRelSize: graphScheme.nodeRelSize,\n          scaleFont: graphScheme.scaleFont\n        };\n        nodes.push(node);\n        link.target = node.name;\n        ids.add(node.name);\n      } else {\n        link.target = target.properties.name;\n      }\n\n      links.push(link);\n    });\n    session.close();\n    onData({\n      nodes,\n      links\n    });\n  } catch (e) {\n    throw e;\n  } finally {\n    await session.close();\n  }\n};","map":{"version":3,"names":["ArrayToStr","getFinalVerdictClause","finalVerdict","whereClause","loadGene","driver","onData","console","log","query","session","res","run","genes","records","map","row","get","close","e","loadOrgan","loadDisease","loadSyndrome","loadGeneData","organs","graphScheme","str_genes","str_organs","whereCLAUSE","ids","Set","nodes","links","forEach","link","source","target","has","properties","name","node","id","identity","fullName","mechanism","nodeType","nodeColor","geneNode","fontColor","geneFont","nodeVal","nodeRelSize","scaleFont","push","add","organNode","organFont","loadOrganData","FullName","Mechanism","loadDiseaseData","diseases","str_diseases","link1","diseaseNode","diseaseFont","loadSyndromeData","syndromes","str_syndrome","hereditaryType","HereditaryType","syndromeNode","syndromeFont"],"sources":["/Users/zack/src/_-MUSC/gene-graph-MUSC/src/tools/graphdata.ts"],"sourcesContent":["\nimport { GraphScheme, Force2DData, ArrayToStr } from './graphtools'\nimport { Driver }  from  'neo4j-driver'\n\n\nconst getFinalVerdictClause = (finalVerdict: string) => {\n    let whereClause = ''\n\n    if ( finalVerdict === 'Confirmed' ) {\n        whereClause = 'WHERE g.FinalVerdict = 1'\n    } else if ( finalVerdict === 'Maybe') {\n        whereClause = 'WHERE g.FinalVerdict = 9'\n    } else if ( finalVerdict === 'Both' ) {\n        whereClause = 'WHERE g.FinalVerdict in [1,9]'\n    } else {\n        whereClause = 'WHERE g.FinalVerdict in [0,1,9]'\n    }\n    return whereClause\n}\n\nexport const loadGene= async (driver: Driver | undefined, \n    onData:(data:string[])=> void\n) => {\n\n    if (driver == null) {\n        console.log('Driver not loaded')\n        return \n    }\n\n    const query = `MATCH (g:MGene) RETURN DISTINCT g.name as name ORDER BY name`\n    let session = driver.session()\n\n    try {\n        let res = await session.run(query)\n        const genes: string[] = \n        res.records.map(row => {\n            return row.get('name')\n        })\n        session.close();\n        onData( genes )\n    } catch (e) {\n        throw e\n    }\n    finally {\n        await session.close()\n    }\n}\n\nexport const loadOrgan= async (driver: Driver | undefined, \n    onData:(data:string[])=> void\n) => {\n\n    if (driver == null) {\n        console.log('Driver not loaded')\n        return \n    }\n\n    const query = `MATCH (o:Organ) RETURN DISTINCT o.name as name ORDER BY name`\n    let session = driver.session()\n\n    try {\n        let res = await session.run(query)\n        const genes: string[] = \n        res.records.map(row => {\n            return row.get('name')\n        })\n        session.close();\n        onData( genes )\n    } catch (e) {\n        throw e\n    }\n    finally {\n        await session.close()\n    }\n}\n\nexport const loadDisease= async (driver: Driver | undefined, \n    onData:(data:string[])=> void\n) => {\n\n    if (driver == null) {\n        console.log('Driver not loaded')\n        return \n    }\n\n    const query =  `MATCH (g:MGene)-[r:CAUSE]->(d:Disease) ${getFinalVerdictClause('Both')} RETURN DISTINCT d.name as name ORDER BY name`\n    let session = driver.session()\n\n    try {\n        let res = await session.run(query)\n        const genes: string[] = \n        res.records.map(row => {\n            return row.get('name')\n        })\n        session.close();\n        onData( genes )\n    } catch (e) {\n        throw e\n    }\n    finally {\n        await session.close()\n    }\n}\n\nexport const loadSyndrome= async (driver: Driver | undefined, \n    onData:(data:string[])=> void\n) => {\n\n    if (driver == null) {\n        console.log('Driver not loaded')\n        return \n    }\n    // Armando \n    //const query = `MATCH (g:MGene)-[r]->(s:Syndrome) ${getFinalVerdictClause('Both')} RETURN DISTINCT s.name as name ORDER BY name`\n    const query = `MATCH (g:MGene)-[r]->(s:VERBIAGE_SYNDROME) ${getFinalVerdictClause('Both')} RETURN DISTINCT s.name as name ORDER BY name`\n    // Armando  - end\n    let session = driver.session()\n    console.log('query', query)\n\n    try {\n        let res = await session.run(query)\n        const genes: string[] = \n        res.records.map(row => {\n            return row.get('name')\n        })\n        session.close();\n        onData( genes )\n    } catch (e) {\n        throw e\n    }\n    finally {\n        await session.close()\n    }\n}\n\nexport const  loadGeneData = async (driver: Driver | undefined,\n    genes: string[],\n    organs: string[],\n    finalVerdict: string,\n    graphScheme : GraphScheme,\n    onData:(data: Force2DData)=> void) => {\n\n    // console.log('enter - loadData')\n\n    if (driver == null) {\n        console.log('Driver not loaded')\n        return \n    }\n\n    const str_genes = ArrayToStr(genes)\n    const str_organs = ArrayToStr(organs)\n\n    let whereCLAUSE = getFinalVerdictClause(finalVerdict)\n\n    // console.log(genes, organs)\n\n    if ( str_genes !== '') {\n        whereCLAUSE = whereCLAUSE + ' AND g.name IN ' + str_genes\n    }\n    if ( str_organs !== '') {\n        whereCLAUSE = whereCLAUSE + ' AND o.name IN ' + str_organs\n    }\n    const query = `MATCH (g:MGene)-[r]->(o:Organ) ${whereCLAUSE} RETURN g,r,o`\n\n    // console.log('Gene->Orgran', query)\n\n    let session = driver.session()\n\n    try {\n        let res = await session.run(query)\n        let ids = new  Set<string>()\n        let nodes : any[] = []\n        let links : any[] = []\n        res.records.forEach(row => {\n            let link  = { source: '', target: ''}\n            const source = row.get('g') \n            if (!ids.has(source.properties.name)) {\n                let node = { \n                    id: source.identity,\n                    name: source.properties.name,\n                    // Armando\n                    fullName: source.properties.fullName,\n                    mechanism: source.properties.mechanism,\n                    // Armondo - end\n                    nodeType: 'gene',\n                    nodeColor: graphScheme.geneNode, \n                    fontColor: graphScheme.geneFont,\n                    nodeVal: graphScheme.nodeVal,\n                    nodeRelSize: graphScheme.nodeRelSize,\n                    scaleFont: graphScheme.scaleFont\n                }\n                nodes.push(node) \n                link.source = node.name\n                ids.add(node.name)\n            } else {\n                link.source = source.properties.name\n            }\n        \n            const target = row.get('o') \n            if (!ids.has(target.properties.name)) {\n                let node = { \n                    id: target.identity,\n                    name: target.properties.name,\n                    nodeType: 'organ',\n                    nodeColor: graphScheme.organNode,\n                    fontColor: graphScheme.organFont,\n                    nodeVal: graphScheme.nodeVal,\n                    nodeRelSize: graphScheme.nodeRelSize,\n                    scaleFont: graphScheme.scaleFont\n                }\n                nodes.push(node) \n                link.target = node.name\n                ids.add(node.name)\n            } else {\n                link.target = target.properties.name\n            }\n\n            links.push(link)\n\n        })\n        session.close();\n        onData( {nodes, links} )\n    } catch (e) {\n        throw e\n    }\n    finally {\n        await session.close()\n\n    }\n}\n\nexport const  loadOrganData = async (driver: Driver | undefined,\n    genes: string[],\n    organs: string[],\n    finalVerdict : string,\n    graphScheme : GraphScheme,\n    onData:(data: Force2DData)=> void) => {\n\n    // console.log('enter - loadData')\n\n    if (driver == null) {\n        console.log('Driver not loaded')\n        return \n    }\n\n    const str_genes = ArrayToStr(genes)\n    const str_organs = ArrayToStr(organs)\n\n    let whereCLAUSE = getFinalVerdictClause(finalVerdict)\n\n    // console.log(genes, organs)\n    if ( str_genes !== '') {\n        whereCLAUSE = whereCLAUSE + ' AND g.name IN ' + str_genes\n    }\n    if ( str_organs !== '') {\n        whereCLAUSE = whereCLAUSE + ' AND o.name IN ' + str_organs\n    }\n    const query = `MATCH (g:MGene)-[r]->(o:Organ) ${whereCLAUSE} RETURN g,r,o`\n\n    // console.log('Gene->Orgran', query)\n\n    let session = driver.session()\n\n    try {\n        let res = await session.run(query)\n        let ids = new  Set<string>()\n        let nodes : any[] = []\n        let links : any[] = []\n        res.records.forEach(row => {\n            let link  = { source: '', target: ''}\n        \n            const source = row.get('o') \n            if (!ids.has(source.properties.name)) {\n                let node = { \n                    id: source.identity,\n                    name: source.properties.name,\n                    nodeType: 'organ',\n                    nodeColor: graphScheme.organNode,\n                    fontColor: graphScheme.organFont,\n                    nodeVal: graphScheme.nodeVal,\n                    nodeRelSize: graphScheme.nodeRelSize,\n                    scaleFont: graphScheme.scaleFont\n                }\n                nodes.push(node) \n                link.source = node.name\n                ids.add(node.name)\n            } else {\n                link.source = source.properties.name\n            }\n\n            const target = row.get('g') \n            if (!ids.has(target.properties.name)) {\n                let node = { \n                    id: target.identity,\n                    name: target.properties.name,\n                    // Armando\n                    fullName: source.properties.FullName,\n                    mechanism: source.properties.Mechanism,\n                    // Armando - end\n                    nodeType: 'gene',\n                    nodeColor: graphScheme.geneNode, \n                    fontColor: graphScheme.geneFont,\n                    nodeVal: graphScheme.nodeVal,\n                    nodeRelSize: graphScheme.nodeRelSize,\n                    scaleFont: graphScheme.scaleFont\n                }\n                nodes.push(node) \n                link.target = node.name\n                ids.add(node.name)\n            } else {\n                link.target = target.properties.name\n            }\n            links.push(link)\n\n        })\n        session.close();\n        onData( {nodes, links} )\n    } catch (e) {\n        throw e\n    }\n    finally {\n        await session.close()\n\n    }\n}\n\n\nexport const  loadDiseaseData = async (\n    driver: Driver | undefined,\n    diseases: string[],\n    genes: string[],\n    finalVerdict: string,\n    graphScheme : GraphScheme,\n    onData:(data: Force2DData)=> void) => {\n    if (driver == null) {\n        console.log('Driver not loaded')\n        return \n    }\n\n    const str_diseases = ArrayToStr(diseases)\n    const str_genes = ArrayToStr(genes)\n\n    let whereCLAUSE = getFinalVerdictClause(finalVerdict)\n    \n    if ( str_diseases !== '') {\n        whereCLAUSE = whereCLAUSE + ' AND d.name IN ' + str_diseases\n    }\n    if ( str_genes !== '') {\n        whereCLAUSE = whereCLAUSE + ' AND g.name IN ' + str_genes\n    }\n\n    const query = \n        `MATCH (g:MGene)-[r:CAUSE]->(d:Disease) ${whereCLAUSE} RETURN g,r,d`\n\n\n    let session = driver.session()\n\n    try {\n        let res = await session.run(query)\n        let ids = new  Set<string>()\n        let nodes : any[] = []\n        let links : any[] = []\n        res.records.forEach(row => {\n            let link1  = { source: '', target: ''}\n            let source = row.get('g') \n            if (!ids.has(source.properties.name)) {\n                let node = { \n                    id: source.identity,\n                    name: source.properties.name,\n                    // Armando\n                    fullName: source.properties.FullName,\n                    mechanism: source.properties.Mechanism,\n                    // Armando - end\n                    nodeType: 'gene',\n                    nodeColor: graphScheme.geneNode,\n                    fontColor: graphScheme.geneFont,\n                    nodeVal: graphScheme.nodeVal,\n                    nodeRelSize: graphScheme.nodeRelSize,\n                    scaleFont: graphScheme.scaleFont\n                }\n                nodes.push(node) \n                link1.source = node.name\n                ids.add(node.name)\n            } else {\n                link1.source = source.properties.name\n            }\n\n            let target = row.get('d') \n            if (!ids.has(target.properties.name)) {\n                let node = { \n                    id: target.identity,\n                    name: target.properties.name,\n                    nodeType: 'disease',\n                    nodeColor: graphScheme.diseaseNode, \n                    fontColor: graphScheme.diseaseFont,\n                    nodeVal: graphScheme.nodeVal,\n                    nodeRelSize: graphScheme.nodeRelSize,\n                    scaleFont: graphScheme.scaleFont\n                }\n                nodes.push(node) \n                link1.target = node.name\n                ids.add(node.name)\n            } else {\n                link1.target = target.properties.name\n            }\n            links.push(link1)\n\n        })\n        session.close();\n        onData( {nodes, links} )\n    } catch (e) {\n        throw e\n    }\n    finally {\n        await session.close()\n\n    }\n}\n\n\nexport const  loadSyndromeData = async (driver: Driver | undefined,\n    syndromes: string[],\n    genes: string[],\n    finalVerdict:string,\n    graphScheme : GraphScheme,\n    onData:(data: Force2DData)=> void) => {\n\n    console.log('enter - loadSyndromeData')\n\n    if (driver == null) {\n        console.log('Driver not loaded')\n        return \n    }\n\n    const str_genes = ArrayToStr(genes)\n    const str_syndrome = ArrayToStr(syndromes)\n\n    let whereCLAUSE = getFinalVerdictClause(finalVerdict)\n\n    if ( str_genes !== '') {\n        whereCLAUSE = whereCLAUSE + ' AND g.name IN ' + str_genes\n    }\n    if ( str_syndrome !== '') {\n        whereCLAUSE = whereCLAUSE + ' AND s.name IN ' + str_syndrome\n    }\n    // Armando \n    //const query = `MATCH (g:MGene)-[r]->(s:Syndrome) ${whereCLAUSE} RETURN g,r,s` Need to fix later\n    const query = `MATCH (g:MGene)-[r]->(s:VERBIAGE_SYNDROME) ${whereCLAUSE} RETURN g,r,s`\n    // Armando - end\n\n    console.log('Syndrome->Gene', query)\n\n    let session = driver.session()\n\n    try {\n        let res = await session.run(query)\n        let ids = new  Set<string>()\n        let nodes : any[] = []\n        let links : any[] = []\n        res.records.forEach(row => {\n            let link  = { source: '', target: ''}\n        \n            const source = row.get('s') \n            if (!ids.has(source.properties.name)) {\n                let node = { \n                    id: source.identity,\n                    name: source.properties.name,\n                    // Arnmando\n                    hereditaryType: source.properties.HereditaryType,\n                    // Armnado - end\n                    nodeType: 'syndrome',\n                    nodeColor: graphScheme.syndromeNode,\n                    fontColor: graphScheme.syndromeFont,\n                    nodeVal: graphScheme.nodeVal,\n                    nodeRelSize: graphScheme.nodeRelSize,\n                    scaleFont: graphScheme.scaleFont\n                }\n                nodes.push(node) \n                link.source = node.name\n                ids.add(node.name)\n            } else {\n                link.source = source.properties.name\n            }\n\n           let target = row.get('g') \n            if (!ids.has(target.properties.name)) {\n                let node = { \n                    id: target.identity,\n                    name: target.properties.name,\n                    // Armando \n                    fullName: source.properties.FullName,\n                    mechanism: source.properties.Mechanism,\n                    // Armando - end\n                    nodeType: 'gene',\n                    nodeColor: graphScheme.geneNode, \n                    fontColor: graphScheme.geneFont,\n                    nodeVal: graphScheme.nodeVal,\n                    nodeRelSize: graphScheme.nodeRelSize,\n                    scaleFont: graphScheme.scaleFont\n                }\n                nodes.push(node) \n                link.target = node.name\n                ids.add(node.name)\n            } else {\n                link.target = target.properties.name\n            }\n            links.push(link)\n\n        })\n        session.close();\n        onData( {nodes, links} )\n    } catch (e) {\n        throw e\n    }\n    finally {\n        await session.close()\n\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}