{"ast":null,"code":"\"use strict\";\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar result_summary_1 = __importDefault(require(\"./result-summary\"));\n\nvar internal_1 = require(\"./internal\");\n\nvar EMPTY_CONNECTION_HOLDER = internal_1.connectionHolder.EMPTY_CONNECTION_HOLDER;\n/**\n * @private\n * @param {Error} error The error\n * @returns {void}\n */\n\nvar DEFAULT_ON_ERROR = function (error) {\n  console.log('Uncaught error when processing result: ' + error);\n};\n/**\n * @private\n * @param {ResultSummary} summary\n * @returns {void}\n */\n\n\nvar DEFAULT_ON_COMPLETED = function (summary) {};\n/**\n * A stream of {@link Record} representing the result of a query.\n * Can be consumed eagerly as {@link Promise} resolved with array of records and {@link ResultSummary}\n * summary, or rejected with error that contains {@link string} code and {@link string} message.\n * Alternatively can be consumed lazily using {@link Result#subscribe} function.\n * @access public\n */\n\n\nvar Result =\n/** @class */\nfunction () {\n  /**\n   * Inject the observer to be used.\n   * @constructor\n   * @access private\n   * @param {Promise<observer.ResultStreamObserver>} streamObserverPromise\n   * @param {mixed} query - Cypher query to execute\n   * @param {Object} parameters - Map with parameters to use in query\n   * @param {ConnectionHolder} connectionHolder - to be notified when result is either fully consumed or error happened.\n   */\n  function Result(streamObserverPromise, query, parameters, connectionHolder) {\n    this._stack = captureStacktrace();\n    this._streamObserverPromise = streamObserverPromise;\n    this._p = null;\n    this._query = query;\n    this._parameters = parameters || {};\n    this._connectionHolder = connectionHolder || EMPTY_CONNECTION_HOLDER;\n  }\n  /**\n   * Returns a promise for the field keys.\n   *\n   * *Should not be combined with {@link Result#subscribe} function.*\n   *\n   * @public\n   * @returns {Promise<string[]>} - Field keys, in the order they will appear in records.\n   }\n   */\n\n\n  Result.prototype.keys = function () {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      _this._streamObserverPromise.then(function (observer) {\n        return observer.subscribe({\n          onKeys: function (keys) {\n            return resolve(keys);\n          },\n          onError: function (err) {\n            return reject(err);\n          }\n        });\n      }).catch(reject);\n    });\n  };\n  /**\n   * Returns a promise for the result summary.\n   *\n   * *Should not be combined with {@link Result#subscribe} function.*\n   *\n   * @public\n   * @returns {Promise<ResultSummary>} - Result summary.\n   *\n   */\n\n\n  Result.prototype.summary = function () {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      _this._streamObserverPromise.then(function (o) {\n        o.cancel();\n        o.subscribe({\n          onCompleted: function (metadata) {\n            return _this._createSummary(metadata).then(resolve, reject);\n          },\n          onError: function (err) {\n            return reject(err);\n          }\n        });\n      }).catch(reject);\n    });\n  };\n  /**\n   * Create and return new Promise\n   *\n   * @private\n   * @return {Promise} new Promise.\n   */\n\n\n  Result.prototype._getOrCreatePromise = function () {\n    var _this = this;\n\n    if (!this._p) {\n      this._p = new Promise(function (resolve, reject) {\n        var records = [];\n        var observer = {\n          onNext: function (record) {\n            records.push(record);\n          },\n          onCompleted: function (summary) {\n            resolve({\n              records: records,\n              summary: summary\n            });\n          },\n          onError: function (error) {\n            reject(error);\n          }\n        };\n\n        _this.subscribe(observer);\n      });\n    }\n\n    return this._p;\n  };\n  /**\n   * Waits for all results and calls the passed in function with the results.\n   *\n   * *Should not be combined with {@link Result#subscribe} function.*\n   *\n   * @param {function(result: {records:Array<Record>, summary: ResultSummary})} onFulfilled - function to be called\n   * when finished.\n   * @param {function(error: {message:string, code:string})} onRejected - function to be called upon errors.\n   * @return {Promise} promise.\n   */\n\n\n  Result.prototype.then = function (onFulfilled, onRejected) {\n    return this._getOrCreatePromise().then(onFulfilled, onRejected);\n  };\n  /**\n   * Catch errors when using promises.\n   *\n   * *Should not be combined with {@link Result#subscribe} function.*\n   *\n   * @param {function(error: Neo4jError)} onRejected - Function to be called upon errors.\n   * @return {Promise} promise.\n   */\n\n\n  Result.prototype.catch = function (onRejected) {\n    return this._getOrCreatePromise().catch(onRejected);\n  };\n\n  Result.prototype.finally = function (onfinally) {\n    return this._getOrCreatePromise().finally(onfinally);\n  };\n  /**\n   * Stream records to observer as they come in, this is a more efficient method\n   * of handling the results, and allows you to handle arbitrarily large results.\n   *\n   * @param {Object} observer - Observer object\n   * @param {function(keys: string[])} observer.onKeys - handle stream head, the field keys.\n   * @param {function(record: Record)} observer.onNext - handle records, one by one.\n   * @param {function(summary: ResultSummary)} observer.onCompleted - handle stream tail, the result summary.\n   * @param {function(error: {message:string, code:string})} observer.onError - handle errors.\n   * @return {void}\n   */\n\n\n  Result.prototype.subscribe = function (observer) {\n    var _this = this;\n\n    var onCompletedOriginal = observer.onCompleted || DEFAULT_ON_COMPLETED;\n\n    var onCompletedWrapper = function (metadata) {\n      _this._createSummary(metadata).then(function (summary) {\n        return onCompletedOriginal.call(observer, summary);\n      });\n    };\n\n    observer.onCompleted = onCompletedWrapper;\n    var onErrorOriginal = observer.onError || DEFAULT_ON_ERROR;\n\n    var onErrorWrapper = function (error) {\n      // notify connection holder that the used connection is not needed any more because error happened\n      // and result can't bee consumed any further; call the original onError callback after that\n      _this._connectionHolder.releaseConnection().then(function () {\n        replaceStacktrace(error, _this._stack);\n        onErrorOriginal.call(observer, error);\n      });\n    };\n\n    observer.onError = onErrorWrapper;\n\n    this._streamObserverPromise.then(function (o) {\n      return o.subscribe(observer);\n    }).catch(function (error) {\n      return observer.onError(error);\n    });\n  };\n  /**\n   * Signals the stream observer that the future records should be discarded on the server.\n   *\n   * @protected\n   * @since 4.0.0\n   * @returns {void}\n   */\n\n\n  Result.prototype._cancel = function () {\n    this._streamObserverPromise.then(function (o) {\n      return o.cancel();\n    });\n  };\n\n  Result.prototype._createSummary = function (metadata) {\n    var _a = internal_1.util.validateQueryAndParameters(this._query, this._parameters, {\n      skipAsserts: true\n    }),\n        query = _a.validatedQuery,\n        parameters = _a.params;\n\n    var connectionHolder = this._connectionHolder;\n    return connectionHolder.getConnection().then( // onFulfilled:\n    function (connection) {\n      return connectionHolder.releaseConnection().then(function () {\n        return connection ? connection.protocol().version : undefined;\n      });\n    }, // onRejected:\n    function (_) {\n      return undefined;\n    }).then(function (protocolVersion) {\n      return new result_summary_1.default(query, parameters, metadata, protocolVersion);\n    });\n  };\n\n  return Result;\n}();\n\nSymbol.toStringTag;\n\nfunction captureStacktrace() {\n  var error = new Error('');\n\n  if (error.stack) {\n    return error.stack.replace(/^Error(\\n\\r)*/, ''); // we don't need the 'Error\\n' part, if only it exists\n  }\n\n  return null;\n}\n/**\n * @private\n * @param {Error} error The error\n * @param {string| null} newStack The newStack\n * @returns {void}\n */\n\n\nfunction replaceStacktrace(error, newStack) {\n  if (newStack) {\n    // Error.prototype.toString() concatenates error.name and error.message nicely\n    // then we add the rest of the stack trace\n    error.stack = error.toString() + '\\n' + newStack;\n  }\n}\n\nexports.default = Result;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","result_summary_1","require","internal_1","EMPTY_CONNECTION_HOLDER","connectionHolder","DEFAULT_ON_ERROR","error","console","log","DEFAULT_ON_COMPLETED","summary","Result","streamObserverPromise","query","parameters","_stack","captureStacktrace","_streamObserverPromise","_p","_query","_parameters","_connectionHolder","prototype","keys","_this","Promise","resolve","reject","then","observer","subscribe","onKeys","onError","err","catch","o","cancel","onCompleted","metadata","_createSummary","_getOrCreatePromise","records","onNext","record","push","onFulfilled","onRejected","finally","onfinally","onCompletedOriginal","onCompletedWrapper","call","onErrorOriginal","onErrorWrapper","releaseConnection","replaceStacktrace","_cancel","_a","util","validateQueryAndParameters","skipAsserts","validatedQuery","params","getConnection","connection","protocol","version","undefined","_","protocolVersion","default","Symbol","toStringTag","Error","stack","replace","newStack","toString"],"sources":["/Users/zack/src/gene-graph-MUSC/node_modules/neo4j-driver-core/lib/result.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar result_summary_1 = __importDefault(require(\"./result-summary\"));\nvar internal_1 = require(\"./internal\");\nvar EMPTY_CONNECTION_HOLDER = internal_1.connectionHolder.EMPTY_CONNECTION_HOLDER;\n/**\n * @private\n * @param {Error} error The error\n * @returns {void}\n */\nvar DEFAULT_ON_ERROR = function (error) {\n    console.log('Uncaught error when processing result: ' + error);\n};\n/**\n * @private\n * @param {ResultSummary} summary\n * @returns {void}\n */\nvar DEFAULT_ON_COMPLETED = function (summary) { };\n/**\n * A stream of {@link Record} representing the result of a query.\n * Can be consumed eagerly as {@link Promise} resolved with array of records and {@link ResultSummary}\n * summary, or rejected with error that contains {@link string} code and {@link string} message.\n * Alternatively can be consumed lazily using {@link Result#subscribe} function.\n * @access public\n */\nvar Result = /** @class */ (function () {\n    /**\n     * Inject the observer to be used.\n     * @constructor\n     * @access private\n     * @param {Promise<observer.ResultStreamObserver>} streamObserverPromise\n     * @param {mixed} query - Cypher query to execute\n     * @param {Object} parameters - Map with parameters to use in query\n     * @param {ConnectionHolder} connectionHolder - to be notified when result is either fully consumed or error happened.\n     */\n    function Result(streamObserverPromise, query, parameters, connectionHolder) {\n        this._stack = captureStacktrace();\n        this._streamObserverPromise = streamObserverPromise;\n        this._p = null;\n        this._query = query;\n        this._parameters = parameters || {};\n        this._connectionHolder = connectionHolder || EMPTY_CONNECTION_HOLDER;\n    }\n    /**\n     * Returns a promise for the field keys.\n     *\n     * *Should not be combined with {@link Result#subscribe} function.*\n     *\n     * @public\n     * @returns {Promise<string[]>} - Field keys, in the order they will appear in records.\n     }\n     */\n    Result.prototype.keys = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            _this._streamObserverPromise\n                .then(function (observer) {\n                return observer.subscribe({\n                    onKeys: function (keys) { return resolve(keys); },\n                    onError: function (err) { return reject(err); }\n                });\n            })\n                .catch(reject);\n        });\n    };\n    /**\n     * Returns a promise for the result summary.\n     *\n     * *Should not be combined with {@link Result#subscribe} function.*\n     *\n     * @public\n     * @returns {Promise<ResultSummary>} - Result summary.\n     *\n     */\n    Result.prototype.summary = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            _this._streamObserverPromise\n                .then(function (o) {\n                o.cancel();\n                o.subscribe({\n                    onCompleted: function (metadata) {\n                        return _this._createSummary(metadata).then(resolve, reject);\n                    },\n                    onError: function (err) { return reject(err); }\n                });\n            })\n                .catch(reject);\n        });\n    };\n    /**\n     * Create and return new Promise\n     *\n     * @private\n     * @return {Promise} new Promise.\n     */\n    Result.prototype._getOrCreatePromise = function () {\n        var _this = this;\n        if (!this._p) {\n            this._p = new Promise(function (resolve, reject) {\n                var records = [];\n                var observer = {\n                    onNext: function (record) {\n                        records.push(record);\n                    },\n                    onCompleted: function (summary) {\n                        resolve({ records: records, summary: summary });\n                    },\n                    onError: function (error) {\n                        reject(error);\n                    }\n                };\n                _this.subscribe(observer);\n            });\n        }\n        return this._p;\n    };\n    /**\n     * Waits for all results and calls the passed in function with the results.\n     *\n     * *Should not be combined with {@link Result#subscribe} function.*\n     *\n     * @param {function(result: {records:Array<Record>, summary: ResultSummary})} onFulfilled - function to be called\n     * when finished.\n     * @param {function(error: {message:string, code:string})} onRejected - function to be called upon errors.\n     * @return {Promise} promise.\n     */\n    Result.prototype.then = function (onFulfilled, onRejected) {\n        return this._getOrCreatePromise().then(onFulfilled, onRejected);\n    };\n    /**\n     * Catch errors when using promises.\n     *\n     * *Should not be combined with {@link Result#subscribe} function.*\n     *\n     * @param {function(error: Neo4jError)} onRejected - Function to be called upon errors.\n     * @return {Promise} promise.\n     */\n    Result.prototype.catch = function (onRejected) {\n        return this._getOrCreatePromise().catch(onRejected);\n    };\n    Result.prototype.finally = function (onfinally) {\n        return this._getOrCreatePromise().finally(onfinally);\n    };\n    /**\n     * Stream records to observer as they come in, this is a more efficient method\n     * of handling the results, and allows you to handle arbitrarily large results.\n     *\n     * @param {Object} observer - Observer object\n     * @param {function(keys: string[])} observer.onKeys - handle stream head, the field keys.\n     * @param {function(record: Record)} observer.onNext - handle records, one by one.\n     * @param {function(summary: ResultSummary)} observer.onCompleted - handle stream tail, the result summary.\n     * @param {function(error: {message:string, code:string})} observer.onError - handle errors.\n     * @return {void}\n     */\n    Result.prototype.subscribe = function (observer) {\n        var _this = this;\n        var onCompletedOriginal = observer.onCompleted || DEFAULT_ON_COMPLETED;\n        var onCompletedWrapper = function (metadata) {\n            _this._createSummary(metadata).then(function (summary) {\n                return onCompletedOriginal.call(observer, summary);\n            });\n        };\n        observer.onCompleted = onCompletedWrapper;\n        var onErrorOriginal = observer.onError || DEFAULT_ON_ERROR;\n        var onErrorWrapper = function (error) {\n            // notify connection holder that the used connection is not needed any more because error happened\n            // and result can't bee consumed any further; call the original onError callback after that\n            _this._connectionHolder.releaseConnection().then(function () {\n                replaceStacktrace(error, _this._stack);\n                onErrorOriginal.call(observer, error);\n            });\n        };\n        observer.onError = onErrorWrapper;\n        this._streamObserverPromise\n            .then(function (o) {\n            return o.subscribe(observer);\n        })\n            .catch(function (error) { return observer.onError(error); });\n    };\n    /**\n     * Signals the stream observer that the future records should be discarded on the server.\n     *\n     * @protected\n     * @since 4.0.0\n     * @returns {void}\n     */\n    Result.prototype._cancel = function () {\n        this._streamObserverPromise.then(function (o) { return o.cancel(); });\n    };\n    Result.prototype._createSummary = function (metadata) {\n        var _a = internal_1.util.validateQueryAndParameters(this._query, this._parameters, {\n            skipAsserts: true\n        }), query = _a.validatedQuery, parameters = _a.params;\n        var connectionHolder = this._connectionHolder;\n        return connectionHolder\n            .getConnection()\n            .then(\n        // onFulfilled:\n        function (connection) {\n            return connectionHolder\n                .releaseConnection()\n                .then(function () {\n                return connection ? connection.protocol().version : undefined;\n            });\n        }, \n        // onRejected:\n        function (_) { return undefined; })\n            .then(function (protocolVersion) {\n            return new result_summary_1.default(query, parameters, metadata, protocolVersion);\n        });\n    };\n    return Result;\n}());\nSymbol.toStringTag;\nfunction captureStacktrace() {\n    var error = new Error('');\n    if (error.stack) {\n        return error.stack.replace(/^Error(\\n\\r)*/, ''); // we don't need the 'Error\\n' part, if only it exists\n    }\n    return null;\n}\n/**\n * @private\n * @param {Error} error The error\n * @param {string| null} newStack The newStack\n * @returns {void}\n */\nfunction replaceStacktrace(error, newStack) {\n    if (newStack) {\n        // Error.prototype.toString() concatenates error.name and error.message nicely\n        // then we add the rest of the stack trace\n        error.stack = error.toString() + '\\n' + newStack;\n    }\n}\nexports.default = Result;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}